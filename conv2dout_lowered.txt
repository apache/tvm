----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Generate Sketches		#s: 1
Sample Initial Population	#s: 66	fail_ct: 1982	Time elapsed: 2.01
GA Iter: 0	Max score: 0.9867	Min score: 0.0250	#Pop: 66	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9997	Min score: 0.9788	#Pop: 128	#M+: 1390	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 30.83
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
Get 10 programs to measure:
..........**********==================================================
No: 1	GFLOPS: 40.51 / 40.51	results: MeasureResult(cost:[0.0057], error_no:0, all_cost:1.67, Tstamp:1732601215.31)
=================================================
Placeholder: data, kernel, bias
blockIdx.x i0.0@i1.0@i2.0@i3.0@ (0,8)
  vthread i0.1@i1.1@i2.1@i3.1@ (0,2)
    threadIdx.x i0.2@i1.2@i2.2@i3.2@ (0,16)
      for rc.0 (0,32)
        for ry.0 (0,3)
          for ax0@ax1@ax2@ax3@.0.0 (0,192)
            threadIdx.x ax0@ax1@ax2@ax3@.0.1 (0,16)
              kernel.shared = ...
          for ax0@ax1@ax2@ax3@.0.0 (0,3)
            threadIdx.x ax0@ax1@ax2@ax3@.0.1 (0,16)
              vectorize ax0@ax1@ax2@ax3@.1 (0,24)
                pad_temp.shared = ...
          for rc.1 (0,16)
            for yy.3 (0,7)
              for xx.3 (0,7)
                for rx.2 (0,3)
                  for ff.4 (0,2)
                    conv2d_nchw = ...
      for i1.3 (0,2)
        for i2.3 (0,7)
          for i3.3 (0,7)
            compute = ...

==================================================
No: 2	GFLOPS: 356.02 / 356.02	results: MeasureResult(cost:[0.0006], error_no:0, all_cost:0.95, Tstamp:1732601215.87)
==================================================
Placeholder: data, kernel, bias
blockIdx.x i0.0@i1.0@i2.0@i3.0@ (0,4)
  vthread i0.1@i1.1@i2.1@i3.1@ (0,7)
    threadIdx.x i0.2@i1.2@i2.2@i3.2@ (0,128)
      for rc.0 (0,512)
        for ax0@ax1@ax2@ax3@.0.0 (0,3)
          threadIdx.x ax0@ax1@ax2@ax3@.0.1 (0,128)
            vectorize ax0@ax1@ax2@ax3@.1 (0,3)
              kernel.shared = ...
        threadIdx.x ax0@ax1@ax2@ax3@.0.1 (0,128)
          pad_temp.shared = ...
        for ry.2 (0,3)
          for rx.2 (0,3)
            for xx.4 (0,7)
              conv2d_nchw = ...
      for i3.3 (0,7)
        compute = ...

==================================================
No: 3	GFLOPS: 505.45 / 505.45	results: MeasureResult(cost:[0.0005], error_no:0, all_cost:11.00, Tstamp:1732601226.47)
==================================================
Placeholder: data, kernel, bias
blockIdx.x i0.0@i1.0@i2.0@i3.0@ (0,16)
  threadIdx.x i0.2@i1.2@i2.2@i3.2@ (0,392)
    conv2d_nchw auto_unroll: 16
    for rc.0 (0,16)
      for ax0@ax1@ax2@ax3@.0.0 (0,24)
        threadIdx.x ax0@ax1@ax2@ax3@.0.1 (0,392)
          kernel.shared = ...
      for ax0@ax1@ax2@ax3@.0.0 (0,7)
        threadIdx.x ax0@ax1@ax2@ax3@.0.1 (0,392)
          pad_temp.shared = ...
      for rc.1 (0,32)
        for rx.1 (0,3)
          for ff.3 (0,4)
            for ry.2 (0,3)
              conv2d_nchw = ...
    for i1.3 (0,4)
      compute = ...

==================================================
No: 4	GFLOPS: 218.94 / 505.45	results: MeasureResult(cost:[0.0011], error_no:0, all_cost:1.55, Tstamp:1732601227.51)
==================================================
Placeholder: data, kernel, bias
blockIdx.x i0.0@i1.0@i2.0@i3.0@ (0,16)
  vthread i0.1@i1.1@i2.1@i3.1@ (0,7)
    threadIdx.x i0.2@i1.2@i2.2@i3.2@ (0,56)
      conv2d_nchw auto_unroll: 64
      for rc.0 (0,32)
        for ax0@ax1@ax2@ax3@.0.0 (0,83)
          threadIdx.x ax0@ax1@ax2@ax3@.0.1 (0,56)
            kernel.shared = ...
        for ax0@ax1@ax2@ax3@.0.0 (0,24)
          threadIdx.x ax0@ax1@ax2@ax3@.0.1 (0,56)
            pad_temp.shared = ...
        for rx.1 (0,3)
          for ff.3 (0,4)
            for rc.2 (0,16)
              for ry.2 (0,3)
                conv2d_nchw = ...
      for i1.3 (0,4)
        compute = ...

==================================================
No: 5	GFLOPS: 259.70 / 505.45	results: MeasureResult(cost:[0.0009], error_no:0, all_cost:0.95, Tstamp:1732601228.07)
==================================================
Placeholder: data, kernel, bias
blockIdx.x i0.0@i1.0@i2.0@i3.0@ (0,8)
  vthread i0.1@i1.1@i2.1@i3.1@ (0,7)
    threadIdx.x i0.2@i1.2@i2.2@i3.2@ (0,112)
      for rc.0 (0,32)
        for ry.0 (0,3)
          for ax0@ax1@ax2@ax3@.0.0 (0,28)
            threadIdx.x ax0@ax1@ax2@ax3@.0.1 (0,112)
              kernel.shared = ...
          for ax0@ax1@ax2@ax3@.0.0 (0,9)
            threadIdx.x ax0@ax1@ax2@ax3@.0.1 (0,112)
              pad_temp.shared = ...
          for rc.1 (0,16)
            for rx.2 (0,3)
              for ff.4 (0,4)
                conv2d_nchw = ...
      for i1.3 (0,4)
        compute = ...

==================================================
No: 6	GFLOPS: 349.91 / 505.45	results: MeasureResult(cost:[0.0007], error_no:0, all_cost:0.93, Tstamp:1732601228.72)
==================================================
Placeholder: data, kernel, bias
blockIdx.x i0.0@i1.0@i2.0@i3.0@ (0,8)
  threadIdx.x i0.2@i1.2@i2.2@i3.2@ (0,448)
    conv2d_nchw auto_unroll: 64
    for rc.0 (0,512)
      threadIdx.x ax0@ax1@ax2@ax3@.0.1 (0,448)
        vectorize ax0@ax1@ax2@ax3@.1 (0,3)
          kernel.shared = ...
      threadIdx.x ax0@ax1@ax2@ax3@.0.1 (0,448)
        pad_temp.shared = ...
      for ry.2 (0,3)
        for rx.2 (0,3)
          for yy.4 (0,7)
            conv2d_nchw = ...
    for i2.3 (0,7)
      compute = ...

==================================================
No: 7	GFLOPS: 189.28 / 505.45	results: MeasureResult(cost:[0.0012], error_no:0, all_cost:11.13, Tstamp:1732601239.33)
==================================================
Placeholder: data, kernel, bias
blockIdx.x i0.0@i1.0@i2.0@i3.0@ (0,4)
  vthread i0.1@i1.1@i2.1@i3.1@ (0,7)
    threadIdx.x i0.2@i1.2@i2.2@i3.2@ (0,64)
      conv2d_nchw auto_unroll: 64
      for rc.0 (0,64)
        for ax0@ax1@ax2@ax3@.0.0 (0,144)
          threadIdx.x ax0@ax1@ax2@ax3@.0.1 (0,64)
            kernel.shared = ...
        for ax0@ax1@ax2@ax3@.0.0 (0,11)
          threadIdx.x ax0@ax1@ax2@ax3@.0.1 (0,64)
            pad_temp.shared = ...
        for rc.1 (0,8)
          for ff.3 (0,2)
            for ry.2 (0,3)
              for rx.2 (0,3)
                for yy.4 (0,7)
                  conv2d_nchw = ...
      for i1.3 (0,2)
        for i2.3 (0,7)
          compute = ...

==================================================
No: 8	GFLOPS: 211.81 / 505.45	results: MeasureResult(cost:[0.0011], error_no:0, all_cost:10.46, Tstamp:1732601249.41)
==================================================
Placeholder: data, kernel, bias
blockIdx.x i0.0@i1.0@i2.0@i3.0@ (0,14)
  threadIdx.x i0.2@i1.2@i2.2@i3.2@ (0,128)
    for rc.0 (0,256)
      for ry.0 (0,3)
        for rx.0 (0,3)
          for ax0@ax1@ax2@ax3@.0.0 (0,4)
            threadIdx.x ax0@ax1@ax2@ax3@.0.1 (0,128)
              kernel.shared = ...
          threadIdx.x ax0@ax1@ax2@ax3@.0.1 (0,128)
            pad_temp.shared = ...
          for rc.1 (0,2)
            for ff.4 (0,2)
              for yy.4 (0,7)
                conv2d_nchw = ...
    for i1.3 (0,2)
      for i2.3 (0,7)
        compute = ...

==================================================
No: 9	GFLOPS: 106.17 / 505.45	results: MeasureResult(cost:[0.0022], error_no:0, all_cost:0.95, Tstamp:1732601249.98)
==================================================
Placeholder: data, kernel, bias
blockIdx.x i0.0@i1.0@i2.0@i3.0@ (0,28)
  vthread i0.1@i1.1@i2.1@i3.1@ (0,4)
    threadIdx.x i0.2@i1.2@i2.2@i3.2@ (0,56)
      conv2d_nchw auto_unroll: 16
      for rc.0 (0,256)
        for ax0@ax1@ax2@ax3@.0.0 (0,42)
          threadIdx.x ax0@ax1@ax2@ax3@.0.1 (0,56)
            kernel.shared = ...
        threadIdx.x ax0@ax1@ax2@ax3@.0.1 (0,56)
          pad_temp.shared = ...
        for ry.1 (0,3)
          for rx.1 (0,3)
            for ff.3 (0,2)
              for rc.2 (0,2)
                for ff.4 (0,2)
                  conv2d_nchw = ...
      for i1.3 (0,4)
        compute = ...

==================================================
No: 10	GFLOPS: 315.68 / 505.45	results: MeasureResult(cost:[0.0007], error_no:0, all_cost:1.12, Tstamp:1732601250.54)
==================================================
Placeholder: data, kernel, bias
blockIdx.x i0.0@i1.0@i2.0@i3.0@ (0,14)
  threadIdx.x i0.2@i1.2@i2.2@i3.2@ (0,128)
    conv2d_nchw auto_unroll: 1024
    for rc.0 (0,128)
      for ry.0 (0,3)
        for rx.0 (0,3)
          threadIdx.x ax0@ax1@ax2@ax3@.0.1 (0,128)
            vectorize ax0@ax1@ax2@ax3@.1 (0,9)
              kernel.shared = ...
          threadIdx.x ax0@ax1@ax2@ax3@.0.1 (0,128)
            pad_temp.shared = ...
          for rc.2 (0,4)
            for ff.4 (0,2)
              for yy.4 (0,7)
                conv2d_nchw = ...
    for i1.3 (0,2)
      for i2.3 (0,7)
        compute = ...

Time elapsed for measurement: 38.33 s
----------------------------------------------------------------------
------------------------------  [ Done ]
----------------------------------------------------------------------
Computational DAG:
data = PLACEHOLDER [1, 512, 7, 7]
pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
kernel = PLACEHOLDER [512, 512, 3, 3]
conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
bias = PLACEHOLDER [1, 512, 1, 1]
T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)

Get devices for measurement successfully!

Phase 0
--------------------
0
<class 'tvm.tir.expr.IntImm'>
1
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
512
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
T.bool(True)
<class 'tvm.tir.expr.IntImm'>
64
<class 'tvm.tir.expr.IntImm'>
1
<class 'tvm.tir.expr.IntImm'>
49
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
1
<class 'tvm.tir.expr.IntImm'>
blockIdx_x
<class 'tvm.tir.expr.Var'>
8
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 8
<class 'tvm.tir.expr.Mul'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x
<class 'tvm.tir.expr.Var'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
1
<class 'tvm.tir.expr.IntImm'>
T.bool(True)
<class 'tvm.tir.expr.IntImm'>
1024
<class 'tvm.tir.expr.IntImm'>
1
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
2
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
4
<class 'tvm.tir.expr.IntImm'>
T.float32(0.0)
<class 'tvm.tir.expr.FloatImm'>
0
<class 'tvm.tir.expr.IntImm'>
ff_inner_init
<class 'tvm.tir.expr.Var'>
ff_outer_inner_init
<class 'tvm.tir.expr.Var'>
ff_outer_inner_init * 4
<class 'tvm.tir.expr.Mul'>
ff_inner_init + ff_outer_inner_init * 4
<class 'tvm.tir.expr.Add'>
ff_inner_init + ff_outer_inner_init * 4 + blockIdx_x * 8
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((1, 512, 7, 7))
ff_inner_init = T.int32()
ff_outer_inner_init = T.int32()
blockIdx_x = T.int32()
threadIdx_x = T.int32()
conv2d_nchw[0, ff_inner_init + ff_outer_inner_init * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = T.float32(0.0)
<class 'tvm.tir.stmt.BufferStore'>
for ff_inner_init in range(4):
    conv2d_nchw = T.Buffer((1, 512, 7, 7))
    ff_outer_inner_init = T.int32()
    blockIdx_x = T.int32()
    threadIdx_x = T.int32()
    conv2d_nchw[0, ff_inner_init + ff_outer_inner_init * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = T.float32(0.0)
<class 'tvm.tir.stmt.For'>
for ff_outer_inner_init, ff_inner_init in T.grid(2, 4):
    conv2d_nchw = T.Buffer((1, 512, 7, 7))
    blockIdx_x = T.int32()
    threadIdx_x = T.int32()
    conv2d_nchw[0, ff_inner_init + ff_outer_inner_init * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = T.float32(0.0)
<class 'tvm.tir.stmt.For'>
0
<class 'tvm.tir.expr.IntImm'>
8
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
3
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
1
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer
<class 'tvm.tir.expr.Var'>
64
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 64
<class 'tvm.tir.expr.Mul'>
64
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
9
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer
<class 'tvm.tir.expr.Var'>
7
<class 'tvm.tir.expr.IntImm'>
T.bool(True)
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
83
<class 'tvm.tir.expr.IntImm'>
49
<class 'tvm.tir.expr.IntImm'>
threadIdx_x
<class 'tvm.tir.expr.Var'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer
<class 'tvm.tir.expr.Var'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49
<class 'tvm.tir.expr.Mul'>
threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49
<class 'tvm.tir.expr.Add'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7
<class 'tvm.tir.expr.FloorDiv'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9
<class 'tvm.tir.expr.FloorDiv'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64
<class 'tvm.tir.expr.FloorDiv'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64 < 1
<class 'tvm.tir.expr.LT'>
T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64 < 1)
<class 'tvm.tir.expr.Call'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64
<class 'tvm.tir.expr.FloorMod'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64
<class 'tvm.tir.expr.Add'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64
<class 'tvm.tir.expr.Sub'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64
<class 'tvm.tir.expr.LT'>
T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64)
<class 'tvm.tir.expr.Call'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7
<class 'tvm.tir.expr.FloorMod'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - rx_outer_outer
<class 'tvm.tir.expr.Sub'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - rx_outer_outer < 7
<class 'tvm.tir.expr.LT'>
T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - rx_outer_outer < 7)
<class 'tvm.tir.expr.Call'>
64
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 < 64
<class 'tvm.tir.expr.LT'>
T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 < 64)
<class 'tvm.tir.expr.Call'>
576
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 < 576
<class 'tvm.tir.expr.LT'>
T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 < 576)
<class 'tvm.tir.expr.Call'>
4032
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032
<class 'tvm.tir.expr.LT'>
T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032)
<class 'tvm.tir.expr.Call'>
4032
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032
<class 'tvm.tir.expr.LT'>
T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032)
<class 'tvm.tir.expr.Call'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9
<class 'tvm.tir.expr.FloorMod'>
1
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1
<class 'tvm.tir.expr.GE'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8
<class 'tvm.tir.expr.LT'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1
<class 'tvm.tir.expr.GE'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1
<class 'tvm.tir.expr.And'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8
<class 'tvm.tir.expr.LT'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1
<class 'tvm.tir.expr.Sub'>
1
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1
<class 'tvm.tir.expr.Sub'>
data[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1]
<class 'tvm.tir.expr.BufferLoad'>
T.float32(0.0)
<class 'tvm.tir.expr.FloatImm'>
T.if_then_else((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
threadIdx_x = T.int32()
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((1, 512, 7, 7))
rc_outer_outer = T.int32()
pad_temp_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer] = T.if_then_else((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
    pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((1, 512, 7, 7))
    rc_outer_outer = T.int32()
    pad_temp_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer] = T.if_then_else((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
    if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
        pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((1, 512, 7, 7))
        rc_outer_outer = T.int32()
        pad_temp_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer] = T.if_then_else((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 < 576):
    if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
        if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
            pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((1, 512, 7, 7))
            rc_outer_outer = T.int32()
            pad_temp_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer] = T.if_then_else((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 < 64):
    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 < 576):
        if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
            if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
                rx_outer_outer = T.int32()
                data = T.Buffer((1, 512, 7, 7))
                rc_outer_outer = T.int32()
                pad_temp_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer] = T.if_then_else((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
rx_outer_outer = T.int32()
if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - rx_outer_outer < 7):
    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 < 64):
        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 < 576):
            if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                    pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
                    data = T.Buffer((1, 512, 7, 7))
                    rc_outer_outer = T.int32()
                    pad_temp_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer] = T.if_then_else((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
rc_outer_outer = T.int32()
if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
    rx_outer_outer = T.int32()
    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - rx_outer_outer < 7):
        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 < 64):
            if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 < 576):
                if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                    if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                        pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
                        data = T.Buffer((1, 512, 7, 7))
                        pad_temp_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer] = T.if_then_else((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64 < 1):
    rc_outer_outer = T.int32()
    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
        rx_outer_outer = T.int32()
        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - rx_outer_outer < 7):
            if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 < 64):
                if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 < 576):
                    if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                        if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                            pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
                            data = T.Buffer((1, 512, 7, 7))
                            pad_temp_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer] = T.if_then_else((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64 < 1):
        rc_outer_outer = T.int32()
        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
            rx_outer_outer = T.int32()
            if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - rx_outer_outer < 7):
                if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 < 64):
                    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 < 576):
                        if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                            if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
                                data = T.Buffer((1, 512, 7, 7))
                                pad_temp_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer] = T.if_then_else((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
    threadIdx_x = T.launch_thread("threadIdx.x", 49)
    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64 < 1):
        rc_outer_outer = T.int32()
        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
            rx_outer_outer = T.int32()
            if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - rx_outer_outer < 7):
                if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 < 64):
                    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 < 576):
                        if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                            if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
                                data = T.Buffer((1, 512, 7, 7))
                                pad_temp_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer] = T.if_then_else((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.For'>
8
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 8
<class 'tvm.tir.expr.Mul'>
8
<class 'tvm.tir.expr.IntImm'>
64
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 64
<class 'tvm.tir.expr.Mul'>
64
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
3
<class 'tvm.tir.expr.IntImm'>
1
<class 'tvm.tir.expr.IntImm'>
T.bool(True)
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
32
<class 'tvm.tir.expr.IntImm'>
49
<class 'tvm.tir.expr.IntImm'>
threadIdx_x
<class 'tvm.tir.expr.Var'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer
<class 'tvm.tir.expr.Var'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49
<class 'tvm.tir.expr.Mul'>
threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49
<class 'tvm.tir.expr.Add'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3
<class 'tvm.tir.expr.FloorDiv'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64
<class 'tvm.tir.expr.FloorDiv'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8
<class 'tvm.tir.expr.Add'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 - blockIdx_x * 8
<class 'tvm.tir.expr.Sub'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 - blockIdx_x * 8 < 8
<class 'tvm.tir.expr.LT'>
T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 - blockIdx_x * 8 < 8)
<class 'tvm.tir.expr.Call'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64
<class 'tvm.tir.expr.FloorMod'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64
<class 'tvm.tir.expr.Add'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64
<class 'tvm.tir.expr.Sub'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64
<class 'tvm.tir.expr.LT'>
T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64)
<class 'tvm.tir.expr.Call'>
rx_outer_outer - rx_outer_outer
<class 'tvm.tir.expr.Sub'>
rx_outer_outer - rx_outer_outer < 1
<class 'tvm.tir.expr.LT'>
T.likely(rx_outer_outer - rx_outer_outer < 1)
<class 'tvm.tir.expr.Call'>
512
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 < 512
<class 'tvm.tir.expr.LT'>
T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 < 512)
<class 'tvm.tir.expr.Call'>
1536
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536
<class 'tvm.tir.expr.LT'>
T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536)
<class 'tvm.tir.expr.Call'>
1536
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536
<class 'tvm.tir.expr.LT'>
T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536)
<class 'tvm.tir.expr.Call'>
1536
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536
<class 'tvm.tir.expr.LT'>
T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536)
<class 'tvm.tir.expr.Call'>
512
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512
<class 'tvm.tir.expr.LT'>
T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512)
<class 'tvm.tir.expr.Call'>
(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3
<class 'tvm.tir.expr.FloorMod'>
kernel[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
kernel = T.Buffer((512, 512, 3, 3))
threadIdx_x = T.int32()
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
blockIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
blockIdx_x = T.int32()
if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
    kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
    kernel = T.Buffer((512, 512, 3, 3))
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
    blockIdx_x = T.int32()
    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
        kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
        kernel = T.Buffer((512, 512, 3, 3))
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
    if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
        blockIdx_x = T.int32()
        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
            kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
            kernel = T.Buffer((512, 512, 3, 3))
            rc_outer_outer = T.int32()
            rx_outer_outer = T.int32()
            kernel_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
    if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
        if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
            blockIdx_x = T.int32()
            if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
                kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
                kernel = T.Buffer((512, 512, 3, 3))
                rc_outer_outer = T.int32()
                rx_outer_outer = T.int32()
                kernel_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 < 512):
    if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
        if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
            if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                blockIdx_x = T.int32()
                if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
                    kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
                    kernel = T.Buffer((512, 512, 3, 3))
                    rc_outer_outer = T.int32()
                    rx_outer_outer = T.int32()
                    kernel_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
rx_outer_outer = T.int32()
if T.likely(rx_outer_outer - rx_outer_outer < 1):
    threadIdx_x = T.int32()
    ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 < 512):
        if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
            if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                    blockIdx_x = T.int32()
                    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
                        kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
                        kernel = T.Buffer((512, 512, 3, 3))
                        rc_outer_outer = T.int32()
                        kernel_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
rc_outer_outer = T.int32()
if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
    rx_outer_outer = T.int32()
    if T.likely(rx_outer_outer - rx_outer_outer < 1):
        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 < 512):
            if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                    if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                        blockIdx_x = T.int32()
                        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
                            kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
                            kernel = T.Buffer((512, 512, 3, 3))
                            kernel_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
blockIdx_x = T.int32()
if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 - blockIdx_x * 8 < 8):
    rc_outer_outer = T.int32()
    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
        rx_outer_outer = T.int32()
        if T.likely(rx_outer_outer - rx_outer_outer < 1):
            if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 < 512):
                if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                    if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                        if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                            if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
                                kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
                                kernel = T.Buffer((512, 512, 3, 3))
                                kernel_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
    blockIdx_x = T.int32()
    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 - blockIdx_x * 8 < 8):
        rc_outer_outer = T.int32()
        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
            rx_outer_outer = T.int32()
            if T.likely(rx_outer_outer - rx_outer_outer < 1):
                if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 < 512):
                    if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                        if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                            if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
                                    kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
                                    kernel = T.Buffer((512, 512, 3, 3))
                                    kernel_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
    threadIdx_x = T.launch_thread("threadIdx.x", 49)
    blockIdx_x = T.int32()
    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 - blockIdx_x * 8 < 8):
        rc_outer_outer = T.int32()
        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
            rx_outer_outer = T.int32()
            if T.likely(rx_outer_outer - rx_outer_outer < 1):
                if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 < 512):
                    if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                        if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                            if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
                                    kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
                                    kernel = T.Buffer((512, 512, 3, 3))
                                    kernel_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
<class 'tvm.tir.stmt.For'>
0
<class 'tvm.tir.expr.IntImm'>
8
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
3
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
8
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
ff_inner
<class 'tvm.tir.expr.Var'>
ff_outer_inner
<class 'tvm.tir.expr.Var'>
ff_outer_inner * 4
<class 'tvm.tir.expr.Mul'>
ff_inner + ff_outer_inner * 4
<class 'tvm.tir.expr.Add'>
ff_inner + ff_outer_inner * 4 + blockIdx_x * 8
<class 'tvm.tir.expr.Add'>
conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7]
<class 'tvm.tir.expr.BufferLoad'>
rc_inner
<class 'tvm.tir.expr.Var'>
rc_outer_inner
<class 'tvm.tir.expr.Var'>
rc_outer_outer * 8
<class 'tvm.tir.expr.Mul'>
rc_outer_inner + rc_outer_outer * 8
<class 'tvm.tir.expr.Add'>
(rc_outer_inner + rc_outer_outer * 8) * 8
<class 'tvm.tir.expr.Mul'>
rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8
<class 'tvm.tir.expr.Add'>
ry_outer_inner
<class 'tvm.tir.expr.Var'>
threadIdx_x // 7 + ry_outer_inner
<class 'tvm.tir.expr.Add'>
threadIdx_x % 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer] * kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] + pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer] * kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((1, 512, 7, 7))
ff_inner = T.int32()
ff_outer_inner = T.int32()
blockIdx_x = T.int32()
threadIdx_x = T.int32()
pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
rc_inner = T.int32()
rc_outer_inner = T.int32()
rc_outer_outer = T.int32()
ry_outer_inner = T.int32()
rx_outer_outer = T.int32()
kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] + pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer] * kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
for ff_inner in range(4):
    conv2d_nchw = T.Buffer((1, 512, 7, 7))
    ff_outer_inner = T.int32()
    blockIdx_x = T.int32()
    threadIdx_x = T.int32()
    pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
    rc_inner = T.int32()
    rc_outer_inner = T.int32()
    rc_outer_outer = T.int32()
    ry_outer_inner = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
    conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] + pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer] * kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
<class 'tvm.tir.stmt.For'>
for rc_inner, ff_inner in T.grid(8, 4):
    conv2d_nchw = T.Buffer((1, 512, 7, 7))
    ff_outer_inner = T.int32()
    blockIdx_x = T.int32()
    threadIdx_x = T.int32()
    pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
    rc_outer_inner = T.int32()
    rc_outer_outer = T.int32()
    ry_outer_inner = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
    conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] + pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer] * kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
<class 'tvm.tir.stmt.For'>
for ff_outer_inner, rc_inner, ff_inner in T.grid(2, 8, 4):
    conv2d_nchw = T.Buffer((1, 512, 7, 7))
    blockIdx_x = T.int32()
    threadIdx_x = T.int32()
    pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
    rc_outer_inner = T.int32()
    rc_outer_outer = T.int32()
    ry_outer_inner = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
    conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] + pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer] * kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
<class 'tvm.tir.stmt.For'>
for ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(3, 2, 8, 4):
    conv2d_nchw = T.Buffer((1, 512, 7, 7))
    blockIdx_x = T.int32()
    threadIdx_x = T.int32()
    pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
    rc_outer_inner = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
    conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] + pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer] * kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
<class 'tvm.tir.stmt.For'>
for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
    conv2d_nchw = T.Buffer((1, 512, 7, 7))
    blockIdx_x = T.int32()
    threadIdx_x = T.int32()
    pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
    conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] + pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer] * kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
<class 'tvm.tir.stmt.For'>
blockIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
    threadIdx_x = T.launch_thread("threadIdx.x", 49)
    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 - blockIdx_x * 8 < 8):
        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
            if T.likely(rx_outer_outer - rx_outer_outer < 1):
                if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 < 512):
                    if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                        if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                            if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
                                    kernel = T.Buffer((512, 512, 3, 3))
                                    kernel_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
    conv2d_nchw = T.Buffer((1, 512, 7, 7))
    threadIdx_x = T.int32()
    pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
    conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] + pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer] * kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
<class 'tvm.tir.stmt.SeqStmt'>
kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
blockIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
with T.realize(kernel_shared[blockIdx_x * 8:blockIdx_x * 8 + 8, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:3, rx_outer_outer:rx_outer_outer + 1]):
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
        threadIdx_x = T.launch_thread("threadIdx.x", 49)
        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 - blockIdx_x * 8 < 8):
            if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                if T.likely(rx_outer_outer - rx_outer_outer < 1):
                    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 < 512):
                        if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                            if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
                                        kernel = T.Buffer((512, 512, 3, 3))
                                        kernel_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
    for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
        conv2d_nchw = T.Buffer((1, 512, 7, 7))
        threadIdx_x = T.int32()
        pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
        conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] + pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer] * kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
<class 'tvm.tir.stmt.BufferRealize'>
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
    threadIdx_x = T.launch_thread("threadIdx.x", 49)
    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64 < 1):
        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
            if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - rx_outer_outer < 7):
                if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 < 64):
                    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 < 576):
                        if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                            if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                data = T.Buffer((1, 512, 7, 7))
                                pad_temp_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer] = T.if_then_else((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
blockIdx_x = T.int32()
T.realize(kernel_shared[blockIdx_x * 8:blockIdx_x * 8 + 8, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:3, rx_outer_outer:rx_outer_outer + 1])
for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
    threadIdx_x = T.launch_thread("threadIdx.x", 49)
    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 - blockIdx_x * 8 < 8):
        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
            if T.likely(rx_outer_outer - rx_outer_outer < 1):
                if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 < 512):
                    if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                        if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                            if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
                                    kernel = T.Buffer((512, 512, 3, 3))
                                    kernel_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
    conv2d_nchw = T.Buffer((1, 512, 7, 7))
    threadIdx_x = T.int32()
    conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] + pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer] * kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
<class 'tvm.tir.stmt.SeqStmt'>
pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
with T.realize(pad_temp_shared[0:1, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:9, rx_outer_outer:rx_outer_outer + 7]):
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
        threadIdx_x = T.launch_thread("threadIdx.x", 49)
        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64 < 1):
            if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - rx_outer_outer < 7):
                    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 < 64):
                        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 < 576):
                            if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                    data = T.Buffer((1, 512, 7, 7))
                                    pad_temp_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer] = T.if_then_else((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
    kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
    blockIdx_x = T.int32()
    T.realize(kernel_shared[blockIdx_x * 8:blockIdx_x * 8 + 8, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:3, rx_outer_outer:rx_outer_outer + 1])
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
        threadIdx_x = T.launch_thread("threadIdx.x", 49)
        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 - blockIdx_x * 8 < 8):
            if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                if T.likely(rx_outer_outer - rx_outer_outer < 1):
                    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 < 512):
                        if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                            if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
                                        kernel = T.Buffer((512, 512, 3, 3))
                                        kernel_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
    for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
        conv2d_nchw = T.Buffer((1, 512, 7, 7))
        threadIdx_x = T.int32()
        conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] + pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer] * kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
<class 'tvm.tir.stmt.BufferRealize'>
for rx_outer_outer in range(3):
    pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
    rc_outer_outer = T.int32()
    T.realize(pad_temp_shared[0:1, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:9, rx_outer_outer:rx_outer_outer + 7])
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
        threadIdx_x = T.launch_thread("threadIdx.x", 49)
        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64 < 1):
            if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - rx_outer_outer < 7):
                    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 < 64):
                        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 < 576):
                            if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                    data = T.Buffer((1, 512, 7, 7))
                                    pad_temp_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer] = T.if_then_else((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
    kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
    blockIdx_x = T.int32()
    T.realize(kernel_shared[blockIdx_x * 8:blockIdx_x * 8 + 8, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:3, rx_outer_outer:rx_outer_outer + 1])
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
        threadIdx_x = T.launch_thread("threadIdx.x", 49)
        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 - blockIdx_x * 8 < 8):
            if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                if T.likely(rx_outer_outer - rx_outer_outer < 1):
                    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 < 512):
                        if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                            if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
                                        kernel = T.Buffer((512, 512, 3, 3))
                                        kernel_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
    for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
        conv2d_nchw = T.Buffer((1, 512, 7, 7))
        threadIdx_x = T.int32()
        conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] + pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer] * kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
<class 'tvm.tir.stmt.For'>
for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
    pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
    T.realize(pad_temp_shared[0:1, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:9, rx_outer_outer:rx_outer_outer + 7])
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
        threadIdx_x = T.launch_thread("threadIdx.x", 49)
        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64 < 1):
            if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - rx_outer_outer < 7):
                    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 < 64):
                        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 < 576):
                            if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                    data = T.Buffer((1, 512, 7, 7))
                                    pad_temp_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer] = T.if_then_else((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
    kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
    blockIdx_x = T.int32()
    T.realize(kernel_shared[blockIdx_x * 8:blockIdx_x * 8 + 8, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:3, rx_outer_outer:rx_outer_outer + 1])
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
        threadIdx_x = T.launch_thread("threadIdx.x", 49)
        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 - blockIdx_x * 8 < 8):
            if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                if T.likely(rx_outer_outer - rx_outer_outer < 1):
                    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 < 512):
                        if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                            if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
                                        kernel = T.Buffer((512, 512, 3, 3))
                                        kernel_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
    for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
        conv2d_nchw = T.Buffer((1, 512, 7, 7))
        threadIdx_x = T.int32()
        conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] + pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer] * kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
<class 'tvm.tir.stmt.For'>
conv2d_nchw = T.Buffer((1, 512, 7, 7))
blockIdx_x = T.int32()
for ff_outer_inner_init, ff_inner_init in T.grid(2, 4):
    threadIdx_x = T.int32()
    conv2d_nchw[0, ff_inner_init + ff_outer_inner_init * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = T.float32(0.0)
threadIdx_x = T.int32()
for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
    pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
    T.realize(pad_temp_shared[0:1, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:9, rx_outer_outer:rx_outer_outer + 7])
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
        threadIdx_x = T.launch_thread("threadIdx.x", 49)
        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64 < 1):
            if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - rx_outer_outer < 7):
                    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 < 64):
                        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 < 576):
                            if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                    data = T.Buffer((1, 512, 7, 7))
                                    pad_temp_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer] = T.if_then_else((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
    kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
    T.realize(kernel_shared[blockIdx_x * 8:blockIdx_x * 8 + 8, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:3, rx_outer_outer:rx_outer_outer + 1])
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
        threadIdx_x = T.launch_thread("threadIdx.x", 49)
        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 - blockIdx_x * 8 < 8):
            if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                if T.likely(rx_outer_outer - rx_outer_outer < 1):
                    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 < 512):
                        if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                            if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
                                        kernel = T.Buffer((512, 512, 3, 3))
                                        kernel_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
    for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
        conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] + pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer] * kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
<class 'tvm.tir.stmt.SeqStmt'>
nn_outer_outer_outer_outer = T.int32()
with T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_unroll_explicit", 1):
    conv2d_nchw = T.Buffer((1, 512, 7, 7))
    blockIdx_x = T.int32()
    for ff_outer_inner_init, ff_inner_init in T.grid(2, 4):
        threadIdx_x = T.int32()
        conv2d_nchw[0, ff_inner_init + ff_outer_inner_init * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = T.float32(0.0)
    threadIdx_x = T.int32()
    for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
        pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
        T.realize(pad_temp_shared[0:1, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:9, rx_outer_outer:rx_outer_outer + 7])
        for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
            threadIdx_x = T.launch_thread("threadIdx.x", 49)
            if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64 < 1):
                if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - rx_outer_outer < 7):
                        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 < 64):
                            if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 < 576):
                                if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                    if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                        data = T.Buffer((1, 512, 7, 7))
                                        pad_temp_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer] = T.if_then_else((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
        kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
        T.realize(kernel_shared[blockIdx_x * 8:blockIdx_x * 8 + 8, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:3, rx_outer_outer:rx_outer_outer + 1])
        for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
            threadIdx_x = T.launch_thread("threadIdx.x", 49)
            if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 - blockIdx_x * 8 < 8):
                if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                    if T.likely(rx_outer_outer - rx_outer_outer < 1):
                        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 < 512):
                            if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                    if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
                                            kernel = T.Buffer((512, 512, 3, 3))
                                            kernel_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
        for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
            conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] + pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer] * kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
nn_outer_outer_outer_outer = T.int32()
with T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_auto_unroll_max_step", 1024):
    T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_unroll_explicit", 1)
    conv2d_nchw = T.Buffer((1, 512, 7, 7))
    blockIdx_x = T.int32()
    for ff_outer_inner_init, ff_inner_init in T.grid(2, 4):
        threadIdx_x = T.int32()
        conv2d_nchw[0, ff_inner_init + ff_outer_inner_init * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = T.float32(0.0)
    threadIdx_x = T.int32()
    for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
        pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
        T.realize(pad_temp_shared[0:1, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:9, rx_outer_outer:rx_outer_outer + 7])
        for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
            threadIdx_x = T.launch_thread("threadIdx.x", 49)
            if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64 < 1):
                if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                    if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - rx_outer_outer < 7):
                        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 < 64):
                            if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 < 576):
                                if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                    if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                        data = T.Buffer((1, 512, 7, 7))
                                        pad_temp_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer] = T.if_then_else((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
        kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
        T.realize(kernel_shared[blockIdx_x * 8:blockIdx_x * 8 + 8, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:3, rx_outer_outer:rx_outer_outer + 1])
        for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
            threadIdx_x = T.launch_thread("threadIdx.x", 49)
            if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 - blockIdx_x * 8 < 8):
                if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                    if T.likely(rx_outer_outer - rx_outer_outer < 1):
                        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 < 512):
                            if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                    if T.likely(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                        if T.likely((threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
                                            kernel = T.Buffer((512, 512, 3, 3))
                                            kernel_shared[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
        for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
            conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] + pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer] * kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
0
<class 'tvm.tir.expr.IntImm'>
8
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 // 7
<class 'tvm.tir.expr.FloorDiv'>
vthread
<class 'tvm.tir.expr.Var'>
64
<class 'tvm.tir.expr.IntImm'>
blockIdx_x // 64
<class 'tvm.tir.expr.FloorDiv'>
vthread + blockIdx_x // 64
<class 'tvm.tir.expr.Add'>
threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64)
<class 'tvm.tir.expr.Add'>
i1_inner
<class 'tvm.tir.expr.Var'>
blockIdx_x % 64
<class 'tvm.tir.expr.FloorMod'>
blockIdx_x % 64 * 8
<class 'tvm.tir.expr.Mul'>
i1_inner + blockIdx_x % 64 * 8
<class 'tvm.tir.expr.Add'>
threadIdx_x // 7 % 7
<class 'tvm.tir.expr.FloorMod'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
conv2d_nchw[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, threadIdx_x // 7 % 7, threadIdx_x % 7]
<class 'tvm.tir.expr.BufferLoad'>
0
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
bias[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, 0, 0]
<class 'tvm.tir.expr.BufferLoad'>
conv2d_nchw[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, threadIdx_x // 7 % 7, threadIdx_x % 7] + bias[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, 0, 0]
<class 'tvm.tir.expr.Add'>
T.float32(0.0)
<class 'tvm.tir.expr.FloatImm'>
T.max(conv2d_nchw[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, threadIdx_x // 7 % 7, threadIdx_x % 7] + bias[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, 0, 0], T.float32(0.0))
<class 'tvm.tir.expr.Max'>
compute = T.Buffer((1, 512, 7, 7))
conv2d_nchw = T.Buffer((1, 512, 7, 7))
threadIdx_x = T.int32()
vthread = T.int32()
blockIdx_x = T.int32()
i1_inner = T.int32()
bias = T.Buffer((1, 512, 1, 1))
compute[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, threadIdx_x // 7 % 7, threadIdx_x % 7] = T.max(conv2d_nchw[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, threadIdx_x // 7 % 7, threadIdx_x % 7] + bias[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, 0, 0], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
for i1_inner in range(8):
    compute = T.Buffer((1, 512, 7, 7))
    conv2d_nchw = T.Buffer((1, 512, 7, 7))
    threadIdx_x = T.int32()
    vthread = T.int32()
    blockIdx_x = T.int32()
    bias = T.Buffer((1, 512, 1, 1))
    compute[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, threadIdx_x // 7 % 7, threadIdx_x % 7] = T.max(conv2d_nchw[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, threadIdx_x // 7 % 7, threadIdx_x % 7] + bias[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, 0, 0], T.float32(0.0))
<class 'tvm.tir.stmt.For'>
nn_outer_outer_outer_outer = T.int32()
conv2d_nchw = T.Buffer((1, 512, 7, 7))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
with T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_auto_unroll_max_step", 1024):
    T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_unroll_explicit", 1)
    for ff_outer_inner_init, ff_inner_init in T.grid(2, 4):
        conv2d_nchw[0, ff_inner_init + ff_outer_inner_init * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = T.float32(0.0)
    for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
        pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
        T.realize(pad_temp_shared[0:1, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:9, rx_outer_outer:rx_outer_outer + 7])
        for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 49)
            if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64 < 1):
                if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                    if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - rx_outer_outer < 7):
                        if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 < 64):
                            if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 < 576):
                                if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                    if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                        data = T.Buffer((1, 512, 7, 7))
                                        pad_temp_shared[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer] = T.if_then_else((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
        kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
        T.realize(kernel_shared[blockIdx_x * 8:blockIdx_x * 8 + 8, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:3, rx_outer_outer:rx_outer_outer + 1])
        for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 49)
            if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 - blockIdx_x * 8 < 8):
                if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                    if T.likely(rx_outer_outer - rx_outer_outer < 1):
                        if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 < 512):
                            if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                    if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                        if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
                                            kernel = T.Buffer((512, 512, 3, 3))
                                            kernel_shared[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
        for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
            conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] + pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer] * kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
for i1_inner in range(8):
    compute = T.Buffer((1, 512, 7, 7))
    vthread = T.int32()
    bias = T.Buffer((1, 512, 1, 1))
    compute[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, threadIdx_x // 7 % 7, threadIdx_x % 7] = T.max(conv2d_nchw[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, threadIdx_x // 7 % 7, threadIdx_x % 7] + bias[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, 0, 0], T.float32(0.0))
<class 'tvm.tir.stmt.SeqStmt'>
conv2d_nchw = T.Buffer((1, 512, 7, 7))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
with T.realize(conv2d_nchw[0:1, blockIdx_x * 8:blockIdx_x * 8 + 8, threadIdx_x // 7:threadIdx_x // 7 + 1, threadIdx_x % 7:threadIdx_x % 7 + 1]):
    nn_outer_outer_outer_outer = T.int32()
    with T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_auto_unroll_max_step", 1024):
        T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_unroll_explicit", 1)
        for ff_outer_inner_init, ff_inner_init in T.grid(2, 4):
            conv2d_nchw[0, ff_inner_init + ff_outer_inner_init * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = T.float32(0.0)
        for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
            pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
            T.realize(pad_temp_shared[0:1, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:9, rx_outer_outer:rx_outer_outer + 7])
            for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
                threadIdx_x_1 = T.launch_thread("threadIdx.x", 49)
                if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64 < 1):
                    if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                        if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - rx_outer_outer < 7):
                            if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 < 64):
                                if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 < 576):
                                    if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                        if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                            data = T.Buffer((1, 512, 7, 7))
                                            pad_temp_shared[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer] = T.if_then_else((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
            kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
            T.realize(kernel_shared[blockIdx_x * 8:blockIdx_x * 8 + 8, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:3, rx_outer_outer:rx_outer_outer + 1])
            for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
                threadIdx_x_1 = T.launch_thread("threadIdx.x", 49)
                if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 - blockIdx_x * 8 < 8):
                    if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                        if T.likely(rx_outer_outer - rx_outer_outer < 1):
                            if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 < 512):
                                if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                    if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                        if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                            if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
                                                kernel = T.Buffer((512, 512, 3, 3))
                                                kernel_shared[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
            for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
                conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] + pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer] * kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
    for i1_inner in range(8):
        compute = T.Buffer((1, 512, 7, 7))
        vthread = T.int32()
        bias = T.Buffer((1, 512, 1, 1))
        compute[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, threadIdx_x // 7 % 7, threadIdx_x % 7] = T.max(conv2d_nchw[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, threadIdx_x // 7 % 7, threadIdx_x % 7] + bias[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, 0, 0], T.float32(0.0))
<class 'tvm.tir.stmt.BufferRealize'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    conv2d_nchw = T.Buffer((1, 512, 7, 7))
    blockIdx_x = T.int32()
    T.realize(conv2d_nchw[0:1, blockIdx_x * 8:blockIdx_x * 8 + 8, threadIdx_x // 7:threadIdx_x // 7 + 1, threadIdx_x % 7:threadIdx_x % 7 + 1])
    nn_outer_outer_outer_outer = T.int32()
    with T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_auto_unroll_max_step", 1024):
        T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_unroll_explicit", 1)
        for ff_outer_inner_init, ff_inner_init in T.grid(2, 4):
            conv2d_nchw[0, ff_inner_init + ff_outer_inner_init * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = T.float32(0.0)
        for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
            pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
            T.realize(pad_temp_shared[0:1, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:9, rx_outer_outer:rx_outer_outer + 7])
            for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
                threadIdx_x_1 = T.launch_thread("threadIdx.x", 49)
                if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64 < 1):
                    if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                        if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - rx_outer_outer < 7):
                            if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 < 64):
                                if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 < 576):
                                    if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                        if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                            data = T.Buffer((1, 512, 7, 7))
                                            pad_temp_shared[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer] = T.if_then_else((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
            kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
            T.realize(kernel_shared[blockIdx_x * 8:blockIdx_x * 8 + 8, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:3, rx_outer_outer:rx_outer_outer + 1])
            for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
                threadIdx_x_1 = T.launch_thread("threadIdx.x", 49)
                if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 - blockIdx_x * 8 < 8):
                    if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                        if T.likely(rx_outer_outer - rx_outer_outer < 1):
                            if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 < 512):
                                if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                    if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                        if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                            if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
                                                kernel = T.Buffer((512, 512, 3, 3))
                                                kernel_shared[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
            for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
                conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] + pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer] * kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
    for i1_inner in range(8):
        compute = T.Buffer((1, 512, 7, 7))
        vthread = T.int32()
        bias = T.Buffer((1, 512, 1, 1))
        compute[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, threadIdx_x // 7 % 7, threadIdx_x % 7] = T.max(conv2d_nchw[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, threadIdx_x // 7 % 7, threadIdx_x % 7] + bias[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, 0, 0], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
with T.launch_thread("vthread", 1) as vthread:
    threadIdx_x = T.launch_thread("threadIdx.x", 49)
    conv2d_nchw = T.Buffer((1, 512, 7, 7))
    blockIdx_x = T.int32()
    T.realize(conv2d_nchw[0:1, blockIdx_x * 8:blockIdx_x * 8 + 8, threadIdx_x // 7:threadIdx_x // 7 + 1, threadIdx_x % 7:threadIdx_x % 7 + 1])
    nn_outer_outer_outer_outer = T.int32()
    with T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_auto_unroll_max_step", 1024):
        T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_unroll_explicit", 1)
        for ff_outer_inner_init, ff_inner_init in T.grid(2, 4):
            conv2d_nchw[0, ff_inner_init + ff_outer_inner_init * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = T.float32(0.0)
        for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
            pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
            T.realize(pad_temp_shared[0:1, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:9, rx_outer_outer:rx_outer_outer + 7])
            for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
                threadIdx_x_1 = T.launch_thread("threadIdx.x", 49)
                if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64 < 1):
                    if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                        if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - rx_outer_outer < 7):
                            if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 < 64):
                                if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 < 576):
                                    if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                        if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                            data = T.Buffer((1, 512, 7, 7))
                                            pad_temp_shared[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer] = T.if_then_else((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
            kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
            T.realize(kernel_shared[blockIdx_x * 8:blockIdx_x * 8 + 8, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:3, rx_outer_outer:rx_outer_outer + 1])
            for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
                threadIdx_x_1 = T.launch_thread("threadIdx.x", 49)
                if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 - blockIdx_x * 8 < 8):
                    if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                        if T.likely(rx_outer_outer - rx_outer_outer < 1):
                            if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 < 512):
                                if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                    if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                        if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                            if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
                                                kernel = T.Buffer((512, 512, 3, 3))
                                                kernel_shared[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
            for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
                conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] + pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer] * kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
    for i1_inner in range(8):
        compute = T.Buffer((1, 512, 7, 7))
        bias = T.Buffer((1, 512, 1, 1))
        compute[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, threadIdx_x // 7 % 7, threadIdx_x % 7] = T.max(conv2d_nchw[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, threadIdx_x // 7 % 7, threadIdx_x % 7] + bias[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, 0, 0], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
with T.launch_thread("blockIdx.x", 64) as blockIdx_x:
    vthread = T.launch_thread("vthread", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 49)
    conv2d_nchw = T.Buffer((1, 512, 7, 7))
    T.realize(conv2d_nchw[0:1, blockIdx_x * 8:blockIdx_x * 8 + 8, threadIdx_x // 7:threadIdx_x // 7 + 1, threadIdx_x % 7:threadIdx_x % 7 + 1])
    nn_outer_outer_outer_outer = T.int32()
    with T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_auto_unroll_max_step", 1024):
        T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_unroll_explicit", 1)
        for ff_outer_inner_init, ff_inner_init in T.grid(2, 4):
            conv2d_nchw[0, ff_inner_init + ff_outer_inner_init * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = T.float32(0.0)
        for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
            pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
            T.realize(pad_temp_shared[0:1, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:9, rx_outer_outer:rx_outer_outer + 7])
            for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
                threadIdx_x_1 = T.launch_thread("threadIdx.x", 49)
                if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64 < 1):
                    if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                        if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - rx_outer_outer < 7):
                            if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 < 64):
                                if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 < 576):
                                    if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                        if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                            data = T.Buffer((1, 512, 7, 7))
                                            pad_temp_shared[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer] = T.if_then_else((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
            kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
            T.realize(kernel_shared[blockIdx_x * 8:blockIdx_x * 8 + 8, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:3, rx_outer_outer:rx_outer_outer + 1])
            for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
                threadIdx_x_1 = T.launch_thread("threadIdx.x", 49)
                if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 - blockIdx_x * 8 < 8):
                    if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                        if T.likely(rx_outer_outer - rx_outer_outer < 1):
                            if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 < 512):
                                if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                    if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                        if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                            if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
                                                kernel = T.Buffer((512, 512, 3, 3))
                                                kernel_shared[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
            for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
                conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] + pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer] * kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
    for i1_inner in range(8):
        compute = T.Buffer((1, 512, 7, 7))
        bias = T.Buffer((1, 512, 1, 1))
        compute[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, threadIdx_x // 7 % 7, threadIdx_x % 7] = T.max(conv2d_nchw[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, threadIdx_x // 7 % 7, threadIdx_x % 7] + bias[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, 0, 0], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
compute = T.Buffer((1, 512, 7, 7))
with T.realize(compute[0:1, 0:512, 0:7, 0:7]):
    blockIdx_x = T.launch_thread("blockIdx.x", 64)
    vthread = T.launch_thread("vthread", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 49)
    conv2d_nchw = T.Buffer((1, 512, 7, 7))
    T.realize(conv2d_nchw[0:1, blockIdx_x * 8:blockIdx_x * 8 + 8, threadIdx_x // 7:threadIdx_x // 7 + 1, threadIdx_x % 7:threadIdx_x % 7 + 1])
    nn_outer_outer_outer_outer = T.int32()
    with T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_auto_unroll_max_step", 1024):
        T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_unroll_explicit", 1)
        for ff_outer_inner_init, ff_inner_init in T.grid(2, 4):
            conv2d_nchw[0, ff_inner_init + ff_outer_inner_init * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = T.float32(0.0)
        for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
            pad_temp_shared = T.Buffer((1, 512, 9, 9), scope="shared")
            T.realize(pad_temp_shared[0:1, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:9, rx_outer_outer:rx_outer_outer + 7])
            for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
                threadIdx_x_1 = T.launch_thread("threadIdx.x", 49)
                if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64 < 1):
                    if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                        if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - rx_outer_outer < 7):
                            if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 < 64):
                                if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 < 576):
                                    if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                        if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 4032):
                                            data = T.Buffer((1, 512, 7, 7))
                                            pad_temp_shared[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer] = T.if_then_else((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 >= 1 and (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 < 8 and (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer >= 1 and (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer < 8, data[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 // 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 // 9 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 7 % 9 - 1, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 7 + rx_outer_outer - 1], T.float32(0.0))
            kernel_shared = T.Buffer((512, 512, 3, 3), scope="shared")
            T.realize(kernel_shared[blockIdx_x * 8:blockIdx_x * 8 + 8, rc_outer_outer * 64:rc_outer_outer * 64 + 64, 0:3, rx_outer_outer:rx_outer_outer + 1])
            for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
                threadIdx_x_1 = T.launch_thread("threadIdx.x", 49)
                if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 - blockIdx_x * 8 < 8):
                    if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64 - rc_outer_outer * 64 < 64):
                        if T.likely(rx_outer_outer - rx_outer_outer < 1):
                            if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 < 512):
                                if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                    if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                        if T.likely(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 < 1536):
                                            if T.likely((threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8 < 512):
                                                kernel = T.Buffer((512, 512, 3, 3))
                                                kernel_shared[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer] = kernel[(threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 // 64 + blockIdx_x * 8, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) // 3 % 64 + rc_outer_outer * 64, (threadIdx_x_1 + ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49) % 3, rx_outer_outer]
            for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
                conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] = conv2d_nchw[0, ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, threadIdx_x // 7, threadIdx_x % 7] + pad_temp_shared[0, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, threadIdx_x // 7 + ry_outer_inner, threadIdx_x % 7 + rx_outer_outer] * kernel_shared[ff_inner + ff_outer_inner * 4 + blockIdx_x * 8, rc_inner + (rc_outer_inner + rc_outer_outer * 8) * 8, ry_outer_inner, rx_outer_outer]
    for i1_inner in range(8):
        bias = T.Buffer((1, 512, 1, 1))
        compute[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, threadIdx_x // 7 % 7, threadIdx_x % 7] = T.max(conv2d_nchw[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, threadIdx_x // 7 % 7, threadIdx_x % 7] + bias[threadIdx_x // 7 // 7 + (vthread + blockIdx_x // 64), i1_inner + blockIdx_x % 64 * 8, 0, 0], T.float32(0.0))
<class 'tvm.tir.stmt.BufferRealize'>
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((1, 512, 7, 7), "float32"), kernel: T.Buffer((512, 512, 3, 3), "float32"), bias: T.Buffer((1, 512, 1, 1), "float32"), compute: T.Buffer((1, 512, 7, 7), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        blockIdx_x = T.launch_thread("blockIdx.x", 64)
        conv2d_nchw = T.allocate([8], "float32", "local")
        pad_temp_shared = T.allocate([4032], "float32", "shared")
        kernel_shared = T.allocate([1536], "float32", "shared")
        threadIdx_x = T.launch_thread("threadIdx.x", 49)
        conv2d_nchw_1 = T.Buffer((8,), data=conv2d_nchw, scope="local", align=32)
        conv2d_nchw_1[0] = T.float32(0.0)
        conv2d_nchw_1[1] = T.float32(0.0)
        conv2d_nchw_1[2] = T.float32(0.0)
        conv2d_nchw_1[3] = T.float32(0.0)
        conv2d_nchw_1[4] = T.float32(0.0)
        conv2d_nchw_1[5] = T.float32(0.0)
        conv2d_nchw_1[6] = T.float32(0.0)
        conv2d_nchw_1[7] = T.float32(0.0)
        for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
            cse_var_2: T.int32 = rc_outer_outer * 3136
            cse_var_1: T.int32 = rc_outer_outer * 576
            threadIdx_x_1 = T.env_thread("threadIdx.x")
            pad_temp_shared_1 = T.Buffer((4032,), data=pad_temp_shared, scope="shared")
            data_1 = T.Buffer((25088,), data=data.data)
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 49] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 49) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 98] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 98) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 147] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 147) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 196] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 196) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 245] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 245) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 294] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 294) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 343] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 343) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 392] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 392) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 441] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 335], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 490] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 490) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 539] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 539) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 588] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 588) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 637] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 637) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 686] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 686) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 735] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 735) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 784] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 784) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 833] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 833) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 882] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 678], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 931] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 931) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 980] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 980) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1029] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1029) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1078] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1078) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1127] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1127) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1176] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1176) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1225] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1225) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1274] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1274) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1323] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 1021], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1372] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1372) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1421] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1421) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1470] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1470) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1519] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1519) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1568] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1568) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1617] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1617) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1666] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1666) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1715] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1715) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1764] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 1364], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1813] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1813) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1862] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1862) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1911] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1911) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1960] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1960) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2009] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2009) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2058] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2058) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2107] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2107) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2156] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2156) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2205] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 1707], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2254] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2254) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2303] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2303) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2352] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2352) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2401] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2401) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2450] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2450) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2499] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2499) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2548] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2548) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2597] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2597) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2646] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 2050], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2695] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2695) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2744] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2744) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2793] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2793) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2842] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2842) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2891] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2891) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2940] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2940) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2989] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2989) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3038] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3038) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3087] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 2393], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3136] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3136) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3185] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3185) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3234] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3234) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3283] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3283) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3332] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3332) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3381] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3381) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3430] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3430) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3479] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3479) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3528] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 2736], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3577] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3577) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3626] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3626) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3675] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3675) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3724] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3724) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3773] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3773) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3822] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3822) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3871] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3871) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3920] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3920) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3969] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 3079], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                if threadIdx_x_1 < 14:
                    pad_temp_shared_1[threadIdx_x_1 + 4018] = T.if_then_else(threadIdx_x_1 < 7 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 4018) // 63 * 49 + rx_outer_outer + threadIdx_x_1 + 41], T.float32(0.0))
            threadIdx_x_2 = T.env_thread("threadIdx.x")
            kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
            kernel_1 = T.Buffer((2359296,), data=kernel.data)
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2] = kernel_1[blockIdx_x * 36864 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 49] = kernel_1[blockIdx_x * 36864 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 147]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 98] = kernel_1[blockIdx_x * 36864 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 294]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 147] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 147) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 147) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 196] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 196) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 12]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 245] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 245) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 159]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 294] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 294) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 306]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 343] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 343) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 151) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 392] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 392) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 24]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 441] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 441) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 171]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 490] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 490) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 318]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 539] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 539) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 155) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 588] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 588) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 36]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 637] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 637) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 183]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 686] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 686) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 330]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 735] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 735) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 159) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 784] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 784) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 48]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 833] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 833) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 195]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 882] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 882) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 342]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 931] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 931) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 163) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 980] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 980) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 60]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1029] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1029) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 207]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1078] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1078) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 354]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1127] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1127) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 167) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1176] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1176) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 72]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1225] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1225) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 219]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1274] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1274) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 366]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1323] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1323) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 171) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1372] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1372) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 84]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1421] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1421) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 231]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1470] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1470) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 378]
            with T.launch_thread(threadIdx_x_2, 49):
                if threadIdx_x_2 < 17:
                    kernel_shared_1[threadIdx_x_2 + 1519] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1519) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 525]
            for rc_outer_inner in range(8):
                cse_var_3: T.int32 = rc_outer_inner * 24
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 192]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 384]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 576]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 3]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 195]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 387]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 579]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 6]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 198]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 390]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 582]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 9]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 201]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 393]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 585]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 12]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 204]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 396]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 588]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 15]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 207]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 399]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 591]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 18]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 210]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 402]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 594]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 21]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 213]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 405]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 597]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 768]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 960]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 1152]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 1344]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 771]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 963]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 1155]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 1347]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 774]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 966]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 1158]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 1350]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 777]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 969]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 1161]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 1353]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 780]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 972]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 1164]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 1356]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 783]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 975]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 1167]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 1359]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 786]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 978]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 1170]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 1362]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 789]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 981]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 1173]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 1365]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 1]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 193]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 385]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 577]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 4]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 196]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 388]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 580]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 7]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 199]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 391]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 583]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 10]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 202]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 394]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 586]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 13]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 205]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 397]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 589]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 16]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 208]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 400]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 592]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 19]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 211]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 403]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 595]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 22]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 214]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 406]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 598]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 769]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 961]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 1153]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 1345]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 772]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 964]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 1156]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 1348]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 775]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 967]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 1159]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 1351]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 778]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 970]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 1162]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 1354]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 781]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 973]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 1165]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 1357]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 784]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 976]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 1168]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 1360]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 787]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 979]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 1171]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 1363]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 790]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 982]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 1174]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 1366]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 2]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 194]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 386]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 578]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 5]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 197]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 389]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 581]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 8]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 200]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 392]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 584]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 11]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 203]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 395]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 587]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 14]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 206]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 398]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 590]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 17]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 209]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 401]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 593]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 20]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 212]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 404]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 596]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 23]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 215]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 407]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 599]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 770]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 962]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 1154]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 1346]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 773]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 965]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 1157]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 1349]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 776]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 968]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 1160]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 1352]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 779]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 971]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 1163]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 1355]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 782]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 974]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 1166]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 1358]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 785]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 977]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 1169]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 1361]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 788]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 980]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 1172]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 1364]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 791]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 983]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 1175]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 1367]
        for i1_inner in range(8):
            compute_1 = T.Buffer((25088,), data=compute.data)
            bias_1 = T.Buffer((512,), data=bias.data)
            compute_1[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw_1[i1_inner] + bias_1[blockIdx_x * 8 + i1_inner], T.float32(0.0))
Phase 1
--------------------
64
<class 'tvm.tir.expr.IntImm'>
1
<class 'tvm.tir.expr.IntImm'>
49
<class 'tvm.tir.expr.IntImm'>
8
<class 'tvm.tir.expr.IntImm'>
1024
<class 'tvm.tir.expr.IntImm'>
1
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
2
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
4
<class 'tvm.tir.expr.IntImm'>
T.float32(0.0)
<class 'tvm.tir.expr.FloatImm'>
ff_outer_inner_init
<class 'tvm.tir.expr.Var'>
4
<class 'tvm.tir.expr.IntImm'>
ff_outer_inner_init * 4
<class 'tvm.tir.expr.Mul'>
ff_inner_init
<class 'tvm.tir.expr.Var'>
ff_outer_inner_init * 4 + ff_inner_init
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
ff_outer_inner_init = T.int32()
ff_inner_init = T.int32()
conv2d_nchw[ff_outer_inner_init * 4 + ff_inner_init] = T.float32(0.0)
<class 'tvm.tir.stmt.BufferStore'>
for ff_inner_init in range(4):
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    ff_outer_inner_init = T.int32()
    conv2d_nchw[ff_outer_inner_init * 4 + ff_inner_init] = T.float32(0.0)
<class 'tvm.tir.stmt.For'>
for ff_outer_inner_init, ff_inner_init in T.grid(2, 4):
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    conv2d_nchw[ff_outer_inner_init * 4 + ff_inner_init] = T.float32(0.0)
<class 'tvm.tir.stmt.For'>
0
<class 'tvm.tir.expr.IntImm'>
8
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
3
<class 'tvm.tir.expr.IntImm'>
4032
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
83
<class 'tvm.tir.expr.IntImm'>
49
<class 'tvm.tir.expr.IntImm'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer
<class 'tvm.tir.expr.Var'>
7
<class 'tvm.tir.expr.IntImm'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7
<class 'tvm.tir.expr.Mul'>
threadIdx_x
<class 'tvm.tir.expr.Var'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7 < 576)
<class 'tvm.tir.expr.Call'>
49
<class 'tvm.tir.expr.IntImm'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49
<class 'tvm.tir.expr.Mul'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
4032
<class 'tvm.tir.expr.IntImm'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 4032)
<class 'tvm.tir.expr.Call'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7
<class 'tvm.tir.expr.Mul'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7
<class 'tvm.tir.expr.Mul'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 and (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer
<class 'tvm.tir.expr.Var'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 and (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 and (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
rc_outer_outer
<class 'tvm.tir.expr.Var'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
7
<class 'tvm.tir.expr.IntImm'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7
<class 'tvm.tir.expr.Mul'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7
<class 'tvm.tir.expr.Mul'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) // 9 * 49 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) // 9 * 49 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) // 9 * 49 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) // 9 * 49 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) // 9 * 49 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.float32(0.0)
<class 'tvm.tir.expr.FloatImm'>
T.if_then_else(1 <= (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 and (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) // 9 * 49 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
49
<class 'tvm.tir.expr.IntImm'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49
<class 'tvm.tir.expr.Mul'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = T.if_then_else(1 <= (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 and (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) // 9 * 49 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
threadIdx_x = T.int32()
if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 4032):
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = T.if_then_else(1 <= (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 and (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) // 9 * 49 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
threadIdx_x = T.int32()
if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7 < 576):
    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 4032):
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = T.if_then_else(1 <= (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 and (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) // 9 * 49 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7 < 576):
        if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 4032):
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = T.if_then_else(1 <= (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 and (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) // 9 * 49 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
    threadIdx_x = T.launch_thread("threadIdx.x", 49)
    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7 < 576):
        if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 4032):
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = T.if_then_else(1 <= (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 and (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) // 9 * 49 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.For'>
1536
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
32
<class 'tvm.tir.expr.IntImm'>
49
<class 'tvm.tir.expr.IntImm'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer
<class 'tvm.tir.expr.Var'>
49
<class 'tvm.tir.expr.IntImm'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49
<class 'tvm.tir.expr.Mul'>
threadIdx_x
<class 'tvm.tir.expr.Var'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
1536
<class 'tvm.tir.expr.IntImm'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 1536)
<class 'tvm.tir.expr.Call'>
blockIdx_x
<class 'tvm.tir.expr.Var'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
49
<class 'tvm.tir.expr.IntImm'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49
<class 'tvm.tir.expr.Mul'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
49
<class 'tvm.tir.expr.IntImm'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49
<class 'tvm.tir.expr.Mul'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
3
<class 'tvm.tir.expr.IntImm'>
(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
49
<class 'tvm.tir.expr.IntImm'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49
<class 'tvm.tir.expr.Mul'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = kernel[blockIdx_x * 36864 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
threadIdx_x = T.int32()
if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 1536):
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = kernel[blockIdx_x * 36864 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = T.int32()
    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 1536):
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = kernel[blockIdx_x * 36864 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
    threadIdx_x = T.launch_thread("threadIdx.x", 49)
    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 1536):
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = kernel[blockIdx_x * 36864 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.For'>
0
<class 'tvm.tir.expr.IntImm'>
8
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
3
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
8
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
ff_outer_inner
<class 'tvm.tir.expr.Var'>
4
<class 'tvm.tir.expr.IntImm'>
ff_outer_inner * 4
<class 'tvm.tir.expr.Mul'>
ff_inner
<class 'tvm.tir.expr.Var'>
ff_outer_inner * 4 + ff_inner
<class 'tvm.tir.expr.Add'>
conv2d_nchw[ff_outer_inner * 4 + ff_inner]
<class 'tvm.tir.expr.BufferLoad'>
rc_outer_inner
<class 'tvm.tir.expr.Var'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_inner
<class 'tvm.tir.expr.Var'>
63
<class 'tvm.tir.expr.IntImm'>
rc_inner * 63
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + rc_inner * 63
<class 'tvm.tir.expr.Add'>
ry_outer_inner
<class 'tvm.tir.expr.Var'>
7
<class 'tvm.tir.expr.IntImm'>
ry_outer_inner * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7
<class 'tvm.tir.expr.Add'>
threadIdx_x
<class 'tvm.tir.expr.Var'>
rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
768
<class 'tvm.tir.expr.IntImm'>
ff_outer_inner * 768
<class 'tvm.tir.expr.Mul'>
192
<class 'tvm.tir.expr.IntImm'>
ff_inner * 192
<class 'tvm.tir.expr.Mul'>
ff_outer_inner * 768 + ff_inner * 192
<class 'tvm.tir.expr.Add'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
rc_inner * 3
<class 'tvm.tir.expr.Mul'>
ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3
<class 'tvm.tir.expr.Add'>
ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner
<class 'tvm.tir.expr.Add'>
kernel_shared[ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x] * kernel_shared[ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[ff_outer_inner * 4 + ff_inner] + pad_temp_shared[rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x] * kernel_shared[ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
ff_outer_inner * 4
<class 'tvm.tir.expr.Mul'>
ff_outer_inner * 4 + ff_inner
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
ff_outer_inner = T.int32()
ff_inner = T.int32()
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
rc_inner = T.int32()
ry_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[ff_outer_inner * 4 + ff_inner] = conv2d_nchw[ff_outer_inner * 4 + ff_inner] + pad_temp_shared[rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x] * kernel_shared[ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner]
<class 'tvm.tir.stmt.BufferStore'>
for ff_inner in range(4):
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    ff_outer_inner = T.int32()
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rc_outer_inner = T.int32()
    rc_inner = T.int32()
    ry_outer_inner = T.int32()
    threadIdx_x = T.int32()
    kernel_shared = T.Buffer((1536,), scope="shared")
    conv2d_nchw[ff_outer_inner * 4 + ff_inner] = conv2d_nchw[ff_outer_inner * 4 + ff_inner] + pad_temp_shared[rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x] * kernel_shared[ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner]
<class 'tvm.tir.stmt.For'>
for rc_inner, ff_inner in T.grid(8, 4):
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    ff_outer_inner = T.int32()
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rc_outer_inner = T.int32()
    ry_outer_inner = T.int32()
    threadIdx_x = T.int32()
    kernel_shared = T.Buffer((1536,), scope="shared")
    conv2d_nchw[ff_outer_inner * 4 + ff_inner] = conv2d_nchw[ff_outer_inner * 4 + ff_inner] + pad_temp_shared[rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x] * kernel_shared[ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner]
<class 'tvm.tir.stmt.For'>
for ff_outer_inner, rc_inner, ff_inner in T.grid(2, 8, 4):
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rc_outer_inner = T.int32()
    ry_outer_inner = T.int32()
    threadIdx_x = T.int32()
    kernel_shared = T.Buffer((1536,), scope="shared")
    conv2d_nchw[ff_outer_inner * 4 + ff_inner] = conv2d_nchw[ff_outer_inner * 4 + ff_inner] + pad_temp_shared[rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x] * kernel_shared[ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner]
<class 'tvm.tir.stmt.For'>
for ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(3, 2, 8, 4):
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rc_outer_inner = T.int32()
    threadIdx_x = T.int32()
    kernel_shared = T.Buffer((1536,), scope="shared")
    conv2d_nchw[ff_outer_inner * 4 + ff_inner] = conv2d_nchw[ff_outer_inner * 4 + ff_inner] + pad_temp_shared[rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x] * kernel_shared[ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner]
<class 'tvm.tir.stmt.For'>
for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    threadIdx_x = T.int32()
    kernel_shared = T.Buffer((1536,), scope="shared")
    conv2d_nchw[ff_outer_inner * 4 + ff_inner] = conv2d_nchw[ff_outer_inner * 4 + ff_inner] + pad_temp_shared[rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x] * kernel_shared[ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner]
<class 'tvm.tir.stmt.For'>
kernel_shared = T.Buffer((1536,), scope="shared")
for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
    threadIdx_x = T.launch_thread("threadIdx.x", 49)
    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 1536):
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = kernel[blockIdx_x * 36864 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) % 192 * 3 + rx_outer_outer]
for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    threadIdx_x = T.int32()
    conv2d_nchw[ff_outer_inner * 4 + ff_inner] = conv2d_nchw[ff_outer_inner * 4 + ff_inner] + pad_temp_shared[rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x] * kernel_shared[ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner]
<class 'tvm.tir.stmt.SeqStmt'>
T.bool(True)
<class 'tvm.tir.expr.IntImm'>
with T.allocate([1536], "float32", "shared") as kernel_shared:
    kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
        threadIdx_x = T.launch_thread("threadIdx.x", 49)
        if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 1536):
            kernel = T.Buffer((2359296,))
            blockIdx_x = T.int32()
            rc_outer_outer = T.int32()
            rx_outer_outer = T.int32()
            kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = kernel[blockIdx_x * 36864 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) % 192 * 3 + rx_outer_outer]
    for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
        conv2d_nchw = T.Buffer((8,), scope="local", align=32)
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        threadIdx_x = T.int32()
        conv2d_nchw[ff_outer_inner * 4 + ff_inner] = conv2d_nchw[ff_outer_inner * 4 + ff_inner] + pad_temp_shared[rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x] * kernel_shared_1[ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner]
<class 'tvm.tir.stmt.Allocate'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
rx_outer_outer = T.int32()
rc_outer_outer = T.int32()
for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
    threadIdx_x = T.launch_thread("threadIdx.x", 49)
    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7 < 576):
        if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 4032):
            data = T.Buffer((25088,))
            pad_temp_shared[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = T.if_then_else(1 <= (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 and (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) // 9 * 49 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
kernel_shared = T.allocate([1536], "float32", "shared")
kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
    threadIdx_x = T.launch_thread("threadIdx.x", 49)
    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 1536):
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = kernel[blockIdx_x * 36864 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) % 192 * 3 + rx_outer_outer]
for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    threadIdx_x = T.int32()
    conv2d_nchw[ff_outer_inner * 4 + ff_inner] = conv2d_nchw[ff_outer_inner * 4 + ff_inner] + pad_temp_shared[rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x] * kernel_shared_1[ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner]
<class 'tvm.tir.stmt.SeqStmt'>
T.bool(True)
<class 'tvm.tir.expr.IntImm'>
with T.allocate([4032], "float32", "shared") as pad_temp_shared:
    pad_temp_shared_1 = T.Buffer((4032,), data=pad_temp_shared, scope="shared")
    rx_outer_outer = T.int32()
    rc_outer_outer = T.int32()
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
        threadIdx_x = T.launch_thread("threadIdx.x", 49)
        if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7 < 576):
            if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 4032):
                data = T.Buffer((25088,))
                pad_temp_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = T.if_then_else(1 <= (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 and (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) // 9 * 49 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    kernel_shared = T.allocate([1536], "float32", "shared")
    kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
        threadIdx_x = T.launch_thread("threadIdx.x", 49)
        if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 1536):
            kernel = T.Buffer((2359296,))
            blockIdx_x = T.int32()
            kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = kernel[blockIdx_x * 36864 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) % 192 * 3 + rx_outer_outer]
    for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
        conv2d_nchw = T.Buffer((8,), scope="local", align=32)
        threadIdx_x = T.int32()
        conv2d_nchw[ff_outer_inner * 4 + ff_inner] = conv2d_nchw[ff_outer_inner * 4 + ff_inner] + pad_temp_shared_1[rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x] * kernel_shared_1[ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner]
<class 'tvm.tir.stmt.Allocate'>
for rx_outer_outer in range(3):
    pad_temp_shared = T.allocate([4032], "float32", "shared")
    pad_temp_shared_1 = T.Buffer((4032,), data=pad_temp_shared, scope="shared")
    rc_outer_outer = T.int32()
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
        threadIdx_x = T.launch_thread("threadIdx.x", 49)
        if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7 < 576):
            if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 4032):
                data = T.Buffer((25088,))
                pad_temp_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = T.if_then_else(1 <= (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 and (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) // 9 * 49 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    kernel_shared = T.allocate([1536], "float32", "shared")
    kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
        threadIdx_x = T.launch_thread("threadIdx.x", 49)
        if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 1536):
            kernel = T.Buffer((2359296,))
            blockIdx_x = T.int32()
            kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = kernel[blockIdx_x * 36864 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) % 192 * 3 + rx_outer_outer]
    for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
        conv2d_nchw = T.Buffer((8,), scope="local", align=32)
        threadIdx_x = T.int32()
        conv2d_nchw[ff_outer_inner * 4 + ff_inner] = conv2d_nchw[ff_outer_inner * 4 + ff_inner] + pad_temp_shared_1[rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x] * kernel_shared_1[ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner]
<class 'tvm.tir.stmt.For'>
for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
    pad_temp_shared = T.allocate([4032], "float32", "shared")
    pad_temp_shared_1 = T.Buffer((4032,), data=pad_temp_shared, scope="shared")
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
        threadIdx_x = T.launch_thread("threadIdx.x", 49)
        if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7 < 576):
            if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 4032):
                data = T.Buffer((25088,))
                pad_temp_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = T.if_then_else(1 <= (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 and (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) // 9 * 49 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    kernel_shared = T.allocate([1536], "float32", "shared")
    kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
        threadIdx_x = T.launch_thread("threadIdx.x", 49)
        if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 1536):
            kernel = T.Buffer((2359296,))
            blockIdx_x = T.int32()
            kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = kernel[blockIdx_x * 36864 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) % 192 * 3 + rx_outer_outer]
    for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
        conv2d_nchw = T.Buffer((8,), scope="local", align=32)
        threadIdx_x = T.int32()
        conv2d_nchw[ff_outer_inner * 4 + ff_inner] = conv2d_nchw[ff_outer_inner * 4 + ff_inner] + pad_temp_shared_1[rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x] * kernel_shared_1[ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner]
<class 'tvm.tir.stmt.For'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
for ff_outer_inner_init, ff_inner_init in T.grid(2, 4):
    conv2d_nchw[ff_outer_inner_init * 4 + ff_inner_init] = T.float32(0.0)
for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
    pad_temp_shared = T.allocate([4032], "float32", "shared")
    pad_temp_shared_1 = T.Buffer((4032,), data=pad_temp_shared, scope="shared")
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
        threadIdx_x = T.launch_thread("threadIdx.x", 49)
        if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7 < 576):
            if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 4032):
                data = T.Buffer((25088,))
                pad_temp_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = T.if_then_else(1 <= (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 and (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) // 9 * 49 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    kernel_shared = T.allocate([1536], "float32", "shared")
    kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
        threadIdx_x = T.launch_thread("threadIdx.x", 49)
        if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 1536):
            kernel = T.Buffer((2359296,))
            blockIdx_x = T.int32()
            kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = kernel[blockIdx_x * 36864 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) % 192 * 3 + rx_outer_outer]
    for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
        threadIdx_x = T.int32()
        conv2d_nchw[ff_outer_inner * 4 + ff_inner] = conv2d_nchw[ff_outer_inner * 4 + ff_inner] + pad_temp_shared_1[rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x] * kernel_shared_1[ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner]
<class 'tvm.tir.stmt.SeqStmt'>
nn_outer_outer_outer_outer = T.int32()
with T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_unroll_explicit", 1):
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    for ff_outer_inner_init, ff_inner_init in T.grid(2, 4):
        conv2d_nchw[ff_outer_inner_init * 4 + ff_inner_init] = T.float32(0.0)
    for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
        pad_temp_shared = T.allocate([4032], "float32", "shared")
        pad_temp_shared_1 = T.Buffer((4032,), data=pad_temp_shared, scope="shared")
        for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
            threadIdx_x = T.launch_thread("threadIdx.x", 49)
            if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7 < 576):
                if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 4032):
                    data = T.Buffer((25088,))
                    pad_temp_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = T.if_then_else(1 <= (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 and (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) // 9 * 49 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
        kernel_shared = T.allocate([1536], "float32", "shared")
        kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
        for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
            threadIdx_x = T.launch_thread("threadIdx.x", 49)
            if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 1536):
                kernel = T.Buffer((2359296,))
                blockIdx_x = T.int32()
                kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = kernel[blockIdx_x * 36864 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) % 192 * 3 + rx_outer_outer]
        for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
            threadIdx_x = T.int32()
            conv2d_nchw[ff_outer_inner * 4 + ff_inner] = conv2d_nchw[ff_outer_inner * 4 + ff_inner] + pad_temp_shared_1[rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x] * kernel_shared_1[ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner]
<class 'tvm.tir.stmt.AttrStmt'>
nn_outer_outer_outer_outer = T.int32()
with T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_auto_unroll_max_step", 1024):
    T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_unroll_explicit", 1)
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    for ff_outer_inner_init, ff_inner_init in T.grid(2, 4):
        conv2d_nchw[ff_outer_inner_init * 4 + ff_inner_init] = T.float32(0.0)
    for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
        pad_temp_shared = T.allocate([4032], "float32", "shared")
        pad_temp_shared_1 = T.Buffer((4032,), data=pad_temp_shared, scope="shared")
        for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
            threadIdx_x = T.launch_thread("threadIdx.x", 49)
            if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7 < 576):
                if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 4032):
                    data = T.Buffer((25088,))
                    pad_temp_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = T.if_then_else(1 <= (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 and (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) // 9 * 49 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
        kernel_shared = T.allocate([1536], "float32", "shared")
        kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
        for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
            threadIdx_x = T.launch_thread("threadIdx.x", 49)
            if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 1536):
                kernel = T.Buffer((2359296,))
                blockIdx_x = T.int32()
                kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = kernel[blockIdx_x * 36864 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) % 192 * 3 + rx_outer_outer]
        for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
            threadIdx_x = T.int32()
            conv2d_nchw[ff_outer_inner * 4 + ff_inner] = conv2d_nchw[ff_outer_inner * 4 + ff_inner] + pad_temp_shared_1[rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x] * kernel_shared_1[ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner]
<class 'tvm.tir.stmt.AttrStmt'>
0
<class 'tvm.tir.expr.IntImm'>
8
<class 'tvm.tir.expr.IntImm'>
i1_inner
<class 'tvm.tir.expr.Var'>
conv2d_nchw[i1_inner]
<class 'tvm.tir.expr.BufferLoad'>
8
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 8
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 8 + i1_inner
<class 'tvm.tir.expr.Add'>
bias[blockIdx_x * 8 + i1_inner]
<class 'tvm.tir.expr.BufferLoad'>
conv2d_nchw[i1_inner] + bias[blockIdx_x * 8 + i1_inner]
<class 'tvm.tir.expr.Add'>
T.float32(0.0)
<class 'tvm.tir.expr.FloatImm'>
T.max(conv2d_nchw[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.expr.Max'>
392
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 392
<class 'tvm.tir.expr.Mul'>
49
<class 'tvm.tir.expr.IntImm'>
i1_inner * 49
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 392 + i1_inner * 49
<class 'tvm.tir.expr.Add'>
blockIdx_x * 392 + i1_inner * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
compute = T.Buffer((25088,))
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
i1_inner = T.int32()
bias = T.Buffer((512,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
compute[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
for i1_inner in range(8):
    compute = T.Buffer((25088,))
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    bias = T.Buffer((512,))
    blockIdx_x = T.int32()
    threadIdx_x = T.int32()
    compute[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.stmt.For'>
nn_outer_outer_outer_outer = T.int32()
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
blockIdx_x = T.int32()
threadIdx_x = T.int32()
with T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_auto_unroll_max_step", 1024):
    T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_unroll_explicit", 1)
    for ff_outer_inner_init, ff_inner_init in T.grid(2, 4):
        conv2d_nchw[ff_outer_inner_init * 4 + ff_inner_init] = T.float32(0.0)
    for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
        pad_temp_shared = T.allocate([4032], "float32", "shared")
        pad_temp_shared_1 = T.Buffer((4032,), data=pad_temp_shared, scope="shared")
        for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
            threadIdx_x = T.launch_thread("threadIdx.x", 49)
            if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7 < 576):
                if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 4032):
                    data = T.Buffer((25088,))
                    pad_temp_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = T.if_then_else(1 <= (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 and (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) // 9 * 49 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
        kernel_shared = T.allocate([1536], "float32", "shared")
        kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
        for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
            threadIdx_x = T.launch_thread("threadIdx.x", 49)
            if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 1536):
                kernel = T.Buffer((2359296,))
                kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = kernel[blockIdx_x * 36864 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) % 192 * 3 + rx_outer_outer]
        for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
            conv2d_nchw[ff_outer_inner * 4 + ff_inner] = conv2d_nchw[ff_outer_inner * 4 + ff_inner] + pad_temp_shared_1[rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x] * kernel_shared_1[ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner]
for i1_inner in range(8):
    compute = T.Buffer((25088,))
    bias = T.Buffer((512,))
    compute[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.stmt.SeqStmt'>
T.bool(True)
<class 'tvm.tir.expr.IntImm'>
with T.allocate([8], "float32", "local") as conv2d_nchw:
    nn_outer_outer_outer_outer = T.int32()
    conv2d_nchw_1 = T.Buffer((8,), data=conv2d_nchw, scope="local", align=32)
    blockIdx_x = T.int32()
    threadIdx_x = T.int32()
    with T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_auto_unroll_max_step", 1024):
        T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_unroll_explicit", 1)
        for ff_outer_inner_init, ff_inner_init in T.grid(2, 4):
            conv2d_nchw_1[ff_outer_inner_init * 4 + ff_inner_init] = T.float32(0.0)
        for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
            pad_temp_shared = T.allocate([4032], "float32", "shared")
            pad_temp_shared_1 = T.Buffer((4032,), data=pad_temp_shared, scope="shared")
            for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
                threadIdx_x = T.launch_thread("threadIdx.x", 49)
                if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7 < 576):
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 4032):
                        data = T.Buffer((25088,))
                        pad_temp_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = T.if_then_else(1 <= (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 and (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) // 9 * 49 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
            kernel_shared = T.allocate([1536], "float32", "shared")
            kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
            for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
                threadIdx_x = T.launch_thread("threadIdx.x", 49)
                if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x < 1536):
                    kernel = T.Buffer((2359296,))
                    kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x] = kernel[blockIdx_x * 36864 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x) % 192 * 3 + rx_outer_outer]
            for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
                conv2d_nchw_1[ff_outer_inner * 4 + ff_inner] = conv2d_nchw_1[ff_outer_inner * 4 + ff_inner] + pad_temp_shared_1[rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x] * kernel_shared_1[ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner]
    for i1_inner in range(8):
        compute = T.Buffer((25088,))
        bias = T.Buffer((512,))
        compute[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw_1[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.stmt.Allocate'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    conv2d_nchw = T.allocate([8], "float32", "local")
    nn_outer_outer_outer_outer = T.int32()
    conv2d_nchw_1 = T.Buffer((8,), data=conv2d_nchw, scope="local", align=32)
    blockIdx_x = T.int32()
    with T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_auto_unroll_max_step", 1024):
        T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_unroll_explicit", 1)
        for ff_outer_inner_init, ff_inner_init in T.grid(2, 4):
            conv2d_nchw_1[ff_outer_inner_init * 4 + ff_inner_init] = T.float32(0.0)
        for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
            pad_temp_shared = T.allocate([4032], "float32", "shared")
            pad_temp_shared_1 = T.Buffer((4032,), data=pad_temp_shared, scope="shared")
            for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
                threadIdx_x_1 = T.launch_thread("threadIdx.x", 49)
                if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_1 // 7 < 576):
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x_1 < 4032):
                        data = T.Buffer((25088,))
                        pad_temp_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x_1] = T.if_then_else(1 <= (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_1 // 7) % 9 and (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_1 // 7) // 9 * 49 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            kernel_shared = T.allocate([1536], "float32", "shared")
            kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
            for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
                threadIdx_x_1 = T.launch_thread("threadIdx.x", 49)
                if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x_1 < 1536):
                    kernel = T.Buffer((2359296,))
                    kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
            for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
                conv2d_nchw_1[ff_outer_inner * 4 + ff_inner] = conv2d_nchw_1[ff_outer_inner * 4 + ff_inner] + pad_temp_shared_1[rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x] * kernel_shared_1[ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner]
    for i1_inner in range(8):
        compute = T.Buffer((25088,))
        bias = T.Buffer((512,))
        compute[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw_1[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
with T.launch_thread("vthread", 1) as vthread:
    threadIdx_x = T.launch_thread("threadIdx.x", 49)
    conv2d_nchw = T.allocate([8], "float32", "local")
    nn_outer_outer_outer_outer = T.int32()
    conv2d_nchw_1 = T.Buffer((8,), data=conv2d_nchw, scope="local", align=32)
    blockIdx_x = T.int32()
    with T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_auto_unroll_max_step", 1024):
        T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_unroll_explicit", 1)
        for ff_outer_inner_init, ff_inner_init in T.grid(2, 4):
            conv2d_nchw_1[ff_outer_inner_init * 4 + ff_inner_init] = T.float32(0.0)
        for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
            pad_temp_shared = T.allocate([4032], "float32", "shared")
            pad_temp_shared_1 = T.Buffer((4032,), data=pad_temp_shared, scope="shared")
            for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
                threadIdx_x_1 = T.launch_thread("threadIdx.x", 49)
                if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_1 // 7 < 576):
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x_1 < 4032):
                        data = T.Buffer((25088,))
                        pad_temp_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x_1] = T.if_then_else(1 <= (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_1 // 7) % 9 and (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_1 // 7) // 9 * 49 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            kernel_shared = T.allocate([1536], "float32", "shared")
            kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
            for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
                threadIdx_x_1 = T.launch_thread("threadIdx.x", 49)
                if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x_1 < 1536):
                    kernel = T.Buffer((2359296,))
                    kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
            for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
                conv2d_nchw_1[ff_outer_inner * 4 + ff_inner] = conv2d_nchw_1[ff_outer_inner * 4 + ff_inner] + pad_temp_shared_1[rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x] * kernel_shared_1[ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner]
    for i1_inner in range(8):
        compute = T.Buffer((25088,))
        bias = T.Buffer((512,))
        compute[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw_1[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
with T.launch_thread("blockIdx.x", 64) as blockIdx_x:
    vthread = T.launch_thread("vthread", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 49)
    conv2d_nchw = T.allocate([8], "float32", "local")
    nn_outer_outer_outer_outer = T.int32()
    conv2d_nchw_1 = T.Buffer((8,), data=conv2d_nchw, scope="local", align=32)
    with T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_auto_unroll_max_step", 1024):
        T.attr(T.iter_var(nn_outer_outer_outer_outer, None, "DataPar", ""), "pragma_unroll_explicit", 1)
        for ff_outer_inner_init, ff_inner_init in T.grid(2, 4):
            conv2d_nchw_1[ff_outer_inner_init * 4 + ff_inner_init] = T.float32(0.0)
        for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
            pad_temp_shared = T.allocate([4032], "float32", "shared")
            pad_temp_shared_1 = T.Buffer((4032,), data=pad_temp_shared, scope="shared")
            for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(83):
                threadIdx_x_1 = T.launch_thread("threadIdx.x", 49)
                if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_1 // 7 < 576):
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x_1 < 4032):
                        data = T.Buffer((25088,))
                        pad_temp_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x_1] = T.if_then_else(1 <= (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_1 // 7) % 9 and (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_1 // 7) // 9 * 49 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            kernel_shared = T.allocate([1536], "float32", "shared")
            kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
            for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(32):
                threadIdx_x_1 = T.launch_thread("threadIdx.x", 49)
                if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x_1 < 1536):
                    kernel = T.Buffer((2359296,))
                    kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 49 + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
            for rc_outer_inner, ry_outer_inner, ff_outer_inner, rc_inner, ff_inner in T.grid(8, 3, 2, 8, 4):
                conv2d_nchw_1[ff_outer_inner * 4 + ff_inner] = conv2d_nchw_1[ff_outer_inner * 4 + ff_inner] + pad_temp_shared_1[rc_outer_inner * 504 + rc_inner * 63 + ry_outer_inner * 7 + threadIdx_x] * kernel_shared_1[ff_outer_inner * 768 + ff_inner * 192 + rc_outer_inner * 24 + rc_inner * 3 + ry_outer_inner]
    for i1_inner in range(8):
        compute = T.Buffer((25088,))
        bias = T.Buffer((512,))
        compute[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw_1[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((1, 512, 7, 7), "float32"), kernel: T.Buffer((512, 512, 3, 3), "float32"), bias: T.Buffer((1, 512, 1, 1), "float32"), compute: T.Buffer((1, 512, 7, 7), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        blockIdx_x = T.launch_thread("blockIdx.x", 64)
        conv2d_nchw = T.allocate([8], "float32", "local")
        pad_temp_shared = T.allocate([4032], "float32", "shared")
        kernel_shared = T.allocate([1536], "float32", "shared")
        threadIdx_x = T.launch_thread("threadIdx.x", 49)
        conv2d_nchw_1 = T.Buffer((8,), data=conv2d_nchw, scope="local", align=32)
        conv2d_nchw_1[0] = T.float32(0.0)
        conv2d_nchw_1[1] = T.float32(0.0)
        conv2d_nchw_1[2] = T.float32(0.0)
        conv2d_nchw_1[3] = T.float32(0.0)
        conv2d_nchw_1[4] = T.float32(0.0)
        conv2d_nchw_1[5] = T.float32(0.0)
        conv2d_nchw_1[6] = T.float32(0.0)
        conv2d_nchw_1[7] = T.float32(0.0)
        for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
            cse_var_2: T.int32 = rc_outer_outer * 3136
            cse_var_1: T.int32 = rc_outer_outer * 576
            threadIdx_x_1 = T.env_thread("threadIdx.x")
            pad_temp_shared_1 = T.Buffer((4032,), data=pad_temp_shared, scope="shared")
            data_1 = T.Buffer((25088,), data=data.data)
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 49] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 49) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 98] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 98) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 147] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 147) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 196] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 196) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 245] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 245) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 294] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 294) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 343] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 343) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 392] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 392) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 441] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 335], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 490] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 490) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 539] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 539) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 588] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 588) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 637] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 637) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 686] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 686) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 735] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 735) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 784] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 784) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 833] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 833) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 882] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 678], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 931] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 931) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 980] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 980) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1029] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1029) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1078] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1078) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1127] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1127) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1176] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1176) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1225] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1225) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1274] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1274) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1323] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 1021], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1372] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1372) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1421] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1421) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1470] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1470) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1519] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1519) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1568] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1568) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1617] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1617) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1666] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1666) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1715] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1715) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1764] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 1364], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1813] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1813) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1862] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1862) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1911] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1911) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1960] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1960) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2009] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2009) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2058] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2058) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2107] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2107) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2156] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2156) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2205] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 1707], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2254] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2254) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2303] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2303) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2352] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2352) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2401] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2401) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2450] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2450) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2499] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2499) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2548] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2548) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2597] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2597) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2646] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 2050], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2695] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2695) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2744] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2744) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2793] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2793) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2842] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2842) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2891] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2891) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2940] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2940) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2989] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2989) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3038] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3038) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3087] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 2393], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3136] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3136) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3185] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3185) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3234] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3234) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3283] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3283) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3332] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3332) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3381] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3381) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3430] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3430) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3479] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3479) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3528] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 2736], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3577] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3577) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3626] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3626) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3675] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3675) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3724] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3724) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3773] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3773) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3822] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3822) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3871] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3871) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3920] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3920) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3969] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 3079], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                if threadIdx_x_1 < 14:
                    pad_temp_shared_1[threadIdx_x_1 + 4018] = T.if_then_else(threadIdx_x_1 < 7 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 4018) // 63 * 49 + rx_outer_outer + threadIdx_x_1 + 41], T.float32(0.0))
            threadIdx_x_2 = T.env_thread("threadIdx.x")
            kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
            kernel_1 = T.Buffer((2359296,), data=kernel.data)
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2] = kernel_1[blockIdx_x * 36864 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 49] = kernel_1[blockIdx_x * 36864 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 147]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 98] = kernel_1[blockIdx_x * 36864 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 294]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 147] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 147) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 147) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 196] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 196) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 12]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 245] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 245) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 159]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 294] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 294) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 306]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 343] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 343) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 151) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 392] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 392) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 24]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 441] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 441) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 171]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 490] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 490) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 318]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 539] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 539) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 155) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 588] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 588) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 36]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 637] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 637) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 183]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 686] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 686) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 330]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 735] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 735) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 159) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 784] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 784) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 48]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 833] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 833) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 195]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 882] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 882) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 342]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 931] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 931) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 163) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 980] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 980) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 60]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1029] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1029) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 207]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1078] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1078) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 354]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1127] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1127) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 167) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1176] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1176) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 72]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1225] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1225) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 219]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1274] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1274) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 366]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1323] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1323) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 171) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1372] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1372) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 84]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1421] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1421) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 231]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1470] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1470) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 378]
            with T.launch_thread(threadIdx_x_2, 49):
                if threadIdx_x_2 < 17:
                    kernel_shared_1[threadIdx_x_2 + 1519] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1519) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 525]
            for rc_outer_inner in range(8):
                cse_var_3: T.int32 = rc_outer_inner * 24
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 192]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 384]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 576]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 3]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 195]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 387]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 579]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 6]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 198]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 390]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 582]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 9]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 201]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 393]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 585]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 12]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 204]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 396]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 588]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 15]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 207]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 399]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 591]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 18]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 210]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 402]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 594]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 21]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 213]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 405]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 597]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 768]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 960]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 1152]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 1344]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 771]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 963]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 1155]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 1347]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 774]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 966]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 1158]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 1350]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 777]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 969]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 1161]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 1353]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 780]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 972]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 1164]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 1356]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 783]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 975]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 1167]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 1359]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 786]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 978]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 1170]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 1362]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 789]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 981]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 1173]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 1365]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 1]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 193]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 385]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 577]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 4]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 196]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 388]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 580]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 7]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 199]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 391]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 583]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 10]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 202]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 394]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 586]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 13]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 205]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 397]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 589]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 16]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 208]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 400]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 592]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 19]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 211]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 403]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 595]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 22]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 214]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 406]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 598]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 769]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 961]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 1153]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 1345]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 772]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 964]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 1156]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 1348]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 775]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 967]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 1159]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 1351]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 778]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 970]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 1162]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 1354]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 781]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 973]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 1165]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 1357]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 784]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 976]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 1168]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 1360]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 787]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 979]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 1171]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 1363]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 790]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 982]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 1174]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 1366]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 2]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 194]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 386]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 578]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 5]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 197]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 389]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 581]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 8]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 200]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 392]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 584]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 11]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 203]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 395]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 587]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 14]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 206]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 398]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 590]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 17]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 209]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 401]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 593]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 20]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 212]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 404]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 596]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 23]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 215]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 407]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 599]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 770]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 962]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 1154]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 1346]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 773]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 965]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 1157]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 1349]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 776]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 968]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 1160]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 1352]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 779]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 971]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 1163]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 1355]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 782]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 974]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 1166]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 1358]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 785]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 977]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 1169]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 1361]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 788]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 980]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 1172]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 1364]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 791]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 983]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 1175]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 1367]
        for i1_inner in range(8):
            compute_1 = T.Buffer((25088,), data=compute.data)
            bias_1 = T.Buffer((512,), data=bias.data)
            compute_1[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw_1[i1_inner] + bias_1[blockIdx_x * 8 + i1_inner], T.float32(0.0))
Phase 2
--------------------
64
<class 'tvm.tir.expr.IntImm'>
8
<class 'tvm.tir.expr.IntImm'>
4032
<class 'tvm.tir.expr.IntImm'>
1536
<class 'tvm.tir.expr.IntImm'>
49
<class 'tvm.tir.expr.IntImm'>
T.float32(0.0)
<class 'tvm.tir.expr.FloatImm'>
0
<class 'tvm.tir.expr.IntImm'>
4
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
0
<class 'tvm.tir.expr.IntImm'>
T.Add(T.Mul(0, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = T.float32(0.0)
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
1
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
conv2d_nchw[T.Mul(0, 4) + 1] = T.float32(0.0)
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
2
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
conv2d_nchw[T.Mul(0, 4) + 2] = T.float32(0.0)
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
3
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
conv2d_nchw[T.Mul(0, 4) + 3] = T.float32(0.0)
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(1, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = T.float32(0.0)
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
conv2d_nchw[T.Mul(1, 4) + 1] = T.float32(0.0)
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
conv2d_nchw[T.Mul(1, 4) + 2] = T.float32(0.0)
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
conv2d_nchw[T.Mul(1, 4) + 3] = T.float32(0.0)
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
8
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
3
<class 'tvm.tir.expr.IntImm'>
49
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
threadIdx_x
<class 'tvm.tir.expr.Var'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
T.Mul(0, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
49
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
4032
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
T.Mul(0, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(T.Mul(0, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(0, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
T.Mul(0, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(T.Mul(0, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(T.Mul(0, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(0, 7) + threadIdx_x // 7) % 9 and (T.Mul(0, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer
<class 'tvm.tir.expr.Var'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (T.Mul(0, 7) + threadIdx_x // 7) % 9 and (T.Mul(0, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(0, 7) + threadIdx_x // 7) % 9 and (T.Mul(0, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
rc_outer_outer
<class 'tvm.tir.expr.Var'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
7
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
T.Mul(0, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(T.Mul(0, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(T.Mul(0, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(0, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
T.Mul(0, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(T.Mul(0, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(T.Mul(0, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(0, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(0, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(0, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(0, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (T.Mul(0, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(0, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (T.Mul(0, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(0, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(0, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(0, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.float32(0.0)
<class 'tvm.tir.expr.FloatImm'>
T.if_then_else(1 <= (T.Mul(0, 7) + threadIdx_x // 7) % 9 and (T.Mul(0, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(0, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(0, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
49
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(0, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(0, 7) + threadIdx_x // 7) % 9 and (T.Mul(0, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(0, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(0, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(0, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(0, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(0, 7) + threadIdx_x // 7) % 9 and (T.Mul(0, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(0, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(0, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(0, 7) + threadIdx_x // 7 < 576:
    if T.Mul(0, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(0, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(0, 7) + threadIdx_x // 7) % 9 and (T.Mul(0, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(0, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(0, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(0, 7) + threadIdx_x // 7 < 576:
        if T.Mul(0, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(0, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(0, 7) + threadIdx_x // 7) % 9 and (T.Mul(0, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(0, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(0, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(1, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(1, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(1, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(1, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(1, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(1, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(1, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(1, 7) + threadIdx_x // 7) % 9 and (T.Mul(1, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(1, 7) + threadIdx_x // 7) % 9 and (T.Mul(1, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(1, 7) + threadIdx_x // 7) % 9 and (T.Mul(1, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(1, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(1, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(1, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(1, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(1, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(1, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(1, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(1, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(1, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(1, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(1, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(1, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(1, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(1, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(1, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(1, 7) + threadIdx_x // 7) % 9 and (T.Mul(1, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(1, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(1, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(1, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(1, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(1, 7) + threadIdx_x // 7) % 9 and (T.Mul(1, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(1, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(1, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(1, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(1, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(1, 7) + threadIdx_x // 7) % 9 and (T.Mul(1, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(1, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(1, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(1, 7) + threadIdx_x // 7 < 576:
    if T.Mul(1, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(1, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(1, 7) + threadIdx_x // 7) % 9 and (T.Mul(1, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(1, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(1, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(1, 7) + threadIdx_x // 7 < 576:
        if T.Mul(1, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(1, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(1, 7) + threadIdx_x // 7) % 9 and (T.Mul(1, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(1, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(1, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
2
<class 'tvm.tir.expr.IntImm'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(2, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(2, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(2, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(2, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(2, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(2, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(2, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(2, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(2, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(2, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(2, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(2, 7) + threadIdx_x // 7) % 9 and (T.Mul(2, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(2, 7) + threadIdx_x // 7) % 9 and (T.Mul(2, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(2, 7) + threadIdx_x // 7) % 9 and (T.Mul(2, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(2, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(2, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(2, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(2, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(2, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(2, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(2, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(2, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(2, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(2, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(2, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(2, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(2, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(2, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(2, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(2, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(2, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(2, 7) + threadIdx_x // 7) % 9 and (T.Mul(2, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(2, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(2, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(2, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(2, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(2, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(2, 7) + threadIdx_x // 7) % 9 and (T.Mul(2, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(2, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(2, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(2, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(2, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(2, 7) + threadIdx_x // 7) % 9 and (T.Mul(2, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(2, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(2, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(2, 7) + threadIdx_x // 7 < 576:
    if T.Mul(2, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(2, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(2, 7) + threadIdx_x // 7) % 9 and (T.Mul(2, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(2, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(2, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(2, 7) + threadIdx_x // 7 < 576:
        if T.Mul(2, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(2, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(2, 7) + threadIdx_x // 7) % 9 and (T.Mul(2, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(2, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(2, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
3
<class 'tvm.tir.expr.IntImm'>
T.Mul(3, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(3, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(3, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(3, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(3, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(3, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(3, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(3, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(3, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(3, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(3, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(3, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(3, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(3, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(3, 7) + threadIdx_x // 7) % 9 and (T.Mul(3, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(3, 7) + threadIdx_x // 7) % 9 and (T.Mul(3, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(3, 7) + threadIdx_x // 7) % 9 and (T.Mul(3, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(3, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(3, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(3, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(3, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(3, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(3, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(3, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(3, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(3, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(3, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(3, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(3, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(3, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(3, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(3, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(3, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(3, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(3, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(3, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(3, 7) + threadIdx_x // 7) % 9 and (T.Mul(3, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(3, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(3, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(3, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(3, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(3, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(3, 7) + threadIdx_x // 7) % 9 and (T.Mul(3, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(3, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(3, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(3, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(3, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(3, 7) + threadIdx_x // 7) % 9 and (T.Mul(3, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(3, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(3, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(3, 7) + threadIdx_x // 7 < 576:
    if T.Mul(3, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(3, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(3, 7) + threadIdx_x // 7) % 9 and (T.Mul(3, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(3, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(3, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(3, 7) + threadIdx_x // 7 < 576:
        if T.Mul(3, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(3, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(3, 7) + threadIdx_x // 7) % 9 and (T.Mul(3, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(3, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(3, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
4
<class 'tvm.tir.expr.IntImm'>
T.Mul(4, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(4, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(4, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(4, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(4, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(4, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(4, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(4, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(4, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(4, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(4, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(4, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(4, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(4, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(4, 7) + threadIdx_x // 7) % 9 and (T.Mul(4, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(4, 7) + threadIdx_x // 7) % 9 and (T.Mul(4, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(4, 7) + threadIdx_x // 7) % 9 and (T.Mul(4, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(4, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(4, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(4, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(4, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(4, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(4, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(4, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(4, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(4, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(4, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(4, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(4, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(4, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(4, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(4, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(4, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(4, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(4, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(4, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(4, 7) + threadIdx_x // 7) % 9 and (T.Mul(4, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(4, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(4, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(4, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(4, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(4, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(4, 7) + threadIdx_x // 7) % 9 and (T.Mul(4, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(4, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(4, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(4, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(4, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(4, 7) + threadIdx_x // 7) % 9 and (T.Mul(4, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(4, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(4, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(4, 7) + threadIdx_x // 7 < 576:
    if T.Mul(4, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(4, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(4, 7) + threadIdx_x // 7) % 9 and (T.Mul(4, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(4, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(4, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(4, 7) + threadIdx_x // 7 < 576:
        if T.Mul(4, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(4, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(4, 7) + threadIdx_x // 7) % 9 and (T.Mul(4, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(4, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(4, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
5
<class 'tvm.tir.expr.IntImm'>
T.Mul(5, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(5, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(5, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(5, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(5, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(5, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(5, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(5, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(5, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(5, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(5, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(5, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(5, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(5, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(5, 7) + threadIdx_x // 7) % 9 and (T.Mul(5, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(5, 7) + threadIdx_x // 7) % 9 and (T.Mul(5, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(5, 7) + threadIdx_x // 7) % 9 and (T.Mul(5, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(5, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(5, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(5, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(5, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(5, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(5, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(5, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(5, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(5, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(5, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(5, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(5, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(5, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(5, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(5, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(5, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(5, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(5, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(5, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(5, 7) + threadIdx_x // 7) % 9 and (T.Mul(5, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(5, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(5, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(5, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(5, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(5, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(5, 7) + threadIdx_x // 7) % 9 and (T.Mul(5, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(5, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(5, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(5, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(5, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(5, 7) + threadIdx_x // 7) % 9 and (T.Mul(5, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(5, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(5, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(5, 7) + threadIdx_x // 7 < 576:
    if T.Mul(5, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(5, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(5, 7) + threadIdx_x // 7) % 9 and (T.Mul(5, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(5, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(5, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(5, 7) + threadIdx_x // 7 < 576:
        if T.Mul(5, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(5, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(5, 7) + threadIdx_x // 7) % 9 and (T.Mul(5, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(5, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(5, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
6
<class 'tvm.tir.expr.IntImm'>
T.Mul(6, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(6, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(6, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(6, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(6, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(6, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(6, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(6, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(6, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(6, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(6, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(6, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(6, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(6, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(6, 7) + threadIdx_x // 7) % 9 and (T.Mul(6, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(6, 7) + threadIdx_x // 7) % 9 and (T.Mul(6, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(6, 7) + threadIdx_x // 7) % 9 and (T.Mul(6, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(6, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(6, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(6, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(6, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(6, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(6, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(6, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(6, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(6, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(6, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(6, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(6, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(6, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(6, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(6, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(6, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(6, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(6, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(6, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(6, 7) + threadIdx_x // 7) % 9 and (T.Mul(6, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(6, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(6, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(6, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(6, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(6, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(6, 7) + threadIdx_x // 7) % 9 and (T.Mul(6, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(6, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(6, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(6, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(6, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(6, 7) + threadIdx_x // 7) % 9 and (T.Mul(6, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(6, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(6, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(6, 7) + threadIdx_x // 7 < 576:
    if T.Mul(6, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(6, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(6, 7) + threadIdx_x // 7) % 9 and (T.Mul(6, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(6, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(6, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(6, 7) + threadIdx_x // 7 < 576:
        if T.Mul(6, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(6, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(6, 7) + threadIdx_x // 7) % 9 and (T.Mul(6, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(6, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(6, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
7
<class 'tvm.tir.expr.IntImm'>
T.Mul(7, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(7, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(7, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(7, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(7, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(7, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(7, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(7, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(7, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(7, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(7, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(7, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(7, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(7, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(7, 7) + threadIdx_x // 7) % 9 and (T.Mul(7, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(7, 7) + threadIdx_x // 7) % 9 and (T.Mul(7, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(7, 7) + threadIdx_x // 7) % 9 and (T.Mul(7, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(7, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(7, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(7, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(7, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(7, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(7, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(7, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(7, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(7, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(7, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(7, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(7, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(7, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(7, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(7, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(7, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(7, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(7, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(7, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(7, 7) + threadIdx_x // 7) % 9 and (T.Mul(7, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(7, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(7, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(7, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(7, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(7, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(7, 7) + threadIdx_x // 7) % 9 and (T.Mul(7, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(7, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(7, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(7, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(7, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(7, 7) + threadIdx_x // 7) % 9 and (T.Mul(7, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(7, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(7, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(7, 7) + threadIdx_x // 7 < 576:
    if T.Mul(7, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(7, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(7, 7) + threadIdx_x // 7) % 9 and (T.Mul(7, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(7, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(7, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(7, 7) + threadIdx_x // 7 < 576:
        if T.Mul(7, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(7, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(7, 7) + threadIdx_x // 7) % 9 and (T.Mul(7, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(7, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(7, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
8
<class 'tvm.tir.expr.IntImm'>
T.Mul(8, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(8, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(8, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(8, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(8, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(8, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(8, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(8, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(8, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(8, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(8, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(8, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(8, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(8, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(8, 7) + threadIdx_x // 7) % 9 and (T.Mul(8, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(8, 7) + threadIdx_x // 7) % 9 and (T.Mul(8, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(8, 7) + threadIdx_x // 7) % 9 and (T.Mul(8, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(8, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(8, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(8, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(8, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(8, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(8, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(8, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(8, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(8, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(8, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(8, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(8, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(8, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(8, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(8, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(8, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(8, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(8, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(8, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(8, 7) + threadIdx_x // 7) % 9 and (T.Mul(8, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(8, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(8, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(8, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(8, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(8, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(8, 7) + threadIdx_x // 7) % 9 and (T.Mul(8, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(8, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(8, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(8, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(8, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(8, 7) + threadIdx_x // 7) % 9 and (T.Mul(8, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(8, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(8, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(8, 7) + threadIdx_x // 7 < 576:
    if T.Mul(8, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(8, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(8, 7) + threadIdx_x // 7) % 9 and (T.Mul(8, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(8, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(8, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(8, 7) + threadIdx_x // 7 < 576:
        if T.Mul(8, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(8, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(8, 7) + threadIdx_x // 7) % 9 and (T.Mul(8, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(8, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(8, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
9
<class 'tvm.tir.expr.IntImm'>
T.Mul(9, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(9, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(9, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(9, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(9, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(9, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(9, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(9, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(9, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(9, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(9, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(9, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(9, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(9, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(9, 7) + threadIdx_x // 7) % 9 and (T.Mul(9, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(9, 7) + threadIdx_x // 7) % 9 and (T.Mul(9, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(9, 7) + threadIdx_x // 7) % 9 and (T.Mul(9, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(9, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(9, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(9, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(9, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(9, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(9, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(9, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(9, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(9, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(9, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(9, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(9, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(9, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(9, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(9, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(9, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(9, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(9, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(9, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(9, 7) + threadIdx_x // 7) % 9 and (T.Mul(9, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(9, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(9, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(9, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(9, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(9, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(9, 7) + threadIdx_x // 7) % 9 and (T.Mul(9, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(9, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(9, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(9, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(9, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(9, 7) + threadIdx_x // 7) % 9 and (T.Mul(9, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(9, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(9, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(9, 7) + threadIdx_x // 7 < 576:
    if T.Mul(9, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(9, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(9, 7) + threadIdx_x // 7) % 9 and (T.Mul(9, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(9, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(9, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(9, 7) + threadIdx_x // 7 < 576:
        if T.Mul(9, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(9, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(9, 7) + threadIdx_x // 7) % 9 and (T.Mul(9, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(9, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(9, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
10
<class 'tvm.tir.expr.IntImm'>
T.Mul(10, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(10, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(10, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(10, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(10, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(10, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(10, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(10, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(10, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(10, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(10, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(10, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(10, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(10, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(10, 7) + threadIdx_x // 7) % 9 and (T.Mul(10, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(10, 7) + threadIdx_x // 7) % 9 and (T.Mul(10, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(10, 7) + threadIdx_x // 7) % 9 and (T.Mul(10, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(10, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(10, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(10, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(10, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(10, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(10, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(10, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(10, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(10, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(10, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(10, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(10, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(10, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(10, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(10, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(10, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(10, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(10, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(10, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(10, 7) + threadIdx_x // 7) % 9 and (T.Mul(10, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(10, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(10, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(10, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(10, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(10, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(10, 7) + threadIdx_x // 7) % 9 and (T.Mul(10, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(10, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(10, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(10, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(10, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(10, 7) + threadIdx_x // 7) % 9 and (T.Mul(10, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(10, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(10, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(10, 7) + threadIdx_x // 7 < 576:
    if T.Mul(10, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(10, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(10, 7) + threadIdx_x // 7) % 9 and (T.Mul(10, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(10, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(10, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(10, 7) + threadIdx_x // 7 < 576:
        if T.Mul(10, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(10, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(10, 7) + threadIdx_x // 7) % 9 and (T.Mul(10, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(10, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(10, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
11
<class 'tvm.tir.expr.IntImm'>
T.Mul(11, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(11, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(11, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(11, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(11, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(11, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(11, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(11, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(11, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(11, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(11, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(11, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(11, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(11, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(11, 7) + threadIdx_x // 7) % 9 and (T.Mul(11, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(11, 7) + threadIdx_x // 7) % 9 and (T.Mul(11, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(11, 7) + threadIdx_x // 7) % 9 and (T.Mul(11, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(11, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(11, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(11, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(11, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(11, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(11, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(11, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(11, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(11, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(11, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(11, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(11, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(11, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(11, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(11, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(11, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(11, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(11, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(11, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(11, 7) + threadIdx_x // 7) % 9 and (T.Mul(11, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(11, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(11, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(11, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(11, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(11, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(11, 7) + threadIdx_x // 7) % 9 and (T.Mul(11, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(11, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(11, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(11, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(11, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(11, 7) + threadIdx_x // 7) % 9 and (T.Mul(11, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(11, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(11, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(11, 7) + threadIdx_x // 7 < 576:
    if T.Mul(11, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(11, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(11, 7) + threadIdx_x // 7) % 9 and (T.Mul(11, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(11, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(11, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(11, 7) + threadIdx_x // 7 < 576:
        if T.Mul(11, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(11, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(11, 7) + threadIdx_x // 7) % 9 and (T.Mul(11, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(11, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(11, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
12
<class 'tvm.tir.expr.IntImm'>
T.Mul(12, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(12, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(12, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(12, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(12, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(12, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(12, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(12, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(12, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(12, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(12, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(12, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(12, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(12, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(12, 7) + threadIdx_x // 7) % 9 and (T.Mul(12, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(12, 7) + threadIdx_x // 7) % 9 and (T.Mul(12, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(12, 7) + threadIdx_x // 7) % 9 and (T.Mul(12, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(12, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(12, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(12, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(12, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(12, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(12, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(12, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(12, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(12, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(12, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(12, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(12, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(12, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(12, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(12, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(12, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(12, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(12, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(12, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(12, 7) + threadIdx_x // 7) % 9 and (T.Mul(12, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(12, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(12, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(12, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(12, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(12, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(12, 7) + threadIdx_x // 7) % 9 and (T.Mul(12, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(12, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(12, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(12, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(12, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(12, 7) + threadIdx_x // 7) % 9 and (T.Mul(12, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(12, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(12, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(12, 7) + threadIdx_x // 7 < 576:
    if T.Mul(12, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(12, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(12, 7) + threadIdx_x // 7) % 9 and (T.Mul(12, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(12, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(12, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(12, 7) + threadIdx_x // 7 < 576:
        if T.Mul(12, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(12, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(12, 7) + threadIdx_x // 7) % 9 and (T.Mul(12, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(12, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(12, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
13
<class 'tvm.tir.expr.IntImm'>
T.Mul(13, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(13, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(13, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(13, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(13, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(13, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(13, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(13, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(13, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(13, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(13, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(13, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(13, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(13, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(13, 7) + threadIdx_x // 7) % 9 and (T.Mul(13, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(13, 7) + threadIdx_x // 7) % 9 and (T.Mul(13, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(13, 7) + threadIdx_x // 7) % 9 and (T.Mul(13, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(13, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(13, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(13, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(13, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(13, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(13, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(13, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(13, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(13, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(13, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(13, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(13, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(13, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(13, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(13, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(13, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(13, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(13, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(13, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(13, 7) + threadIdx_x // 7) % 9 and (T.Mul(13, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(13, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(13, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(13, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(13, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(13, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(13, 7) + threadIdx_x // 7) % 9 and (T.Mul(13, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(13, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(13, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(13, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(13, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(13, 7) + threadIdx_x // 7) % 9 and (T.Mul(13, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(13, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(13, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(13, 7) + threadIdx_x // 7 < 576:
    if T.Mul(13, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(13, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(13, 7) + threadIdx_x // 7) % 9 and (T.Mul(13, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(13, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(13, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(13, 7) + threadIdx_x // 7 < 576:
        if T.Mul(13, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(13, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(13, 7) + threadIdx_x // 7) % 9 and (T.Mul(13, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(13, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(13, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
14
<class 'tvm.tir.expr.IntImm'>
T.Mul(14, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(14, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(14, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(14, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(14, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(14, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(14, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(14, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(14, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(14, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(14, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(14, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(14, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(14, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(14, 7) + threadIdx_x // 7) % 9 and (T.Mul(14, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(14, 7) + threadIdx_x // 7) % 9 and (T.Mul(14, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(14, 7) + threadIdx_x // 7) % 9 and (T.Mul(14, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(14, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(14, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(14, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(14, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(14, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(14, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(14, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(14, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(14, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(14, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(14, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(14, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(14, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(14, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(14, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(14, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(14, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(14, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(14, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(14, 7) + threadIdx_x // 7) % 9 and (T.Mul(14, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(14, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(14, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(14, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(14, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(14, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(14, 7) + threadIdx_x // 7) % 9 and (T.Mul(14, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(14, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(14, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(14, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(14, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(14, 7) + threadIdx_x // 7) % 9 and (T.Mul(14, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(14, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(14, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(14, 7) + threadIdx_x // 7 < 576:
    if T.Mul(14, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(14, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(14, 7) + threadIdx_x // 7) % 9 and (T.Mul(14, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(14, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(14, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(14, 7) + threadIdx_x // 7 < 576:
        if T.Mul(14, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(14, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(14, 7) + threadIdx_x // 7) % 9 and (T.Mul(14, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(14, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(14, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
15
<class 'tvm.tir.expr.IntImm'>
T.Mul(15, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(15, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(15, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(15, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(15, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(15, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(15, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(15, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(15, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(15, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(15, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(15, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(15, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(15, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(15, 7) + threadIdx_x // 7) % 9 and (T.Mul(15, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(15, 7) + threadIdx_x // 7) % 9 and (T.Mul(15, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(15, 7) + threadIdx_x // 7) % 9 and (T.Mul(15, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(15, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(15, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(15, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(15, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(15, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(15, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(15, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(15, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(15, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(15, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(15, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(15, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(15, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(15, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(15, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(15, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(15, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(15, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(15, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(15, 7) + threadIdx_x // 7) % 9 and (T.Mul(15, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(15, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(15, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(15, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(15, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(15, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(15, 7) + threadIdx_x // 7) % 9 and (T.Mul(15, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(15, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(15, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(15, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(15, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(15, 7) + threadIdx_x // 7) % 9 and (T.Mul(15, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(15, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(15, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(15, 7) + threadIdx_x // 7 < 576:
    if T.Mul(15, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(15, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(15, 7) + threadIdx_x // 7) % 9 and (T.Mul(15, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(15, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(15, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(15, 7) + threadIdx_x // 7 < 576:
        if T.Mul(15, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(15, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(15, 7) + threadIdx_x // 7) % 9 and (T.Mul(15, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(15, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(15, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
16
<class 'tvm.tir.expr.IntImm'>
T.Mul(16, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(16, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(16, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(16, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(16, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(16, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(16, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(16, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(16, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(16, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(16, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(16, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(16, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(16, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(16, 7) + threadIdx_x // 7) % 9 and (T.Mul(16, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(16, 7) + threadIdx_x // 7) % 9 and (T.Mul(16, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(16, 7) + threadIdx_x // 7) % 9 and (T.Mul(16, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(16, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(16, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(16, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(16, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(16, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(16, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(16, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(16, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(16, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(16, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(16, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(16, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(16, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(16, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(16, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(16, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(16, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(16, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(16, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(16, 7) + threadIdx_x // 7) % 9 and (T.Mul(16, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(16, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(16, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(16, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(16, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(16, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(16, 7) + threadIdx_x // 7) % 9 and (T.Mul(16, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(16, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(16, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(16, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(16, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(16, 7) + threadIdx_x // 7) % 9 and (T.Mul(16, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(16, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(16, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(16, 7) + threadIdx_x // 7 < 576:
    if T.Mul(16, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(16, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(16, 7) + threadIdx_x // 7) % 9 and (T.Mul(16, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(16, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(16, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(16, 7) + threadIdx_x // 7 < 576:
        if T.Mul(16, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(16, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(16, 7) + threadIdx_x // 7) % 9 and (T.Mul(16, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(16, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(16, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
17
<class 'tvm.tir.expr.IntImm'>
T.Mul(17, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(17, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(17, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(17, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(17, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(17, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(17, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(17, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(17, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(17, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(17, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(17, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(17, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(17, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(17, 7) + threadIdx_x // 7) % 9 and (T.Mul(17, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(17, 7) + threadIdx_x // 7) % 9 and (T.Mul(17, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(17, 7) + threadIdx_x // 7) % 9 and (T.Mul(17, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(17, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(17, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(17, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(17, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(17, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(17, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(17, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(17, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(17, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(17, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(17, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(17, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(17, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(17, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(17, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(17, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(17, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(17, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(17, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(17, 7) + threadIdx_x // 7) % 9 and (T.Mul(17, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(17, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(17, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(17, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(17, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(17, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(17, 7) + threadIdx_x // 7) % 9 and (T.Mul(17, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(17, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(17, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(17, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(17, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(17, 7) + threadIdx_x // 7) % 9 and (T.Mul(17, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(17, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(17, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(17, 7) + threadIdx_x // 7 < 576:
    if T.Mul(17, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(17, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(17, 7) + threadIdx_x // 7) % 9 and (T.Mul(17, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(17, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(17, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(17, 7) + threadIdx_x // 7 < 576:
        if T.Mul(17, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(17, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(17, 7) + threadIdx_x // 7) % 9 and (T.Mul(17, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(17, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(17, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
18
<class 'tvm.tir.expr.IntImm'>
T.Mul(18, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(18, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(18, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(18, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(18, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(18, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(18, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(18, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(18, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(18, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(18, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(18, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(18, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(18, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(18, 7) + threadIdx_x // 7) % 9 and (T.Mul(18, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(18, 7) + threadIdx_x // 7) % 9 and (T.Mul(18, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(18, 7) + threadIdx_x // 7) % 9 and (T.Mul(18, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(18, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(18, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(18, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(18, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(18, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(18, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(18, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(18, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(18, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(18, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(18, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(18, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(18, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(18, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(18, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(18, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(18, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(18, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(18, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(18, 7) + threadIdx_x // 7) % 9 and (T.Mul(18, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(18, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(18, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(18, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(18, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(18, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(18, 7) + threadIdx_x // 7) % 9 and (T.Mul(18, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(18, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(18, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(18, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(18, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(18, 7) + threadIdx_x // 7) % 9 and (T.Mul(18, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(18, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(18, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(18, 7) + threadIdx_x // 7 < 576:
    if T.Mul(18, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(18, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(18, 7) + threadIdx_x // 7) % 9 and (T.Mul(18, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(18, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(18, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(18, 7) + threadIdx_x // 7 < 576:
        if T.Mul(18, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(18, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(18, 7) + threadIdx_x // 7) % 9 and (T.Mul(18, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(18, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(18, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
19
<class 'tvm.tir.expr.IntImm'>
T.Mul(19, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(19, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(19, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(19, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(19, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(19, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(19, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(19, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(19, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(19, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(19, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(19, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(19, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(19, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(19, 7) + threadIdx_x // 7) % 9 and (T.Mul(19, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(19, 7) + threadIdx_x // 7) % 9 and (T.Mul(19, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(19, 7) + threadIdx_x // 7) % 9 and (T.Mul(19, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(19, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(19, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(19, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(19, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(19, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(19, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(19, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(19, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(19, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(19, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(19, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(19, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(19, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(19, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(19, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(19, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(19, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(19, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(19, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(19, 7) + threadIdx_x // 7) % 9 and (T.Mul(19, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(19, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(19, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(19, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(19, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(19, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(19, 7) + threadIdx_x // 7) % 9 and (T.Mul(19, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(19, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(19, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(19, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(19, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(19, 7) + threadIdx_x // 7) % 9 and (T.Mul(19, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(19, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(19, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(19, 7) + threadIdx_x // 7 < 576:
    if T.Mul(19, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(19, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(19, 7) + threadIdx_x // 7) % 9 and (T.Mul(19, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(19, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(19, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(19, 7) + threadIdx_x // 7 < 576:
        if T.Mul(19, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(19, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(19, 7) + threadIdx_x // 7) % 9 and (T.Mul(19, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(19, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(19, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
20
<class 'tvm.tir.expr.IntImm'>
T.Mul(20, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(20, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(20, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(20, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(20, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(20, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(20, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(20, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(20, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(20, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(20, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(20, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(20, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(20, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(20, 7) + threadIdx_x // 7) % 9 and (T.Mul(20, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(20, 7) + threadIdx_x // 7) % 9 and (T.Mul(20, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(20, 7) + threadIdx_x // 7) % 9 and (T.Mul(20, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(20, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(20, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(20, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(20, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(20, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(20, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(20, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(20, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(20, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(20, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(20, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(20, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(20, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(20, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(20, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(20, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(20, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(20, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(20, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(20, 7) + threadIdx_x // 7) % 9 and (T.Mul(20, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(20, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(20, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(20, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(20, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(20, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(20, 7) + threadIdx_x // 7) % 9 and (T.Mul(20, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(20, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(20, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(20, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(20, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(20, 7) + threadIdx_x // 7) % 9 and (T.Mul(20, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(20, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(20, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(20, 7) + threadIdx_x // 7 < 576:
    if T.Mul(20, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(20, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(20, 7) + threadIdx_x // 7) % 9 and (T.Mul(20, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(20, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(20, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(20, 7) + threadIdx_x // 7 < 576:
        if T.Mul(20, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(20, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(20, 7) + threadIdx_x // 7) % 9 and (T.Mul(20, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(20, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(20, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
21
<class 'tvm.tir.expr.IntImm'>
T.Mul(21, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(21, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(21, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(21, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(21, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(21, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(21, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(21, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(21, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(21, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(21, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(21, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(21, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(21, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(21, 7) + threadIdx_x // 7) % 9 and (T.Mul(21, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(21, 7) + threadIdx_x // 7) % 9 and (T.Mul(21, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(21, 7) + threadIdx_x // 7) % 9 and (T.Mul(21, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(21, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(21, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(21, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(21, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(21, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(21, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(21, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(21, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(21, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(21, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(21, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(21, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(21, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(21, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(21, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(21, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(21, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(21, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(21, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(21, 7) + threadIdx_x // 7) % 9 and (T.Mul(21, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(21, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(21, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(21, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(21, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(21, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(21, 7) + threadIdx_x // 7) % 9 and (T.Mul(21, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(21, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(21, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(21, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(21, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(21, 7) + threadIdx_x // 7) % 9 and (T.Mul(21, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(21, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(21, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(21, 7) + threadIdx_x // 7 < 576:
    if T.Mul(21, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(21, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(21, 7) + threadIdx_x // 7) % 9 and (T.Mul(21, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(21, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(21, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(21, 7) + threadIdx_x // 7 < 576:
        if T.Mul(21, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(21, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(21, 7) + threadIdx_x // 7) % 9 and (T.Mul(21, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(21, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(21, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
22
<class 'tvm.tir.expr.IntImm'>
T.Mul(22, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(22, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(22, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(22, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(22, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(22, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(22, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(22, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(22, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(22, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(22, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(22, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(22, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(22, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(22, 7) + threadIdx_x // 7) % 9 and (T.Mul(22, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(22, 7) + threadIdx_x // 7) % 9 and (T.Mul(22, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(22, 7) + threadIdx_x // 7) % 9 and (T.Mul(22, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(22, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(22, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(22, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(22, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(22, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(22, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(22, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(22, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(22, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(22, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(22, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(22, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(22, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(22, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(22, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(22, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(22, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(22, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(22, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(22, 7) + threadIdx_x // 7) % 9 and (T.Mul(22, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(22, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(22, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(22, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(22, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(22, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(22, 7) + threadIdx_x // 7) % 9 and (T.Mul(22, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(22, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(22, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(22, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(22, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(22, 7) + threadIdx_x // 7) % 9 and (T.Mul(22, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(22, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(22, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(22, 7) + threadIdx_x // 7 < 576:
    if T.Mul(22, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(22, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(22, 7) + threadIdx_x // 7) % 9 and (T.Mul(22, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(22, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(22, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(22, 7) + threadIdx_x // 7 < 576:
        if T.Mul(22, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(22, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(22, 7) + threadIdx_x // 7) % 9 and (T.Mul(22, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(22, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(22, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
23
<class 'tvm.tir.expr.IntImm'>
T.Mul(23, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(23, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(23, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(23, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(23, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(23, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(23, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(23, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(23, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(23, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(23, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(23, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(23, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(23, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(23, 7) + threadIdx_x // 7) % 9 and (T.Mul(23, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(23, 7) + threadIdx_x // 7) % 9 and (T.Mul(23, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(23, 7) + threadIdx_x // 7) % 9 and (T.Mul(23, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(23, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(23, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(23, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(23, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(23, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(23, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(23, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(23, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(23, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(23, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(23, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(23, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(23, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(23, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(23, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(23, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(23, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(23, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(23, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(23, 7) + threadIdx_x // 7) % 9 and (T.Mul(23, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(23, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(23, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(23, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(23, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(23, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(23, 7) + threadIdx_x // 7) % 9 and (T.Mul(23, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(23, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(23, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(23, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(23, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(23, 7) + threadIdx_x // 7) % 9 and (T.Mul(23, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(23, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(23, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(23, 7) + threadIdx_x // 7 < 576:
    if T.Mul(23, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(23, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(23, 7) + threadIdx_x // 7) % 9 and (T.Mul(23, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(23, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(23, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(23, 7) + threadIdx_x // 7 < 576:
        if T.Mul(23, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(23, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(23, 7) + threadIdx_x // 7) % 9 and (T.Mul(23, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(23, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(23, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
24
<class 'tvm.tir.expr.IntImm'>
T.Mul(24, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(24, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(24, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(24, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(24, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(24, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(24, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(24, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(24, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(24, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(24, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(24, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(24, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(24, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(24, 7) + threadIdx_x // 7) % 9 and (T.Mul(24, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(24, 7) + threadIdx_x // 7) % 9 and (T.Mul(24, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(24, 7) + threadIdx_x // 7) % 9 and (T.Mul(24, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(24, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(24, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(24, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(24, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(24, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(24, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(24, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(24, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(24, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(24, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(24, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(24, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(24, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(24, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(24, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(24, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(24, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(24, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(24, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(24, 7) + threadIdx_x // 7) % 9 and (T.Mul(24, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(24, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(24, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(24, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(24, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(24, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(24, 7) + threadIdx_x // 7) % 9 and (T.Mul(24, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(24, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(24, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(24, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(24, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(24, 7) + threadIdx_x // 7) % 9 and (T.Mul(24, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(24, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(24, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(24, 7) + threadIdx_x // 7 < 576:
    if T.Mul(24, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(24, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(24, 7) + threadIdx_x // 7) % 9 and (T.Mul(24, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(24, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(24, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(24, 7) + threadIdx_x // 7 < 576:
        if T.Mul(24, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(24, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(24, 7) + threadIdx_x // 7) % 9 and (T.Mul(24, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(24, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(24, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
25
<class 'tvm.tir.expr.IntImm'>
T.Mul(25, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(25, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(25, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(25, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(25, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(25, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(25, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(25, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(25, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(25, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(25, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(25, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(25, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(25, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(25, 7) + threadIdx_x // 7) % 9 and (T.Mul(25, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(25, 7) + threadIdx_x // 7) % 9 and (T.Mul(25, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(25, 7) + threadIdx_x // 7) % 9 and (T.Mul(25, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(25, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(25, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(25, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(25, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(25, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(25, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(25, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(25, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(25, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(25, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(25, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(25, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(25, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(25, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(25, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(25, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(25, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(25, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(25, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(25, 7) + threadIdx_x // 7) % 9 and (T.Mul(25, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(25, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(25, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(25, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(25, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(25, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(25, 7) + threadIdx_x // 7) % 9 and (T.Mul(25, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(25, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(25, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(25, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(25, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(25, 7) + threadIdx_x // 7) % 9 and (T.Mul(25, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(25, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(25, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(25, 7) + threadIdx_x // 7 < 576:
    if T.Mul(25, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(25, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(25, 7) + threadIdx_x // 7) % 9 and (T.Mul(25, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(25, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(25, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(25, 7) + threadIdx_x // 7 < 576:
        if T.Mul(25, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(25, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(25, 7) + threadIdx_x // 7) % 9 and (T.Mul(25, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(25, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(25, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
26
<class 'tvm.tir.expr.IntImm'>
T.Mul(26, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(26, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(26, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(26, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(26, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(26, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(26, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(26, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(26, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(26, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(26, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(26, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(26, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(26, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(26, 7) + threadIdx_x // 7) % 9 and (T.Mul(26, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(26, 7) + threadIdx_x // 7) % 9 and (T.Mul(26, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(26, 7) + threadIdx_x // 7) % 9 and (T.Mul(26, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(26, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(26, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(26, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(26, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(26, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(26, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(26, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(26, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(26, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(26, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(26, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(26, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(26, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(26, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(26, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(26, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(26, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(26, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(26, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(26, 7) + threadIdx_x // 7) % 9 and (T.Mul(26, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(26, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(26, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(26, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(26, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(26, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(26, 7) + threadIdx_x // 7) % 9 and (T.Mul(26, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(26, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(26, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(26, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(26, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(26, 7) + threadIdx_x // 7) % 9 and (T.Mul(26, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(26, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(26, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(26, 7) + threadIdx_x // 7 < 576:
    if T.Mul(26, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(26, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(26, 7) + threadIdx_x // 7) % 9 and (T.Mul(26, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(26, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(26, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(26, 7) + threadIdx_x // 7 < 576:
        if T.Mul(26, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(26, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(26, 7) + threadIdx_x // 7) % 9 and (T.Mul(26, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(26, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(26, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
27
<class 'tvm.tir.expr.IntImm'>
T.Mul(27, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(27, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(27, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(27, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(27, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(27, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(27, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(27, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(27, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(27, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(27, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(27, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(27, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(27, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(27, 7) + threadIdx_x // 7) % 9 and (T.Mul(27, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(27, 7) + threadIdx_x // 7) % 9 and (T.Mul(27, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(27, 7) + threadIdx_x // 7) % 9 and (T.Mul(27, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(27, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(27, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(27, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(27, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(27, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(27, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(27, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(27, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(27, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(27, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(27, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(27, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(27, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(27, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(27, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(27, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(27, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(27, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(27, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(27, 7) + threadIdx_x // 7) % 9 and (T.Mul(27, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(27, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(27, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(27, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(27, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(27, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(27, 7) + threadIdx_x // 7) % 9 and (T.Mul(27, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(27, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(27, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(27, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(27, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(27, 7) + threadIdx_x // 7) % 9 and (T.Mul(27, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(27, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(27, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(27, 7) + threadIdx_x // 7 < 576:
    if T.Mul(27, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(27, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(27, 7) + threadIdx_x // 7) % 9 and (T.Mul(27, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(27, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(27, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(27, 7) + threadIdx_x // 7 < 576:
        if T.Mul(27, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(27, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(27, 7) + threadIdx_x // 7) % 9 and (T.Mul(27, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(27, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(27, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
28
<class 'tvm.tir.expr.IntImm'>
T.Mul(28, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(28, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(28, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(28, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(28, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(28, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(28, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(28, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(28, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(28, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(28, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(28, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(28, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(28, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(28, 7) + threadIdx_x // 7) % 9 and (T.Mul(28, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(28, 7) + threadIdx_x // 7) % 9 and (T.Mul(28, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(28, 7) + threadIdx_x // 7) % 9 and (T.Mul(28, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(28, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(28, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(28, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(28, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(28, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(28, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(28, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(28, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(28, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(28, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(28, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(28, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(28, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(28, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(28, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(28, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(28, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(28, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(28, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(28, 7) + threadIdx_x // 7) % 9 and (T.Mul(28, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(28, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(28, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(28, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(28, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(28, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(28, 7) + threadIdx_x // 7) % 9 and (T.Mul(28, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(28, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(28, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(28, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(28, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(28, 7) + threadIdx_x // 7) % 9 and (T.Mul(28, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(28, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(28, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(28, 7) + threadIdx_x // 7 < 576:
    if T.Mul(28, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(28, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(28, 7) + threadIdx_x // 7) % 9 and (T.Mul(28, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(28, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(28, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(28, 7) + threadIdx_x // 7 < 576:
        if T.Mul(28, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(28, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(28, 7) + threadIdx_x // 7) % 9 and (T.Mul(28, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(28, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(28, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
29
<class 'tvm.tir.expr.IntImm'>
T.Mul(29, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(29, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(29, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(29, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(29, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(29, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(29, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(29, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(29, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(29, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(29, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(29, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(29, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(29, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(29, 7) + threadIdx_x // 7) % 9 and (T.Mul(29, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(29, 7) + threadIdx_x // 7) % 9 and (T.Mul(29, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(29, 7) + threadIdx_x // 7) % 9 and (T.Mul(29, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(29, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(29, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(29, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(29, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(29, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(29, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(29, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(29, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(29, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(29, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(29, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(29, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(29, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(29, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(29, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(29, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(29, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(29, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(29, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(29, 7) + threadIdx_x // 7) % 9 and (T.Mul(29, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(29, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(29, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(29, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(29, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(29, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(29, 7) + threadIdx_x // 7) % 9 and (T.Mul(29, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(29, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(29, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(29, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(29, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(29, 7) + threadIdx_x // 7) % 9 and (T.Mul(29, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(29, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(29, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(29, 7) + threadIdx_x // 7 < 576:
    if T.Mul(29, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(29, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(29, 7) + threadIdx_x // 7) % 9 and (T.Mul(29, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(29, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(29, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(29, 7) + threadIdx_x // 7 < 576:
        if T.Mul(29, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(29, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(29, 7) + threadIdx_x // 7) % 9 and (T.Mul(29, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(29, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(29, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
30
<class 'tvm.tir.expr.IntImm'>
T.Mul(30, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(30, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(30, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(30, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(30, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(30, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(30, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(30, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(30, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(30, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(30, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(30, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(30, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(30, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(30, 7) + threadIdx_x // 7) % 9 and (T.Mul(30, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(30, 7) + threadIdx_x // 7) % 9 and (T.Mul(30, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(30, 7) + threadIdx_x // 7) % 9 and (T.Mul(30, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(30, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(30, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(30, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(30, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(30, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(30, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(30, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(30, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(30, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(30, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(30, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(30, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(30, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(30, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(30, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(30, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(30, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(30, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(30, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(30, 7) + threadIdx_x // 7) % 9 and (T.Mul(30, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(30, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(30, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(30, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(30, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(30, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(30, 7) + threadIdx_x // 7) % 9 and (T.Mul(30, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(30, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(30, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(30, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(30, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(30, 7) + threadIdx_x // 7) % 9 and (T.Mul(30, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(30, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(30, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(30, 7) + threadIdx_x // 7 < 576:
    if T.Mul(30, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(30, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(30, 7) + threadIdx_x // 7) % 9 and (T.Mul(30, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(30, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(30, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(30, 7) + threadIdx_x // 7 < 576:
        if T.Mul(30, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(30, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(30, 7) + threadIdx_x // 7) % 9 and (T.Mul(30, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(30, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(30, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
31
<class 'tvm.tir.expr.IntImm'>
T.Mul(31, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(31, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(31, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(31, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(31, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(31, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(31, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(31, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(31, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(31, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(31, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(31, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(31, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(31, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(31, 7) + threadIdx_x // 7) % 9 and (T.Mul(31, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(31, 7) + threadIdx_x // 7) % 9 and (T.Mul(31, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(31, 7) + threadIdx_x // 7) % 9 and (T.Mul(31, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(31, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(31, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(31, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(31, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(31, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(31, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(31, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(31, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(31, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(31, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(31, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(31, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(31, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(31, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(31, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(31, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(31, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(31, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(31, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(31, 7) + threadIdx_x // 7) % 9 and (T.Mul(31, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(31, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(31, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(31, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(31, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(31, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(31, 7) + threadIdx_x // 7) % 9 and (T.Mul(31, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(31, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(31, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(31, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(31, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(31, 7) + threadIdx_x // 7) % 9 and (T.Mul(31, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(31, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(31, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(31, 7) + threadIdx_x // 7 < 576:
    if T.Mul(31, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(31, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(31, 7) + threadIdx_x // 7) % 9 and (T.Mul(31, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(31, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(31, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(31, 7) + threadIdx_x // 7 < 576:
        if T.Mul(31, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(31, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(31, 7) + threadIdx_x // 7) % 9 and (T.Mul(31, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(31, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(31, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
32
<class 'tvm.tir.expr.IntImm'>
T.Mul(32, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(32, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(32, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(32, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(32, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(32, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(32, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(32, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(32, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(32, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(32, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(32, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(32, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(32, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(32, 7) + threadIdx_x // 7) % 9 and (T.Mul(32, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(32, 7) + threadIdx_x // 7) % 9 and (T.Mul(32, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(32, 7) + threadIdx_x // 7) % 9 and (T.Mul(32, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(32, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(32, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(32, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(32, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(32, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(32, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(32, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(32, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(32, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(32, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(32, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(32, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(32, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(32, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(32, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(32, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(32, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(32, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(32, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(32, 7) + threadIdx_x // 7) % 9 and (T.Mul(32, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(32, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(32, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(32, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(32, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(32, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(32, 7) + threadIdx_x // 7) % 9 and (T.Mul(32, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(32, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(32, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(32, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(32, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(32, 7) + threadIdx_x // 7) % 9 and (T.Mul(32, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(32, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(32, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(32, 7) + threadIdx_x // 7 < 576:
    if T.Mul(32, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(32, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(32, 7) + threadIdx_x // 7) % 9 and (T.Mul(32, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(32, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(32, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(32, 7) + threadIdx_x // 7 < 576:
        if T.Mul(32, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(32, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(32, 7) + threadIdx_x // 7) % 9 and (T.Mul(32, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(32, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(32, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
33
<class 'tvm.tir.expr.IntImm'>
T.Mul(33, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(33, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(33, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(33, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(33, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(33, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(33, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(33, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(33, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(33, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(33, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(33, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(33, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(33, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(33, 7) + threadIdx_x // 7) % 9 and (T.Mul(33, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(33, 7) + threadIdx_x // 7) % 9 and (T.Mul(33, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(33, 7) + threadIdx_x // 7) % 9 and (T.Mul(33, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(33, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(33, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(33, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(33, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(33, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(33, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(33, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(33, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(33, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(33, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(33, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(33, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(33, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(33, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(33, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(33, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(33, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(33, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(33, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(33, 7) + threadIdx_x // 7) % 9 and (T.Mul(33, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(33, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(33, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(33, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(33, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(33, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(33, 7) + threadIdx_x // 7) % 9 and (T.Mul(33, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(33, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(33, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(33, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(33, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(33, 7) + threadIdx_x // 7) % 9 and (T.Mul(33, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(33, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(33, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(33, 7) + threadIdx_x // 7 < 576:
    if T.Mul(33, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(33, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(33, 7) + threadIdx_x // 7) % 9 and (T.Mul(33, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(33, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(33, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(33, 7) + threadIdx_x // 7 < 576:
        if T.Mul(33, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(33, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(33, 7) + threadIdx_x // 7) % 9 and (T.Mul(33, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(33, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(33, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
34
<class 'tvm.tir.expr.IntImm'>
T.Mul(34, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(34, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(34, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(34, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(34, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(34, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(34, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(34, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(34, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(34, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(34, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(34, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(34, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(34, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(34, 7) + threadIdx_x // 7) % 9 and (T.Mul(34, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(34, 7) + threadIdx_x // 7) % 9 and (T.Mul(34, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(34, 7) + threadIdx_x // 7) % 9 and (T.Mul(34, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(34, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(34, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(34, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(34, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(34, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(34, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(34, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(34, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(34, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(34, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(34, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(34, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(34, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(34, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(34, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(34, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(34, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(34, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(34, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(34, 7) + threadIdx_x // 7) % 9 and (T.Mul(34, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(34, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(34, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(34, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(34, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(34, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(34, 7) + threadIdx_x // 7) % 9 and (T.Mul(34, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(34, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(34, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(34, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(34, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(34, 7) + threadIdx_x // 7) % 9 and (T.Mul(34, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(34, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(34, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(34, 7) + threadIdx_x // 7 < 576:
    if T.Mul(34, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(34, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(34, 7) + threadIdx_x // 7) % 9 and (T.Mul(34, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(34, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(34, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(34, 7) + threadIdx_x // 7 < 576:
        if T.Mul(34, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(34, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(34, 7) + threadIdx_x // 7) % 9 and (T.Mul(34, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(34, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(34, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
35
<class 'tvm.tir.expr.IntImm'>
T.Mul(35, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(35, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(35, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(35, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(35, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(35, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(35, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(35, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(35, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(35, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(35, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(35, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(35, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(35, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(35, 7) + threadIdx_x // 7) % 9 and (T.Mul(35, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(35, 7) + threadIdx_x // 7) % 9 and (T.Mul(35, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(35, 7) + threadIdx_x // 7) % 9 and (T.Mul(35, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(35, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(35, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(35, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(35, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(35, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(35, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(35, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(35, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(35, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(35, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(35, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(35, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(35, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(35, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(35, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(35, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(35, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(35, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(35, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(35, 7) + threadIdx_x // 7) % 9 and (T.Mul(35, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(35, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(35, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(35, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(35, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(35, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(35, 7) + threadIdx_x // 7) % 9 and (T.Mul(35, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(35, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(35, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(35, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(35, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(35, 7) + threadIdx_x // 7) % 9 and (T.Mul(35, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(35, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(35, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(35, 7) + threadIdx_x // 7 < 576:
    if T.Mul(35, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(35, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(35, 7) + threadIdx_x // 7) % 9 and (T.Mul(35, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(35, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(35, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(35, 7) + threadIdx_x // 7 < 576:
        if T.Mul(35, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(35, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(35, 7) + threadIdx_x // 7) % 9 and (T.Mul(35, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(35, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(35, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
36
<class 'tvm.tir.expr.IntImm'>
T.Mul(36, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(36, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(36, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(36, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(36, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(36, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(36, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(36, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(36, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(36, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(36, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(36, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(36, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(36, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(36, 7) + threadIdx_x // 7) % 9 and (T.Mul(36, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(36, 7) + threadIdx_x // 7) % 9 and (T.Mul(36, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(36, 7) + threadIdx_x // 7) % 9 and (T.Mul(36, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(36, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(36, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(36, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(36, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(36, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(36, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(36, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(36, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(36, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(36, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(36, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(36, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(36, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(36, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(36, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(36, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(36, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(36, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(36, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(36, 7) + threadIdx_x // 7) % 9 and (T.Mul(36, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(36, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(36, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(36, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(36, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(36, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(36, 7) + threadIdx_x // 7) % 9 and (T.Mul(36, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(36, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(36, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(36, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(36, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(36, 7) + threadIdx_x // 7) % 9 and (T.Mul(36, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(36, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(36, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(36, 7) + threadIdx_x // 7 < 576:
    if T.Mul(36, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(36, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(36, 7) + threadIdx_x // 7) % 9 and (T.Mul(36, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(36, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(36, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(36, 7) + threadIdx_x // 7 < 576:
        if T.Mul(36, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(36, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(36, 7) + threadIdx_x // 7) % 9 and (T.Mul(36, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(36, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(36, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
37
<class 'tvm.tir.expr.IntImm'>
T.Mul(37, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(37, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(37, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(37, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(37, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(37, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(37, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(37, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(37, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(37, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(37, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(37, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(37, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(37, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(37, 7) + threadIdx_x // 7) % 9 and (T.Mul(37, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(37, 7) + threadIdx_x // 7) % 9 and (T.Mul(37, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(37, 7) + threadIdx_x // 7) % 9 and (T.Mul(37, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(37, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(37, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(37, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(37, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(37, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(37, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(37, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(37, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(37, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(37, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(37, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(37, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(37, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(37, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(37, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(37, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(37, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(37, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(37, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(37, 7) + threadIdx_x // 7) % 9 and (T.Mul(37, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(37, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(37, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(37, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(37, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(37, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(37, 7) + threadIdx_x // 7) % 9 and (T.Mul(37, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(37, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(37, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(37, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(37, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(37, 7) + threadIdx_x // 7) % 9 and (T.Mul(37, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(37, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(37, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(37, 7) + threadIdx_x // 7 < 576:
    if T.Mul(37, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(37, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(37, 7) + threadIdx_x // 7) % 9 and (T.Mul(37, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(37, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(37, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(37, 7) + threadIdx_x // 7 < 576:
        if T.Mul(37, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(37, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(37, 7) + threadIdx_x // 7) % 9 and (T.Mul(37, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(37, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(37, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
38
<class 'tvm.tir.expr.IntImm'>
T.Mul(38, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(38, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(38, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(38, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(38, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(38, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(38, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(38, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(38, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(38, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(38, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(38, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(38, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(38, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(38, 7) + threadIdx_x // 7) % 9 and (T.Mul(38, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(38, 7) + threadIdx_x // 7) % 9 and (T.Mul(38, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(38, 7) + threadIdx_x // 7) % 9 and (T.Mul(38, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(38, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(38, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(38, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(38, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(38, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(38, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(38, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(38, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(38, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(38, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(38, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(38, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(38, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(38, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(38, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(38, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(38, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(38, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(38, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(38, 7) + threadIdx_x // 7) % 9 and (T.Mul(38, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(38, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(38, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(38, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(38, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(38, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(38, 7) + threadIdx_x // 7) % 9 and (T.Mul(38, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(38, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(38, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(38, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(38, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(38, 7) + threadIdx_x // 7) % 9 and (T.Mul(38, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(38, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(38, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(38, 7) + threadIdx_x // 7 < 576:
    if T.Mul(38, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(38, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(38, 7) + threadIdx_x // 7) % 9 and (T.Mul(38, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(38, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(38, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(38, 7) + threadIdx_x // 7 < 576:
        if T.Mul(38, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(38, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(38, 7) + threadIdx_x // 7) % 9 and (T.Mul(38, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(38, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(38, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
39
<class 'tvm.tir.expr.IntImm'>
T.Mul(39, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(39, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(39, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(39, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(39, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(39, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(39, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(39, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(39, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(39, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(39, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(39, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(39, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(39, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(39, 7) + threadIdx_x // 7) % 9 and (T.Mul(39, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(39, 7) + threadIdx_x // 7) % 9 and (T.Mul(39, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(39, 7) + threadIdx_x // 7) % 9 and (T.Mul(39, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(39, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(39, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(39, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(39, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(39, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(39, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(39, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(39, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(39, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(39, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(39, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(39, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(39, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(39, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(39, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(39, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(39, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(39, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(39, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(39, 7) + threadIdx_x // 7) % 9 and (T.Mul(39, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(39, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(39, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(39, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(39, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(39, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(39, 7) + threadIdx_x // 7) % 9 and (T.Mul(39, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(39, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(39, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(39, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(39, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(39, 7) + threadIdx_x // 7) % 9 and (T.Mul(39, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(39, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(39, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(39, 7) + threadIdx_x // 7 < 576:
    if T.Mul(39, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(39, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(39, 7) + threadIdx_x // 7) % 9 and (T.Mul(39, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(39, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(39, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(39, 7) + threadIdx_x // 7 < 576:
        if T.Mul(39, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(39, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(39, 7) + threadIdx_x // 7) % 9 and (T.Mul(39, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(39, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(39, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
40
<class 'tvm.tir.expr.IntImm'>
T.Mul(40, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(40, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(40, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(40, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(40, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(40, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(40, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(40, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(40, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(40, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(40, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(40, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(40, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(40, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(40, 7) + threadIdx_x // 7) % 9 and (T.Mul(40, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(40, 7) + threadIdx_x // 7) % 9 and (T.Mul(40, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(40, 7) + threadIdx_x // 7) % 9 and (T.Mul(40, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(40, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(40, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(40, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(40, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(40, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(40, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(40, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(40, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(40, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(40, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(40, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(40, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(40, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(40, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(40, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(40, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(40, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(40, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(40, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(40, 7) + threadIdx_x // 7) % 9 and (T.Mul(40, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(40, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(40, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(40, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(40, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(40, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(40, 7) + threadIdx_x // 7) % 9 and (T.Mul(40, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(40, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(40, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(40, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(40, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(40, 7) + threadIdx_x // 7) % 9 and (T.Mul(40, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(40, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(40, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(40, 7) + threadIdx_x // 7 < 576:
    if T.Mul(40, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(40, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(40, 7) + threadIdx_x // 7) % 9 and (T.Mul(40, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(40, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(40, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(40, 7) + threadIdx_x // 7 < 576:
        if T.Mul(40, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(40, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(40, 7) + threadIdx_x // 7) % 9 and (T.Mul(40, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(40, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(40, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
41
<class 'tvm.tir.expr.IntImm'>
T.Mul(41, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(41, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(41, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(41, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(41, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(41, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(41, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(41, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(41, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(41, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(41, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(41, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(41, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(41, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(41, 7) + threadIdx_x // 7) % 9 and (T.Mul(41, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(41, 7) + threadIdx_x // 7) % 9 and (T.Mul(41, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(41, 7) + threadIdx_x // 7) % 9 and (T.Mul(41, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(41, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(41, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(41, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(41, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(41, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(41, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(41, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(41, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(41, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(41, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(41, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(41, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(41, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(41, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(41, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(41, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(41, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(41, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(41, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(41, 7) + threadIdx_x // 7) % 9 and (T.Mul(41, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(41, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(41, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(41, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(41, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(41, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(41, 7) + threadIdx_x // 7) % 9 and (T.Mul(41, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(41, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(41, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(41, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(41, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(41, 7) + threadIdx_x // 7) % 9 and (T.Mul(41, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(41, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(41, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(41, 7) + threadIdx_x // 7 < 576:
    if T.Mul(41, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(41, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(41, 7) + threadIdx_x // 7) % 9 and (T.Mul(41, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(41, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(41, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(41, 7) + threadIdx_x // 7 < 576:
        if T.Mul(41, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(41, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(41, 7) + threadIdx_x // 7) % 9 and (T.Mul(41, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(41, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(41, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
42
<class 'tvm.tir.expr.IntImm'>
T.Mul(42, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(42, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(42, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(42, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(42, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(42, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(42, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(42, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(42, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(42, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(42, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(42, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(42, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(42, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(42, 7) + threadIdx_x // 7) % 9 and (T.Mul(42, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(42, 7) + threadIdx_x // 7) % 9 and (T.Mul(42, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(42, 7) + threadIdx_x // 7) % 9 and (T.Mul(42, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(42, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(42, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(42, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(42, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(42, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(42, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(42, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(42, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(42, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(42, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(42, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(42, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(42, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(42, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(42, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(42, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(42, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(42, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(42, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(42, 7) + threadIdx_x // 7) % 9 and (T.Mul(42, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(42, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(42, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(42, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(42, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(42, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(42, 7) + threadIdx_x // 7) % 9 and (T.Mul(42, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(42, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(42, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(42, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(42, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(42, 7) + threadIdx_x // 7) % 9 and (T.Mul(42, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(42, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(42, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(42, 7) + threadIdx_x // 7 < 576:
    if T.Mul(42, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(42, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(42, 7) + threadIdx_x // 7) % 9 and (T.Mul(42, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(42, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(42, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(42, 7) + threadIdx_x // 7 < 576:
        if T.Mul(42, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(42, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(42, 7) + threadIdx_x // 7) % 9 and (T.Mul(42, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(42, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(42, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
43
<class 'tvm.tir.expr.IntImm'>
T.Mul(43, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(43, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(43, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(43, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(43, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(43, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(43, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(43, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(43, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(43, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(43, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(43, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(43, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(43, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(43, 7) + threadIdx_x // 7) % 9 and (T.Mul(43, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(43, 7) + threadIdx_x // 7) % 9 and (T.Mul(43, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(43, 7) + threadIdx_x // 7) % 9 and (T.Mul(43, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(43, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(43, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(43, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(43, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(43, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(43, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(43, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(43, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(43, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(43, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(43, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(43, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(43, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(43, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(43, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(43, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(43, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(43, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(43, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(43, 7) + threadIdx_x // 7) % 9 and (T.Mul(43, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(43, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(43, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(43, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(43, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(43, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(43, 7) + threadIdx_x // 7) % 9 and (T.Mul(43, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(43, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(43, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(43, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(43, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(43, 7) + threadIdx_x // 7) % 9 and (T.Mul(43, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(43, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(43, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(43, 7) + threadIdx_x // 7 < 576:
    if T.Mul(43, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(43, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(43, 7) + threadIdx_x // 7) % 9 and (T.Mul(43, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(43, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(43, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(43, 7) + threadIdx_x // 7 < 576:
        if T.Mul(43, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(43, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(43, 7) + threadIdx_x // 7) % 9 and (T.Mul(43, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(43, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(43, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
44
<class 'tvm.tir.expr.IntImm'>
T.Mul(44, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(44, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(44, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(44, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(44, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(44, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(44, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(44, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(44, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(44, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(44, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(44, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(44, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(44, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(44, 7) + threadIdx_x // 7) % 9 and (T.Mul(44, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(44, 7) + threadIdx_x // 7) % 9 and (T.Mul(44, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(44, 7) + threadIdx_x // 7) % 9 and (T.Mul(44, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(44, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(44, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(44, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(44, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(44, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(44, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(44, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(44, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(44, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(44, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(44, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(44, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(44, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(44, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(44, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(44, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(44, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(44, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(44, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(44, 7) + threadIdx_x // 7) % 9 and (T.Mul(44, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(44, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(44, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(44, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(44, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(44, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(44, 7) + threadIdx_x // 7) % 9 and (T.Mul(44, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(44, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(44, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(44, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(44, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(44, 7) + threadIdx_x // 7) % 9 and (T.Mul(44, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(44, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(44, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(44, 7) + threadIdx_x // 7 < 576:
    if T.Mul(44, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(44, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(44, 7) + threadIdx_x // 7) % 9 and (T.Mul(44, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(44, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(44, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(44, 7) + threadIdx_x // 7 < 576:
        if T.Mul(44, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(44, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(44, 7) + threadIdx_x // 7) % 9 and (T.Mul(44, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(44, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(44, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
45
<class 'tvm.tir.expr.IntImm'>
T.Mul(45, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(45, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(45, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(45, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(45, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(45, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(45, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(45, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(45, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(45, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(45, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(45, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(45, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(45, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(45, 7) + threadIdx_x // 7) % 9 and (T.Mul(45, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(45, 7) + threadIdx_x // 7) % 9 and (T.Mul(45, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(45, 7) + threadIdx_x // 7) % 9 and (T.Mul(45, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(45, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(45, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(45, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(45, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(45, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(45, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(45, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(45, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(45, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(45, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(45, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(45, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(45, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(45, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(45, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(45, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(45, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(45, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(45, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(45, 7) + threadIdx_x // 7) % 9 and (T.Mul(45, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(45, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(45, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(45, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(45, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(45, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(45, 7) + threadIdx_x // 7) % 9 and (T.Mul(45, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(45, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(45, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(45, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(45, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(45, 7) + threadIdx_x // 7) % 9 and (T.Mul(45, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(45, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(45, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(45, 7) + threadIdx_x // 7 < 576:
    if T.Mul(45, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(45, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(45, 7) + threadIdx_x // 7) % 9 and (T.Mul(45, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(45, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(45, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(45, 7) + threadIdx_x // 7 < 576:
        if T.Mul(45, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(45, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(45, 7) + threadIdx_x // 7) % 9 and (T.Mul(45, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(45, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(45, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
46
<class 'tvm.tir.expr.IntImm'>
T.Mul(46, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(46, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(46, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(46, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(46, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(46, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(46, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(46, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(46, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(46, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(46, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(46, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(46, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(46, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(46, 7) + threadIdx_x // 7) % 9 and (T.Mul(46, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(46, 7) + threadIdx_x // 7) % 9 and (T.Mul(46, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(46, 7) + threadIdx_x // 7) % 9 and (T.Mul(46, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(46, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(46, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(46, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(46, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(46, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(46, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(46, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(46, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(46, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(46, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(46, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(46, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(46, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(46, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(46, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(46, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(46, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(46, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(46, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(46, 7) + threadIdx_x // 7) % 9 and (T.Mul(46, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(46, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(46, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(46, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(46, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(46, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(46, 7) + threadIdx_x // 7) % 9 and (T.Mul(46, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(46, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(46, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(46, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(46, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(46, 7) + threadIdx_x // 7) % 9 and (T.Mul(46, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(46, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(46, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(46, 7) + threadIdx_x // 7 < 576:
    if T.Mul(46, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(46, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(46, 7) + threadIdx_x // 7) % 9 and (T.Mul(46, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(46, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(46, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(46, 7) + threadIdx_x // 7 < 576:
        if T.Mul(46, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(46, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(46, 7) + threadIdx_x // 7) % 9 and (T.Mul(46, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(46, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(46, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
47
<class 'tvm.tir.expr.IntImm'>
T.Mul(47, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(47, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(47, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(47, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(47, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(47, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(47, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(47, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(47, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(47, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(47, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(47, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(47, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(47, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(47, 7) + threadIdx_x // 7) % 9 and (T.Mul(47, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(47, 7) + threadIdx_x // 7) % 9 and (T.Mul(47, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(47, 7) + threadIdx_x // 7) % 9 and (T.Mul(47, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(47, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(47, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(47, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(47, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(47, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(47, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(47, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(47, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(47, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(47, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(47, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(47, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(47, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(47, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(47, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(47, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(47, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(47, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(47, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(47, 7) + threadIdx_x // 7) % 9 and (T.Mul(47, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(47, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(47, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(47, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(47, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(47, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(47, 7) + threadIdx_x // 7) % 9 and (T.Mul(47, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(47, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(47, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(47, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(47, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(47, 7) + threadIdx_x // 7) % 9 and (T.Mul(47, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(47, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(47, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(47, 7) + threadIdx_x // 7 < 576:
    if T.Mul(47, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(47, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(47, 7) + threadIdx_x // 7) % 9 and (T.Mul(47, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(47, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(47, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(47, 7) + threadIdx_x // 7 < 576:
        if T.Mul(47, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(47, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(47, 7) + threadIdx_x // 7) % 9 and (T.Mul(47, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(47, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(47, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
48
<class 'tvm.tir.expr.IntImm'>
T.Mul(48, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(48, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(48, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(48, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(48, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(48, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(48, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(48, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(48, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(48, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(48, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(48, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(48, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(48, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(48, 7) + threadIdx_x // 7) % 9 and (T.Mul(48, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(48, 7) + threadIdx_x // 7) % 9 and (T.Mul(48, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(48, 7) + threadIdx_x // 7) % 9 and (T.Mul(48, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(48, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(48, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(48, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(48, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(48, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(48, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(48, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(48, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(48, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(48, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(48, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(48, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(48, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(48, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(48, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(48, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(48, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(48, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(48, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(48, 7) + threadIdx_x // 7) % 9 and (T.Mul(48, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(48, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(48, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(48, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(48, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(48, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(48, 7) + threadIdx_x // 7) % 9 and (T.Mul(48, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(48, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(48, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(48, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(48, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(48, 7) + threadIdx_x // 7) % 9 and (T.Mul(48, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(48, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(48, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(48, 7) + threadIdx_x // 7 < 576:
    if T.Mul(48, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(48, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(48, 7) + threadIdx_x // 7) % 9 and (T.Mul(48, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(48, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(48, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(48, 7) + threadIdx_x // 7 < 576:
        if T.Mul(48, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(48, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(48, 7) + threadIdx_x // 7) % 9 and (T.Mul(48, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(48, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(48, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
49
<class 'tvm.tir.expr.IntImm'>
T.Mul(49, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(49, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(49, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(49, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(49, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(49, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(49, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(49, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(49, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(49, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(49, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(49, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(49, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(49, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(49, 7) + threadIdx_x // 7) % 9 and (T.Mul(49, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(49, 7) + threadIdx_x // 7) % 9 and (T.Mul(49, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(49, 7) + threadIdx_x // 7) % 9 and (T.Mul(49, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(49, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(49, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(49, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(49, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(49, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(49, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(49, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(49, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(49, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(49, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(49, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(49, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(49, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(49, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(49, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(49, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(49, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(49, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(49, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(49, 7) + threadIdx_x // 7) % 9 and (T.Mul(49, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(49, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(49, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(49, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(49, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(49, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(49, 7) + threadIdx_x // 7) % 9 and (T.Mul(49, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(49, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(49, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(49, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(49, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(49, 7) + threadIdx_x // 7) % 9 and (T.Mul(49, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(49, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(49, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(49, 7) + threadIdx_x // 7 < 576:
    if T.Mul(49, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(49, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(49, 7) + threadIdx_x // 7) % 9 and (T.Mul(49, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(49, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(49, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(49, 7) + threadIdx_x // 7 < 576:
        if T.Mul(49, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(49, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(49, 7) + threadIdx_x // 7) % 9 and (T.Mul(49, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(49, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(49, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
50
<class 'tvm.tir.expr.IntImm'>
T.Mul(50, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(50, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(50, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(50, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(50, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(50, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(50, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(50, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(50, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(50, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(50, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(50, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(50, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(50, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(50, 7) + threadIdx_x // 7) % 9 and (T.Mul(50, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(50, 7) + threadIdx_x // 7) % 9 and (T.Mul(50, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(50, 7) + threadIdx_x // 7) % 9 and (T.Mul(50, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(50, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(50, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(50, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(50, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(50, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(50, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(50, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(50, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(50, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(50, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(50, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(50, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(50, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(50, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(50, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(50, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(50, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(50, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(50, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(50, 7) + threadIdx_x // 7) % 9 and (T.Mul(50, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(50, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(50, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(50, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(50, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(50, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(50, 7) + threadIdx_x // 7) % 9 and (T.Mul(50, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(50, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(50, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(50, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(50, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(50, 7) + threadIdx_x // 7) % 9 and (T.Mul(50, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(50, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(50, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(50, 7) + threadIdx_x // 7 < 576:
    if T.Mul(50, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(50, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(50, 7) + threadIdx_x // 7) % 9 and (T.Mul(50, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(50, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(50, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(50, 7) + threadIdx_x // 7 < 576:
        if T.Mul(50, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(50, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(50, 7) + threadIdx_x // 7) % 9 and (T.Mul(50, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(50, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(50, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
51
<class 'tvm.tir.expr.IntImm'>
T.Mul(51, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(51, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(51, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(51, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(51, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(51, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(51, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(51, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(51, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(51, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(51, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(51, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(51, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(51, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(51, 7) + threadIdx_x // 7) % 9 and (T.Mul(51, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(51, 7) + threadIdx_x // 7) % 9 and (T.Mul(51, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(51, 7) + threadIdx_x // 7) % 9 and (T.Mul(51, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(51, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(51, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(51, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(51, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(51, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(51, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(51, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(51, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(51, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(51, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(51, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(51, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(51, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(51, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(51, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(51, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(51, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(51, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(51, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(51, 7) + threadIdx_x // 7) % 9 and (T.Mul(51, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(51, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(51, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(51, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(51, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(51, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(51, 7) + threadIdx_x // 7) % 9 and (T.Mul(51, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(51, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(51, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(51, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(51, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(51, 7) + threadIdx_x // 7) % 9 and (T.Mul(51, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(51, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(51, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(51, 7) + threadIdx_x // 7 < 576:
    if T.Mul(51, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(51, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(51, 7) + threadIdx_x // 7) % 9 and (T.Mul(51, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(51, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(51, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(51, 7) + threadIdx_x // 7 < 576:
        if T.Mul(51, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(51, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(51, 7) + threadIdx_x // 7) % 9 and (T.Mul(51, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(51, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(51, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
52
<class 'tvm.tir.expr.IntImm'>
T.Mul(52, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(52, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(52, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(52, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(52, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(52, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(52, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(52, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(52, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(52, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(52, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(52, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(52, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(52, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(52, 7) + threadIdx_x // 7) % 9 and (T.Mul(52, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(52, 7) + threadIdx_x // 7) % 9 and (T.Mul(52, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(52, 7) + threadIdx_x // 7) % 9 and (T.Mul(52, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(52, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(52, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(52, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(52, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(52, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(52, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(52, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(52, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(52, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(52, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(52, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(52, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(52, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(52, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(52, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(52, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(52, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(52, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(52, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(52, 7) + threadIdx_x // 7) % 9 and (T.Mul(52, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(52, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(52, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(52, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(52, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(52, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(52, 7) + threadIdx_x // 7) % 9 and (T.Mul(52, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(52, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(52, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(52, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(52, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(52, 7) + threadIdx_x // 7) % 9 and (T.Mul(52, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(52, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(52, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(52, 7) + threadIdx_x // 7 < 576:
    if T.Mul(52, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(52, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(52, 7) + threadIdx_x // 7) % 9 and (T.Mul(52, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(52, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(52, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(52, 7) + threadIdx_x // 7 < 576:
        if T.Mul(52, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(52, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(52, 7) + threadIdx_x // 7) % 9 and (T.Mul(52, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(52, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(52, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
53
<class 'tvm.tir.expr.IntImm'>
T.Mul(53, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(53, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(53, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(53, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(53, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(53, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(53, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(53, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(53, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(53, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(53, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(53, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(53, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(53, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(53, 7) + threadIdx_x // 7) % 9 and (T.Mul(53, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(53, 7) + threadIdx_x // 7) % 9 and (T.Mul(53, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(53, 7) + threadIdx_x // 7) % 9 and (T.Mul(53, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(53, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(53, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(53, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(53, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(53, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(53, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(53, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(53, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(53, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(53, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(53, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(53, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(53, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(53, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(53, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(53, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(53, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(53, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(53, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(53, 7) + threadIdx_x // 7) % 9 and (T.Mul(53, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(53, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(53, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(53, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(53, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(53, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(53, 7) + threadIdx_x // 7) % 9 and (T.Mul(53, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(53, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(53, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(53, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(53, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(53, 7) + threadIdx_x // 7) % 9 and (T.Mul(53, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(53, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(53, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(53, 7) + threadIdx_x // 7 < 576:
    if T.Mul(53, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(53, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(53, 7) + threadIdx_x // 7) % 9 and (T.Mul(53, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(53, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(53, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(53, 7) + threadIdx_x // 7 < 576:
        if T.Mul(53, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(53, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(53, 7) + threadIdx_x // 7) % 9 and (T.Mul(53, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(53, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(53, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
54
<class 'tvm.tir.expr.IntImm'>
T.Mul(54, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(54, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(54, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(54, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(54, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(54, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(54, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(54, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(54, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(54, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(54, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(54, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(54, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(54, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(54, 7) + threadIdx_x // 7) % 9 and (T.Mul(54, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(54, 7) + threadIdx_x // 7) % 9 and (T.Mul(54, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(54, 7) + threadIdx_x // 7) % 9 and (T.Mul(54, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(54, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(54, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(54, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(54, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(54, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(54, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(54, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(54, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(54, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(54, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(54, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(54, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(54, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(54, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(54, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(54, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(54, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(54, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(54, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(54, 7) + threadIdx_x // 7) % 9 and (T.Mul(54, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(54, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(54, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(54, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(54, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(54, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(54, 7) + threadIdx_x // 7) % 9 and (T.Mul(54, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(54, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(54, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(54, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(54, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(54, 7) + threadIdx_x // 7) % 9 and (T.Mul(54, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(54, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(54, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(54, 7) + threadIdx_x // 7 < 576:
    if T.Mul(54, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(54, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(54, 7) + threadIdx_x // 7) % 9 and (T.Mul(54, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(54, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(54, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(54, 7) + threadIdx_x // 7 < 576:
        if T.Mul(54, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(54, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(54, 7) + threadIdx_x // 7) % 9 and (T.Mul(54, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(54, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(54, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
55
<class 'tvm.tir.expr.IntImm'>
T.Mul(55, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(55, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(55, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(55, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(55, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(55, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(55, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(55, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(55, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(55, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(55, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(55, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(55, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(55, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(55, 7) + threadIdx_x // 7) % 9 and (T.Mul(55, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(55, 7) + threadIdx_x // 7) % 9 and (T.Mul(55, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(55, 7) + threadIdx_x // 7) % 9 and (T.Mul(55, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(55, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(55, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(55, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(55, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(55, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(55, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(55, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(55, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(55, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(55, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(55, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(55, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(55, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(55, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(55, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(55, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(55, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(55, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(55, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(55, 7) + threadIdx_x // 7) % 9 and (T.Mul(55, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(55, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(55, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(55, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(55, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(55, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(55, 7) + threadIdx_x // 7) % 9 and (T.Mul(55, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(55, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(55, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(55, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(55, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(55, 7) + threadIdx_x // 7) % 9 and (T.Mul(55, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(55, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(55, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(55, 7) + threadIdx_x // 7 < 576:
    if T.Mul(55, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(55, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(55, 7) + threadIdx_x // 7) % 9 and (T.Mul(55, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(55, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(55, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(55, 7) + threadIdx_x // 7 < 576:
        if T.Mul(55, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(55, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(55, 7) + threadIdx_x // 7) % 9 and (T.Mul(55, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(55, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(55, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
56
<class 'tvm.tir.expr.IntImm'>
T.Mul(56, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(56, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(56, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(56, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(56, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(56, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(56, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(56, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(56, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(56, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(56, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(56, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(56, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(56, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(56, 7) + threadIdx_x // 7) % 9 and (T.Mul(56, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(56, 7) + threadIdx_x // 7) % 9 and (T.Mul(56, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(56, 7) + threadIdx_x // 7) % 9 and (T.Mul(56, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(56, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(56, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(56, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(56, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(56, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(56, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(56, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(56, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(56, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(56, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(56, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(56, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(56, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(56, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(56, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(56, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(56, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(56, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(56, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(56, 7) + threadIdx_x // 7) % 9 and (T.Mul(56, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(56, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(56, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(56, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(56, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(56, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(56, 7) + threadIdx_x // 7) % 9 and (T.Mul(56, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(56, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(56, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(56, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(56, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(56, 7) + threadIdx_x // 7) % 9 and (T.Mul(56, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(56, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(56, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(56, 7) + threadIdx_x // 7 < 576:
    if T.Mul(56, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(56, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(56, 7) + threadIdx_x // 7) % 9 and (T.Mul(56, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(56, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(56, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(56, 7) + threadIdx_x // 7 < 576:
        if T.Mul(56, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(56, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(56, 7) + threadIdx_x // 7) % 9 and (T.Mul(56, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(56, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(56, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
57
<class 'tvm.tir.expr.IntImm'>
T.Mul(57, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(57, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(57, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(57, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(57, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(57, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(57, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(57, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(57, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(57, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(57, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(57, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(57, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(57, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(57, 7) + threadIdx_x // 7) % 9 and (T.Mul(57, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(57, 7) + threadIdx_x // 7) % 9 and (T.Mul(57, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(57, 7) + threadIdx_x // 7) % 9 and (T.Mul(57, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(57, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(57, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(57, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(57, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(57, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(57, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(57, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(57, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(57, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(57, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(57, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(57, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(57, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(57, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(57, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(57, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(57, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(57, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(57, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(57, 7) + threadIdx_x // 7) % 9 and (T.Mul(57, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(57, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(57, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(57, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(57, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(57, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(57, 7) + threadIdx_x // 7) % 9 and (T.Mul(57, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(57, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(57, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(57, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(57, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(57, 7) + threadIdx_x // 7) % 9 and (T.Mul(57, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(57, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(57, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(57, 7) + threadIdx_x // 7 < 576:
    if T.Mul(57, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(57, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(57, 7) + threadIdx_x // 7) % 9 and (T.Mul(57, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(57, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(57, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(57, 7) + threadIdx_x // 7 < 576:
        if T.Mul(57, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(57, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(57, 7) + threadIdx_x // 7) % 9 and (T.Mul(57, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(57, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(57, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
58
<class 'tvm.tir.expr.IntImm'>
T.Mul(58, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(58, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(58, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(58, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(58, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(58, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(58, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(58, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(58, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(58, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(58, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(58, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(58, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(58, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(58, 7) + threadIdx_x // 7) % 9 and (T.Mul(58, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(58, 7) + threadIdx_x // 7) % 9 and (T.Mul(58, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(58, 7) + threadIdx_x // 7) % 9 and (T.Mul(58, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(58, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(58, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(58, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(58, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(58, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(58, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(58, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(58, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(58, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(58, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(58, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(58, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(58, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(58, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(58, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(58, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(58, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(58, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(58, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(58, 7) + threadIdx_x // 7) % 9 and (T.Mul(58, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(58, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(58, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(58, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(58, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(58, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(58, 7) + threadIdx_x // 7) % 9 and (T.Mul(58, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(58, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(58, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(58, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(58, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(58, 7) + threadIdx_x // 7) % 9 and (T.Mul(58, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(58, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(58, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(58, 7) + threadIdx_x // 7 < 576:
    if T.Mul(58, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(58, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(58, 7) + threadIdx_x // 7) % 9 and (T.Mul(58, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(58, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(58, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(58, 7) + threadIdx_x // 7 < 576:
        if T.Mul(58, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(58, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(58, 7) + threadIdx_x // 7) % 9 and (T.Mul(58, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(58, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(58, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
59
<class 'tvm.tir.expr.IntImm'>
T.Mul(59, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(59, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(59, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(59, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(59, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(59, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(59, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(59, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(59, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(59, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(59, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(59, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(59, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(59, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(59, 7) + threadIdx_x // 7) % 9 and (T.Mul(59, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(59, 7) + threadIdx_x // 7) % 9 and (T.Mul(59, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(59, 7) + threadIdx_x // 7) % 9 and (T.Mul(59, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(59, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(59, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(59, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(59, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(59, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(59, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(59, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(59, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(59, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(59, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(59, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(59, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(59, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(59, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(59, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(59, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(59, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(59, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(59, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(59, 7) + threadIdx_x // 7) % 9 and (T.Mul(59, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(59, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(59, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(59, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(59, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(59, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(59, 7) + threadIdx_x // 7) % 9 and (T.Mul(59, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(59, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(59, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(59, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(59, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(59, 7) + threadIdx_x // 7) % 9 and (T.Mul(59, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(59, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(59, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(59, 7) + threadIdx_x // 7 < 576:
    if T.Mul(59, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(59, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(59, 7) + threadIdx_x // 7) % 9 and (T.Mul(59, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(59, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(59, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(59, 7) + threadIdx_x // 7 < 576:
        if T.Mul(59, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(59, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(59, 7) + threadIdx_x // 7) % 9 and (T.Mul(59, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(59, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(59, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
60
<class 'tvm.tir.expr.IntImm'>
T.Mul(60, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(60, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(60, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(60, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(60, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(60, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(60, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(60, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(60, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(60, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(60, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(60, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(60, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(60, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(60, 7) + threadIdx_x // 7) % 9 and (T.Mul(60, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(60, 7) + threadIdx_x // 7) % 9 and (T.Mul(60, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(60, 7) + threadIdx_x // 7) % 9 and (T.Mul(60, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(60, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(60, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(60, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(60, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(60, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(60, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(60, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(60, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(60, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(60, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(60, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(60, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(60, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(60, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(60, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(60, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(60, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(60, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(60, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(60, 7) + threadIdx_x // 7) % 9 and (T.Mul(60, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(60, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(60, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(60, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(60, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(60, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(60, 7) + threadIdx_x // 7) % 9 and (T.Mul(60, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(60, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(60, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(60, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(60, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(60, 7) + threadIdx_x // 7) % 9 and (T.Mul(60, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(60, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(60, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(60, 7) + threadIdx_x // 7 < 576:
    if T.Mul(60, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(60, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(60, 7) + threadIdx_x // 7) % 9 and (T.Mul(60, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(60, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(60, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(60, 7) + threadIdx_x // 7 < 576:
        if T.Mul(60, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(60, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(60, 7) + threadIdx_x // 7) % 9 and (T.Mul(60, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(60, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(60, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
61
<class 'tvm.tir.expr.IntImm'>
T.Mul(61, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(61, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(61, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(61, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(61, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(61, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(61, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(61, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(61, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(61, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(61, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(61, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(61, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(61, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(61, 7) + threadIdx_x // 7) % 9 and (T.Mul(61, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(61, 7) + threadIdx_x // 7) % 9 and (T.Mul(61, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(61, 7) + threadIdx_x // 7) % 9 and (T.Mul(61, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(61, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(61, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(61, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(61, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(61, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(61, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(61, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(61, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(61, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(61, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(61, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(61, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(61, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(61, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(61, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(61, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(61, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(61, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(61, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(61, 7) + threadIdx_x // 7) % 9 and (T.Mul(61, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(61, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(61, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(61, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(61, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(61, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(61, 7) + threadIdx_x // 7) % 9 and (T.Mul(61, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(61, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(61, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(61, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(61, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(61, 7) + threadIdx_x // 7) % 9 and (T.Mul(61, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(61, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(61, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(61, 7) + threadIdx_x // 7 < 576:
    if T.Mul(61, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(61, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(61, 7) + threadIdx_x // 7) % 9 and (T.Mul(61, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(61, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(61, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(61, 7) + threadIdx_x // 7 < 576:
        if T.Mul(61, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(61, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(61, 7) + threadIdx_x // 7) % 9 and (T.Mul(61, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(61, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(61, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
62
<class 'tvm.tir.expr.IntImm'>
T.Mul(62, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(62, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(62, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(62, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(62, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(62, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(62, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(62, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(62, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(62, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(62, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(62, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(62, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(62, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(62, 7) + threadIdx_x // 7) % 9 and (T.Mul(62, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(62, 7) + threadIdx_x // 7) % 9 and (T.Mul(62, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(62, 7) + threadIdx_x // 7) % 9 and (T.Mul(62, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(62, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(62, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(62, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(62, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(62, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(62, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(62, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(62, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(62, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(62, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(62, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(62, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(62, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(62, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(62, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(62, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(62, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(62, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(62, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(62, 7) + threadIdx_x // 7) % 9 and (T.Mul(62, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(62, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(62, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(62, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(62, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(62, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(62, 7) + threadIdx_x // 7) % 9 and (T.Mul(62, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(62, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(62, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(62, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(62, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(62, 7) + threadIdx_x // 7) % 9 and (T.Mul(62, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(62, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(62, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(62, 7) + threadIdx_x // 7 < 576:
    if T.Mul(62, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(62, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(62, 7) + threadIdx_x // 7) % 9 and (T.Mul(62, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(62, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(62, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(62, 7) + threadIdx_x // 7 < 576:
        if T.Mul(62, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(62, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(62, 7) + threadIdx_x // 7) % 9 and (T.Mul(62, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(62, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(62, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
63
<class 'tvm.tir.expr.IntImm'>
T.Mul(63, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(63, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(63, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(63, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(63, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(63, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(63, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(63, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(63, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(63, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(63, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(63, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(63, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(63, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(63, 7) + threadIdx_x // 7) % 9 and (T.Mul(63, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(63, 7) + threadIdx_x // 7) % 9 and (T.Mul(63, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(63, 7) + threadIdx_x // 7) % 9 and (T.Mul(63, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(63, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(63, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(63, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(63, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(63, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(63, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(63, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(63, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(63, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(63, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(63, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(63, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(63, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(63, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(63, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(63, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(63, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(63, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(63, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(63, 7) + threadIdx_x // 7) % 9 and (T.Mul(63, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(63, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(63, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(63, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(63, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(63, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(63, 7) + threadIdx_x // 7) % 9 and (T.Mul(63, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(63, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(63, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(63, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(63, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(63, 7) + threadIdx_x // 7) % 9 and (T.Mul(63, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(63, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(63, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(63, 7) + threadIdx_x // 7 < 576:
    if T.Mul(63, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(63, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(63, 7) + threadIdx_x // 7) % 9 and (T.Mul(63, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(63, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(63, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(63, 7) + threadIdx_x // 7 < 576:
        if T.Mul(63, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(63, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(63, 7) + threadIdx_x // 7) % 9 and (T.Mul(63, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(63, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(63, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
64
<class 'tvm.tir.expr.IntImm'>
T.Mul(64, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(64, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(64, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(64, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(64, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(64, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(64, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(64, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(64, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(64, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(64, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(64, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(64, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(64, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(64, 7) + threadIdx_x // 7) % 9 and (T.Mul(64, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(64, 7) + threadIdx_x // 7) % 9 and (T.Mul(64, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(64, 7) + threadIdx_x // 7) % 9 and (T.Mul(64, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(64, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(64, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(64, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(64, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(64, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(64, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(64, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(64, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(64, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(64, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(64, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(64, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(64, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(64, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(64, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(64, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(64, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(64, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(64, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(64, 7) + threadIdx_x // 7) % 9 and (T.Mul(64, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(64, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(64, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(64, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(64, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(64, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(64, 7) + threadIdx_x // 7) % 9 and (T.Mul(64, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(64, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(64, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(64, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(64, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(64, 7) + threadIdx_x // 7) % 9 and (T.Mul(64, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(64, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(64, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(64, 7) + threadIdx_x // 7 < 576:
    if T.Mul(64, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(64, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(64, 7) + threadIdx_x // 7) % 9 and (T.Mul(64, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(64, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(64, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(64, 7) + threadIdx_x // 7 < 576:
        if T.Mul(64, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(64, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(64, 7) + threadIdx_x // 7) % 9 and (T.Mul(64, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(64, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(64, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
65
<class 'tvm.tir.expr.IntImm'>
T.Mul(65, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(65, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(65, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(65, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(65, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(65, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(65, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(65, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(65, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(65, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(65, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(65, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(65, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(65, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(65, 7) + threadIdx_x // 7) % 9 and (T.Mul(65, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(65, 7) + threadIdx_x // 7) % 9 and (T.Mul(65, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(65, 7) + threadIdx_x // 7) % 9 and (T.Mul(65, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(65, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(65, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(65, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(65, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(65, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(65, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(65, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(65, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(65, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(65, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(65, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(65, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(65, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(65, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(65, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(65, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(65, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(65, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(65, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(65, 7) + threadIdx_x // 7) % 9 and (T.Mul(65, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(65, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(65, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(65, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(65, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(65, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(65, 7) + threadIdx_x // 7) % 9 and (T.Mul(65, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(65, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(65, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(65, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(65, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(65, 7) + threadIdx_x // 7) % 9 and (T.Mul(65, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(65, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(65, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(65, 7) + threadIdx_x // 7 < 576:
    if T.Mul(65, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(65, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(65, 7) + threadIdx_x // 7) % 9 and (T.Mul(65, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(65, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(65, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(65, 7) + threadIdx_x // 7 < 576:
        if T.Mul(65, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(65, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(65, 7) + threadIdx_x // 7) % 9 and (T.Mul(65, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(65, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(65, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
66
<class 'tvm.tir.expr.IntImm'>
T.Mul(66, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(66, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(66, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(66, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(66, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(66, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(66, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(66, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(66, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(66, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(66, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(66, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(66, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(66, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(66, 7) + threadIdx_x // 7) % 9 and (T.Mul(66, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(66, 7) + threadIdx_x // 7) % 9 and (T.Mul(66, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(66, 7) + threadIdx_x // 7) % 9 and (T.Mul(66, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(66, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(66, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(66, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(66, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(66, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(66, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(66, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(66, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(66, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(66, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(66, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(66, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(66, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(66, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(66, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(66, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(66, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(66, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(66, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(66, 7) + threadIdx_x // 7) % 9 and (T.Mul(66, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(66, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(66, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(66, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(66, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(66, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(66, 7) + threadIdx_x // 7) % 9 and (T.Mul(66, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(66, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(66, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(66, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(66, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(66, 7) + threadIdx_x // 7) % 9 and (T.Mul(66, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(66, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(66, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(66, 7) + threadIdx_x // 7 < 576:
    if T.Mul(66, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(66, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(66, 7) + threadIdx_x // 7) % 9 and (T.Mul(66, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(66, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(66, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(66, 7) + threadIdx_x // 7 < 576:
        if T.Mul(66, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(66, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(66, 7) + threadIdx_x // 7) % 9 and (T.Mul(66, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(66, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(66, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
67
<class 'tvm.tir.expr.IntImm'>
T.Mul(67, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(67, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(67, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(67, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(67, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(67, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(67, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(67, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(67, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(67, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(67, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(67, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(67, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(67, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(67, 7) + threadIdx_x // 7) % 9 and (T.Mul(67, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(67, 7) + threadIdx_x // 7) % 9 and (T.Mul(67, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(67, 7) + threadIdx_x // 7) % 9 and (T.Mul(67, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(67, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(67, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(67, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(67, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(67, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(67, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(67, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(67, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(67, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(67, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(67, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(67, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(67, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(67, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(67, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(67, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(67, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(67, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(67, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(67, 7) + threadIdx_x // 7) % 9 and (T.Mul(67, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(67, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(67, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(67, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(67, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(67, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(67, 7) + threadIdx_x // 7) % 9 and (T.Mul(67, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(67, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(67, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(67, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(67, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(67, 7) + threadIdx_x // 7) % 9 and (T.Mul(67, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(67, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(67, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(67, 7) + threadIdx_x // 7 < 576:
    if T.Mul(67, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(67, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(67, 7) + threadIdx_x // 7) % 9 and (T.Mul(67, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(67, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(67, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(67, 7) + threadIdx_x // 7 < 576:
        if T.Mul(67, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(67, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(67, 7) + threadIdx_x // 7) % 9 and (T.Mul(67, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(67, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(67, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
68
<class 'tvm.tir.expr.IntImm'>
T.Mul(68, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(68, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(68, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(68, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(68, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(68, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(68, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(68, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(68, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(68, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(68, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(68, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(68, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(68, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(68, 7) + threadIdx_x // 7) % 9 and (T.Mul(68, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(68, 7) + threadIdx_x // 7) % 9 and (T.Mul(68, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(68, 7) + threadIdx_x // 7) % 9 and (T.Mul(68, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(68, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(68, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(68, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(68, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(68, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(68, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(68, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(68, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(68, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(68, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(68, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(68, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(68, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(68, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(68, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(68, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(68, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(68, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(68, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(68, 7) + threadIdx_x // 7) % 9 and (T.Mul(68, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(68, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(68, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(68, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(68, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(68, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(68, 7) + threadIdx_x // 7) % 9 and (T.Mul(68, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(68, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(68, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(68, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(68, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(68, 7) + threadIdx_x // 7) % 9 and (T.Mul(68, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(68, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(68, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(68, 7) + threadIdx_x // 7 < 576:
    if T.Mul(68, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(68, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(68, 7) + threadIdx_x // 7) % 9 and (T.Mul(68, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(68, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(68, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(68, 7) + threadIdx_x // 7 < 576:
        if T.Mul(68, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(68, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(68, 7) + threadIdx_x // 7) % 9 and (T.Mul(68, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(68, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(68, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
69
<class 'tvm.tir.expr.IntImm'>
T.Mul(69, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(69, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(69, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(69, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(69, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(69, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(69, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(69, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(69, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(69, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(69, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(69, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(69, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(69, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(69, 7) + threadIdx_x // 7) % 9 and (T.Mul(69, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(69, 7) + threadIdx_x // 7) % 9 and (T.Mul(69, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(69, 7) + threadIdx_x // 7) % 9 and (T.Mul(69, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(69, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(69, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(69, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(69, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(69, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(69, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(69, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(69, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(69, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(69, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(69, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(69, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(69, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(69, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(69, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(69, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(69, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(69, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(69, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(69, 7) + threadIdx_x // 7) % 9 and (T.Mul(69, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(69, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(69, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(69, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(69, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(69, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(69, 7) + threadIdx_x // 7) % 9 and (T.Mul(69, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(69, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(69, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(69, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(69, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(69, 7) + threadIdx_x // 7) % 9 and (T.Mul(69, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(69, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(69, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(69, 7) + threadIdx_x // 7 < 576:
    if T.Mul(69, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(69, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(69, 7) + threadIdx_x // 7) % 9 and (T.Mul(69, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(69, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(69, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(69, 7) + threadIdx_x // 7 < 576:
        if T.Mul(69, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(69, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(69, 7) + threadIdx_x // 7) % 9 and (T.Mul(69, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(69, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(69, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
70
<class 'tvm.tir.expr.IntImm'>
T.Mul(70, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(70, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(70, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(70, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(70, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(70, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(70, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(70, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(70, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(70, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(70, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(70, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(70, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(70, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(70, 7) + threadIdx_x // 7) % 9 and (T.Mul(70, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(70, 7) + threadIdx_x // 7) % 9 and (T.Mul(70, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(70, 7) + threadIdx_x // 7) % 9 and (T.Mul(70, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(70, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(70, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(70, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(70, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(70, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(70, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(70, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(70, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(70, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(70, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(70, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(70, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(70, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(70, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(70, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(70, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(70, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(70, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(70, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(70, 7) + threadIdx_x // 7) % 9 and (T.Mul(70, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(70, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(70, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(70, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(70, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(70, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(70, 7) + threadIdx_x // 7) % 9 and (T.Mul(70, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(70, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(70, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(70, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(70, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(70, 7) + threadIdx_x // 7) % 9 and (T.Mul(70, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(70, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(70, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(70, 7) + threadIdx_x // 7 < 576:
    if T.Mul(70, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(70, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(70, 7) + threadIdx_x // 7) % 9 and (T.Mul(70, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(70, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(70, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(70, 7) + threadIdx_x // 7 < 576:
        if T.Mul(70, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(70, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(70, 7) + threadIdx_x // 7) % 9 and (T.Mul(70, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(70, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(70, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
71
<class 'tvm.tir.expr.IntImm'>
T.Mul(71, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(71, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(71, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(71, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(71, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(71, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(71, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(71, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(71, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(71, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(71, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(71, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(71, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(71, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(71, 7) + threadIdx_x // 7) % 9 and (T.Mul(71, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(71, 7) + threadIdx_x // 7) % 9 and (T.Mul(71, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(71, 7) + threadIdx_x // 7) % 9 and (T.Mul(71, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(71, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(71, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(71, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(71, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(71, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(71, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(71, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(71, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(71, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(71, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(71, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(71, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(71, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(71, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(71, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(71, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(71, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(71, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(71, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(71, 7) + threadIdx_x // 7) % 9 and (T.Mul(71, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(71, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(71, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(71, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(71, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(71, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(71, 7) + threadIdx_x // 7) % 9 and (T.Mul(71, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(71, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(71, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(71, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(71, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(71, 7) + threadIdx_x // 7) % 9 and (T.Mul(71, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(71, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(71, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(71, 7) + threadIdx_x // 7 < 576:
    if T.Mul(71, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(71, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(71, 7) + threadIdx_x // 7) % 9 and (T.Mul(71, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(71, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(71, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(71, 7) + threadIdx_x // 7 < 576:
        if T.Mul(71, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(71, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(71, 7) + threadIdx_x // 7) % 9 and (T.Mul(71, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(71, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(71, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
72
<class 'tvm.tir.expr.IntImm'>
T.Mul(72, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(72, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(72, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(72, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(72, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(72, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(72, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(72, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(72, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(72, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(72, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(72, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(72, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(72, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(72, 7) + threadIdx_x // 7) % 9 and (T.Mul(72, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(72, 7) + threadIdx_x // 7) % 9 and (T.Mul(72, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(72, 7) + threadIdx_x // 7) % 9 and (T.Mul(72, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(72, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(72, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(72, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(72, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(72, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(72, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(72, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(72, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(72, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(72, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(72, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(72, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(72, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(72, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(72, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(72, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(72, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(72, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(72, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(72, 7) + threadIdx_x // 7) % 9 and (T.Mul(72, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(72, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(72, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(72, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(72, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(72, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(72, 7) + threadIdx_x // 7) % 9 and (T.Mul(72, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(72, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(72, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(72, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(72, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(72, 7) + threadIdx_x // 7) % 9 and (T.Mul(72, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(72, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(72, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(72, 7) + threadIdx_x // 7 < 576:
    if T.Mul(72, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(72, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(72, 7) + threadIdx_x // 7) % 9 and (T.Mul(72, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(72, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(72, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(72, 7) + threadIdx_x // 7 < 576:
        if T.Mul(72, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(72, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(72, 7) + threadIdx_x // 7) % 9 and (T.Mul(72, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(72, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(72, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
73
<class 'tvm.tir.expr.IntImm'>
T.Mul(73, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(73, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(73, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(73, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(73, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(73, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(73, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(73, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(73, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(73, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(73, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(73, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(73, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(73, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(73, 7) + threadIdx_x // 7) % 9 and (T.Mul(73, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(73, 7) + threadIdx_x // 7) % 9 and (T.Mul(73, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(73, 7) + threadIdx_x // 7) % 9 and (T.Mul(73, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(73, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(73, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(73, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(73, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(73, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(73, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(73, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(73, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(73, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(73, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(73, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(73, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(73, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(73, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(73, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(73, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(73, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(73, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(73, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(73, 7) + threadIdx_x // 7) % 9 and (T.Mul(73, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(73, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(73, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(73, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(73, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(73, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(73, 7) + threadIdx_x // 7) % 9 and (T.Mul(73, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(73, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(73, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(73, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(73, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(73, 7) + threadIdx_x // 7) % 9 and (T.Mul(73, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(73, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(73, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(73, 7) + threadIdx_x // 7 < 576:
    if T.Mul(73, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(73, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(73, 7) + threadIdx_x // 7) % 9 and (T.Mul(73, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(73, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(73, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(73, 7) + threadIdx_x // 7 < 576:
        if T.Mul(73, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(73, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(73, 7) + threadIdx_x // 7) % 9 and (T.Mul(73, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(73, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(73, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
74
<class 'tvm.tir.expr.IntImm'>
T.Mul(74, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(74, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(74, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(74, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(74, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(74, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(74, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(74, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(74, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(74, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(74, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(74, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(74, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(74, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(74, 7) + threadIdx_x // 7) % 9 and (T.Mul(74, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(74, 7) + threadIdx_x // 7) % 9 and (T.Mul(74, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(74, 7) + threadIdx_x // 7) % 9 and (T.Mul(74, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(74, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(74, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(74, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(74, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(74, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(74, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(74, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(74, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(74, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(74, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(74, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(74, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(74, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(74, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(74, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(74, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(74, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(74, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(74, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(74, 7) + threadIdx_x // 7) % 9 and (T.Mul(74, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(74, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(74, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(74, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(74, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(74, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(74, 7) + threadIdx_x // 7) % 9 and (T.Mul(74, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(74, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(74, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(74, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(74, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(74, 7) + threadIdx_x // 7) % 9 and (T.Mul(74, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(74, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(74, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(74, 7) + threadIdx_x // 7 < 576:
    if T.Mul(74, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(74, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(74, 7) + threadIdx_x // 7) % 9 and (T.Mul(74, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(74, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(74, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(74, 7) + threadIdx_x // 7 < 576:
        if T.Mul(74, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(74, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(74, 7) + threadIdx_x // 7) % 9 and (T.Mul(74, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(74, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(74, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
75
<class 'tvm.tir.expr.IntImm'>
T.Mul(75, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(75, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(75, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(75, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(75, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(75, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(75, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(75, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(75, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(75, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(75, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(75, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(75, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(75, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(75, 7) + threadIdx_x // 7) % 9 and (T.Mul(75, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(75, 7) + threadIdx_x // 7) % 9 and (T.Mul(75, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(75, 7) + threadIdx_x // 7) % 9 and (T.Mul(75, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(75, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(75, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(75, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(75, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(75, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(75, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(75, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(75, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(75, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(75, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(75, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(75, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(75, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(75, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(75, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(75, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(75, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(75, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(75, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(75, 7) + threadIdx_x // 7) % 9 and (T.Mul(75, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(75, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(75, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(75, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(75, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(75, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(75, 7) + threadIdx_x // 7) % 9 and (T.Mul(75, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(75, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(75, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(75, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(75, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(75, 7) + threadIdx_x // 7) % 9 and (T.Mul(75, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(75, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(75, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(75, 7) + threadIdx_x // 7 < 576:
    if T.Mul(75, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(75, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(75, 7) + threadIdx_x // 7) % 9 and (T.Mul(75, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(75, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(75, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(75, 7) + threadIdx_x // 7 < 576:
        if T.Mul(75, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(75, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(75, 7) + threadIdx_x // 7) % 9 and (T.Mul(75, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(75, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(75, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
76
<class 'tvm.tir.expr.IntImm'>
T.Mul(76, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(76, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(76, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(76, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(76, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(76, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(76, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(76, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(76, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(76, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(76, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(76, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(76, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(76, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(76, 7) + threadIdx_x // 7) % 9 and (T.Mul(76, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(76, 7) + threadIdx_x // 7) % 9 and (T.Mul(76, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(76, 7) + threadIdx_x // 7) % 9 and (T.Mul(76, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(76, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(76, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(76, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(76, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(76, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(76, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(76, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(76, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(76, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(76, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(76, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(76, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(76, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(76, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(76, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(76, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(76, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(76, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(76, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(76, 7) + threadIdx_x // 7) % 9 and (T.Mul(76, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(76, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(76, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(76, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(76, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(76, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(76, 7) + threadIdx_x // 7) % 9 and (T.Mul(76, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(76, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(76, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(76, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(76, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(76, 7) + threadIdx_x // 7) % 9 and (T.Mul(76, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(76, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(76, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(76, 7) + threadIdx_x // 7 < 576:
    if T.Mul(76, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(76, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(76, 7) + threadIdx_x // 7) % 9 and (T.Mul(76, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(76, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(76, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(76, 7) + threadIdx_x // 7 < 576:
        if T.Mul(76, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(76, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(76, 7) + threadIdx_x // 7) % 9 and (T.Mul(76, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(76, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(76, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
77
<class 'tvm.tir.expr.IntImm'>
T.Mul(77, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(77, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(77, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(77, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(77, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(77, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(77, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(77, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(77, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(77, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(77, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(77, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(77, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(77, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(77, 7) + threadIdx_x // 7) % 9 and (T.Mul(77, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(77, 7) + threadIdx_x // 7) % 9 and (T.Mul(77, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(77, 7) + threadIdx_x // 7) % 9 and (T.Mul(77, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(77, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(77, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(77, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(77, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(77, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(77, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(77, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(77, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(77, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(77, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(77, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(77, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(77, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(77, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(77, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(77, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(77, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(77, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(77, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(77, 7) + threadIdx_x // 7) % 9 and (T.Mul(77, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(77, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(77, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(77, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(77, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(77, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(77, 7) + threadIdx_x // 7) % 9 and (T.Mul(77, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(77, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(77, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(77, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(77, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(77, 7) + threadIdx_x // 7) % 9 and (T.Mul(77, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(77, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(77, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(77, 7) + threadIdx_x // 7 < 576:
    if T.Mul(77, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(77, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(77, 7) + threadIdx_x // 7) % 9 and (T.Mul(77, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(77, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(77, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(77, 7) + threadIdx_x // 7 < 576:
        if T.Mul(77, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(77, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(77, 7) + threadIdx_x // 7) % 9 and (T.Mul(77, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(77, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(77, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
78
<class 'tvm.tir.expr.IntImm'>
T.Mul(78, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(78, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(78, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(78, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(78, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(78, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(78, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(78, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(78, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(78, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(78, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(78, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(78, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(78, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(78, 7) + threadIdx_x // 7) % 9 and (T.Mul(78, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(78, 7) + threadIdx_x // 7) % 9 and (T.Mul(78, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(78, 7) + threadIdx_x // 7) % 9 and (T.Mul(78, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(78, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(78, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(78, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(78, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(78, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(78, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(78, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(78, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(78, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(78, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(78, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(78, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(78, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(78, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(78, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(78, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(78, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(78, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(78, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(78, 7) + threadIdx_x // 7) % 9 and (T.Mul(78, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(78, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(78, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(78, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(78, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(78, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(78, 7) + threadIdx_x // 7) % 9 and (T.Mul(78, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(78, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(78, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(78, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(78, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(78, 7) + threadIdx_x // 7) % 9 and (T.Mul(78, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(78, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(78, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(78, 7) + threadIdx_x // 7 < 576:
    if T.Mul(78, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(78, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(78, 7) + threadIdx_x // 7) % 9 and (T.Mul(78, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(78, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(78, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(78, 7) + threadIdx_x // 7 < 576:
        if T.Mul(78, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(78, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(78, 7) + threadIdx_x // 7) % 9 and (T.Mul(78, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(78, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(78, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
79
<class 'tvm.tir.expr.IntImm'>
T.Mul(79, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(79, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(79, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(79, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(79, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(79, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(79, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(79, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(79, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(79, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(79, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(79, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(79, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(79, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(79, 7) + threadIdx_x // 7) % 9 and (T.Mul(79, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(79, 7) + threadIdx_x // 7) % 9 and (T.Mul(79, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(79, 7) + threadIdx_x // 7) % 9 and (T.Mul(79, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(79, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(79, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(79, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(79, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(79, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(79, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(79, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(79, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(79, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(79, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(79, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(79, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(79, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(79, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(79, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(79, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(79, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(79, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(79, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(79, 7) + threadIdx_x // 7) % 9 and (T.Mul(79, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(79, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(79, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(79, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(79, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(79, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(79, 7) + threadIdx_x // 7) % 9 and (T.Mul(79, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(79, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(79, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(79, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(79, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(79, 7) + threadIdx_x // 7) % 9 and (T.Mul(79, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(79, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(79, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(79, 7) + threadIdx_x // 7 < 576:
    if T.Mul(79, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(79, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(79, 7) + threadIdx_x // 7) % 9 and (T.Mul(79, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(79, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(79, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(79, 7) + threadIdx_x // 7 < 576:
        if T.Mul(79, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(79, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(79, 7) + threadIdx_x // 7) % 9 and (T.Mul(79, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(79, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(79, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
80
<class 'tvm.tir.expr.IntImm'>
T.Mul(80, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(80, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(80, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(80, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(80, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(80, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(80, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(80, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(80, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(80, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(80, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(80, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(80, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(80, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(80, 7) + threadIdx_x // 7) % 9 and (T.Mul(80, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(80, 7) + threadIdx_x // 7) % 9 and (T.Mul(80, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(80, 7) + threadIdx_x // 7) % 9 and (T.Mul(80, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(80, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(80, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(80, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(80, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(80, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(80, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(80, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(80, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(80, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(80, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(80, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(80, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(80, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(80, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(80, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(80, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(80, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(80, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(80, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(80, 7) + threadIdx_x // 7) % 9 and (T.Mul(80, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(80, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(80, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(80, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(80, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(80, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(80, 7) + threadIdx_x // 7) % 9 and (T.Mul(80, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(80, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(80, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(80, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(80, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(80, 7) + threadIdx_x // 7) % 9 and (T.Mul(80, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(80, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(80, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(80, 7) + threadIdx_x // 7 < 576:
    if T.Mul(80, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(80, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(80, 7) + threadIdx_x // 7) % 9 and (T.Mul(80, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(80, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(80, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(80, 7) + threadIdx_x // 7 < 576:
        if T.Mul(80, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(80, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(80, 7) + threadIdx_x // 7) % 9 and (T.Mul(80, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(80, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(80, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
81
<class 'tvm.tir.expr.IntImm'>
T.Mul(81, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(81, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(81, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(81, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(81, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(81, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(81, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(81, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(81, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(81, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(81, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(81, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(81, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(81, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(81, 7) + threadIdx_x // 7) % 9 and (T.Mul(81, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(81, 7) + threadIdx_x // 7) % 9 and (T.Mul(81, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(81, 7) + threadIdx_x // 7) % 9 and (T.Mul(81, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(81, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(81, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(81, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(81, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(81, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(81, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(81, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(81, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(81, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(81, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(81, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(81, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(81, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(81, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(81, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(81, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(81, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(81, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(81, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(81, 7) + threadIdx_x // 7) % 9 and (T.Mul(81, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(81, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(81, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(81, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(81, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(81, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(81, 7) + threadIdx_x // 7) % 9 and (T.Mul(81, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(81, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(81, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(81, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(81, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(81, 7) + threadIdx_x // 7) % 9 and (T.Mul(81, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(81, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(81, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(81, 7) + threadIdx_x // 7 < 576:
    if T.Mul(81, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(81, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(81, 7) + threadIdx_x // 7) % 9 and (T.Mul(81, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(81, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(81, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(81, 7) + threadIdx_x // 7 < 576:
        if T.Mul(81, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(81, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(81, 7) + threadIdx_x // 7) % 9 and (T.Mul(81, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(81, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(81, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
82
<class 'tvm.tir.expr.IntImm'>
T.Mul(82, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(82, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
T.Mul(82, 7) + threadIdx_x // 7 < 576
<class 'tvm.tir.expr.LT'>
T.Mul(82, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(82, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(82, 49) + threadIdx_x < 4032
<class 'tvm.tir.expr.LT'>
T.Mul(82, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(82, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(82, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (T.Mul(82, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.LE'>
T.Mul(82, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(82, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(82, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(82, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (T.Mul(82, 7) + threadIdx_x // 7) % 9 and (T.Mul(82, 7) + threadIdx_x // 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(82, 7) + threadIdx_x // 7) % 9 and (T.Mul(82, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
1 <= (T.Mul(82, 7) + threadIdx_x // 7) % 9 and (T.Mul(82, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
T.Mul(82, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(82, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(82, 7) + threadIdx_x // 7) // 9
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(82, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(82, 7) + threadIdx_x // 7) // 9 * 49
<class 'tvm.tir.expr.Add'>
T.Mul(82, 7)
<class 'tvm.tir.expr.Mul'>
T.Mul(82, 7) + threadIdx_x // 7
<class 'tvm.tir.expr.Add'>
(T.Mul(82, 7) + threadIdx_x // 7) % 9
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(82, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (T.Mul(82, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(82, 7) + threadIdx_x // 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(82, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(82, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(82, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(82, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (T.Mul(82, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(82, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (T.Mul(82, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(82, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (T.Mul(82, 7) + threadIdx_x // 7) % 9 and (T.Mul(82, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(82, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(82, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
T.Mul(82, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(82, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[T.Mul(82, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(82, 7) + threadIdx_x // 7) % 9 and (T.Mul(82, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(82, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(82, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(82, 49) + threadIdx_x < 4032:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[T.Mul(82, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(82, 7) + threadIdx_x // 7) % 9 and (T.Mul(82, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(82, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(82, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
threadIdx_x = T.int32()
if T.Mul(82, 7) + threadIdx_x // 7 < 576:
    if T.Mul(82, 49) + threadIdx_x < 4032:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[T.Mul(82, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(82, 7) + threadIdx_x // 7) % 9 and (T.Mul(82, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(82, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(82, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(82, 7) + threadIdx_x // 7 < 576:
        if T.Mul(82, 49) + threadIdx_x < 4032:
            pad_temp_shared = T.Buffer((4032,), scope="shared")
            rx_outer_outer = T.int32()
            data = T.Buffer((25088,))
            rc_outer_outer = T.int32()
            pad_temp_shared[T.Mul(82, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(82, 7) + threadIdx_x // 7) % 9 and (T.Mul(82, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(82, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(82, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
49
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
49
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 49)
<class 'tvm.tir.expr.Mul'>
threadIdx_x
<class 'tvm.tir.expr.Var'>
T.Mul(0, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
1536
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
blockIdx_x
<class 'tvm.tir.expr.Var'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
49
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(T.Mul(0, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(T.Mul(0, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(0, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(0, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
49
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(T.Mul(0, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
3
<class 'tvm.tir.expr.IntImm'>
(T.Mul(0, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(0, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(0, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(0, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(0, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(0, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(0, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
49
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(0, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(0, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(0, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(0, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(0, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(0, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(0, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(0, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(0, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(0, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(0, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
T.Mul(1, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(1, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(1, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(1, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(1, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(1, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(1, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(1, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(1, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(1, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(1, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(1, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(1, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(1, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(1, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(1, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(1, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(1, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(1, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(1, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(1, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(1, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(1, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(1, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(1, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(1, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(1, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
2
<class 'tvm.tir.expr.IntImm'>
T.Mul(2, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(2, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(2, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(2, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(2, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(2, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(2, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(2, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(2, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(2, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(2, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(2, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(2, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(2, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(2, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(2, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(2, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(2, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(2, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(2, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(2, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(2, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(2, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(2, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(2, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(2, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(2, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(2, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(2, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(2, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(2, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(2, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
3
<class 'tvm.tir.expr.IntImm'>
T.Mul(3, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(3, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(3, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(3, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(3, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(3, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(3, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(3, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(3, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(3, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(3, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(3, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(3, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(3, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(3, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(3, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(3, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(3, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(3, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(3, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(3, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(3, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(3, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(3, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(3, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(3, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(3, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(3, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(3, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(3, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(3, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(3, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
4
<class 'tvm.tir.expr.IntImm'>
T.Mul(4, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(4, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(4, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(4, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(4, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(4, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(4, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(4, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(4, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(4, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(4, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(4, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(4, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(4, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(4, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(4, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(4, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(4, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(4, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(4, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(4, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(4, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(4, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(4, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(4, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(4, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(4, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(4, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(4, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(4, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(4, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(4, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
5
<class 'tvm.tir.expr.IntImm'>
T.Mul(5, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(5, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(5, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(5, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(5, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(5, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(5, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(5, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(5, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(5, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(5, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(5, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(5, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(5, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(5, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(5, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(5, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(5, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(5, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(5, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(5, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(5, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(5, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(5, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(5, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(5, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(5, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(5, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(5, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(5, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(5, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(5, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
6
<class 'tvm.tir.expr.IntImm'>
T.Mul(6, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(6, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(6, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(6, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(6, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(6, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(6, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(6, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(6, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(6, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(6, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(6, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(6, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(6, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(6, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(6, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(6, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(6, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(6, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(6, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(6, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(6, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(6, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(6, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(6, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(6, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(6, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(6, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(6, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(6, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(6, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(6, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
7
<class 'tvm.tir.expr.IntImm'>
T.Mul(7, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(7, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(7, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(7, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(7, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(7, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(7, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(7, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(7, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(7, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(7, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(7, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(7, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(7, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(7, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(7, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(7, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(7, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(7, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(7, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(7, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(7, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(7, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(7, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(7, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(7, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(7, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(7, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(7, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(7, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(7, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(7, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
8
<class 'tvm.tir.expr.IntImm'>
T.Mul(8, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(8, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(8, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(8, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(8, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(8, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(8, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(8, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(8, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(8, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(8, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(8, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(8, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(8, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(8, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(8, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(8, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(8, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(8, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(8, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(8, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(8, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(8, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(8, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(8, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(8, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(8, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(8, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(8, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(8, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(8, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(8, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
9
<class 'tvm.tir.expr.IntImm'>
T.Mul(9, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(9, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(9, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(9, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(9, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(9, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(9, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(9, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(9, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(9, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(9, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(9, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(9, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(9, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(9, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(9, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(9, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(9, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(9, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(9, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(9, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(9, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(9, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(9, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(9, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(9, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(9, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(9, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(9, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(9, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(9, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(9, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
10
<class 'tvm.tir.expr.IntImm'>
T.Mul(10, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(10, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(10, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(10, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(10, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(10, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(10, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(10, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(10, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(10, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(10, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(10, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(10, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(10, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(10, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(10, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(10, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(10, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(10, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(10, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(10, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(10, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(10, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(10, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(10, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(10, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(10, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(10, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(10, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(10, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(10, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(10, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
11
<class 'tvm.tir.expr.IntImm'>
T.Mul(11, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(11, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(11, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(11, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(11, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(11, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(11, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(11, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(11, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(11, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(11, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(11, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(11, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(11, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(11, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(11, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(11, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(11, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(11, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(11, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(11, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(11, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(11, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(11, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(11, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(11, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(11, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(11, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(11, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(11, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(11, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(11, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
12
<class 'tvm.tir.expr.IntImm'>
T.Mul(12, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(12, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(12, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(12, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(12, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(12, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(12, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(12, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(12, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(12, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(12, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(12, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(12, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(12, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(12, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(12, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(12, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(12, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(12, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(12, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(12, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(12, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(12, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(12, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(12, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(12, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(12, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(12, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(12, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(12, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(12, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(12, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
13
<class 'tvm.tir.expr.IntImm'>
T.Mul(13, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(13, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(13, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(13, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(13, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(13, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(13, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(13, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(13, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(13, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(13, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(13, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(13, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(13, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(13, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(13, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(13, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(13, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(13, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(13, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(13, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(13, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(13, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(13, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(13, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(13, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(13, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(13, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(13, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(13, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(13, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(13, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
14
<class 'tvm.tir.expr.IntImm'>
T.Mul(14, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(14, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(14, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(14, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(14, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(14, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(14, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(14, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(14, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(14, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(14, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(14, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(14, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(14, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(14, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(14, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(14, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(14, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(14, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(14, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(14, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(14, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(14, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(14, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(14, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(14, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(14, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(14, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(14, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(14, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(14, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(14, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
15
<class 'tvm.tir.expr.IntImm'>
T.Mul(15, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(15, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(15, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(15, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(15, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(15, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(15, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(15, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(15, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(15, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(15, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(15, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(15, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(15, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(15, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(15, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(15, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(15, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(15, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(15, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(15, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(15, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(15, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(15, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(15, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(15, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(15, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(15, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(15, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(15, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(15, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(15, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
16
<class 'tvm.tir.expr.IntImm'>
T.Mul(16, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(16, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(16, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(16, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(16, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(16, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(16, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(16, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(16, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(16, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(16, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(16, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(16, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(16, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(16, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(16, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(16, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(16, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(16, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(16, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(16, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(16, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(16, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(16, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(16, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(16, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(16, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(16, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(16, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(16, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(16, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(16, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
17
<class 'tvm.tir.expr.IntImm'>
T.Mul(17, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(17, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(17, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(17, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(17, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(17, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(17, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(17, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(17, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(17, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(17, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(17, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(17, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(17, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(17, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(17, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(17, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(17, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(17, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(17, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(17, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(17, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(17, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(17, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(17, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(17, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(17, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(17, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(17, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(17, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(17, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(17, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
18
<class 'tvm.tir.expr.IntImm'>
T.Mul(18, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(18, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(18, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(18, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(18, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(18, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(18, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(18, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(18, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(18, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(18, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(18, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(18, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(18, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(18, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(18, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(18, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(18, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(18, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(18, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(18, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(18, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(18, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(18, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(18, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(18, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(18, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(18, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(18, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(18, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(18, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(18, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
19
<class 'tvm.tir.expr.IntImm'>
T.Mul(19, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(19, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(19, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(19, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(19, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(19, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(19, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(19, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(19, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(19, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(19, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(19, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(19, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(19, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(19, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(19, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(19, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(19, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(19, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(19, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(19, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(19, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(19, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(19, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(19, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(19, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(19, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(19, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(19, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(19, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(19, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(19, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
20
<class 'tvm.tir.expr.IntImm'>
T.Mul(20, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(20, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(20, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(20, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(20, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(20, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(20, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(20, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(20, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(20, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(20, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(20, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(20, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(20, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(20, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(20, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(20, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(20, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(20, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(20, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(20, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(20, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(20, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(20, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(20, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(20, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(20, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(20, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(20, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(20, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(20, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(20, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
21
<class 'tvm.tir.expr.IntImm'>
T.Mul(21, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(21, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(21, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(21, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(21, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(21, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(21, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(21, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(21, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(21, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(21, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(21, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(21, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(21, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(21, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(21, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(21, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(21, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(21, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(21, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(21, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(21, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(21, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(21, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(21, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(21, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(21, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(21, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(21, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(21, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(21, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(21, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
22
<class 'tvm.tir.expr.IntImm'>
T.Mul(22, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(22, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(22, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(22, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(22, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(22, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(22, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(22, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(22, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(22, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(22, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(22, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(22, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(22, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(22, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(22, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(22, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(22, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(22, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(22, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(22, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(22, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(22, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(22, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(22, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(22, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(22, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(22, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(22, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(22, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(22, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(22, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
23
<class 'tvm.tir.expr.IntImm'>
T.Mul(23, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(23, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(23, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(23, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(23, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(23, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(23, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(23, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(23, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(23, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(23, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(23, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(23, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(23, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(23, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(23, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(23, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(23, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(23, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(23, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(23, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(23, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(23, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(23, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(23, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(23, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(23, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(23, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(23, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(23, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(23, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(23, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
24
<class 'tvm.tir.expr.IntImm'>
T.Mul(24, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(24, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(24, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(24, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(24, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(24, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(24, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(24, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(24, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(24, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(24, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(24, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(24, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(24, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(24, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(24, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(24, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(24, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(24, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(24, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(24, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(24, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(24, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(24, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(24, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(24, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(24, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(24, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(24, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(24, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(24, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(24, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
25
<class 'tvm.tir.expr.IntImm'>
T.Mul(25, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(25, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(25, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(25, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(25, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(25, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(25, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(25, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(25, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(25, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(25, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(25, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(25, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(25, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(25, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(25, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(25, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(25, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(25, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(25, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(25, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(25, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(25, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(25, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(25, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(25, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(25, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(25, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(25, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(25, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(25, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(25, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
26
<class 'tvm.tir.expr.IntImm'>
T.Mul(26, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(26, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(26, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(26, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(26, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(26, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(26, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(26, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(26, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(26, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(26, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(26, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(26, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(26, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(26, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(26, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(26, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(26, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(26, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(26, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(26, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(26, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(26, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(26, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(26, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(26, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(26, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(26, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(26, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(26, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(26, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(26, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
27
<class 'tvm.tir.expr.IntImm'>
T.Mul(27, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(27, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(27, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(27, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(27, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(27, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(27, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(27, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(27, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(27, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(27, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(27, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(27, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(27, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(27, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(27, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(27, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(27, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(27, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(27, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(27, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(27, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(27, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(27, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(27, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(27, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(27, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(27, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(27, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(27, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(27, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(27, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
28
<class 'tvm.tir.expr.IntImm'>
T.Mul(28, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(28, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(28, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(28, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(28, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(28, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(28, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(28, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(28, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(28, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(28, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(28, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(28, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(28, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(28, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(28, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(28, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(28, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(28, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(28, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(28, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(28, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(28, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(28, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(28, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(28, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(28, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(28, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(28, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(28, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(28, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(28, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
29
<class 'tvm.tir.expr.IntImm'>
T.Mul(29, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(29, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(29, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(29, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(29, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(29, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(29, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(29, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(29, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(29, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(29, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(29, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(29, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(29, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(29, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(29, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(29, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(29, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(29, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(29, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(29, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(29, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(29, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(29, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(29, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(29, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(29, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(29, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(29, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(29, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(29, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(29, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
30
<class 'tvm.tir.expr.IntImm'>
T.Mul(30, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(30, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(30, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(30, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(30, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(30, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(30, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(30, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(30, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(30, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(30, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(30, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(30, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(30, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(30, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(30, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(30, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(30, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(30, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(30, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(30, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(30, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(30, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(30, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(30, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(30, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(30, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(30, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(30, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(30, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(30, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(30, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
31
<class 'tvm.tir.expr.IntImm'>
T.Mul(31, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(31, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
T.Mul(31, 49) + threadIdx_x < 1536
<class 'tvm.tir.expr.LT'>
T.Mul(31, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(31, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(31, 49) + threadIdx_x) // 192
<class 'tvm.tir.expr.FloorDiv'>
(T.Mul(31, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(31, 49) + threadIdx_x) // 192 * 4608
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(31, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
T.Mul(31, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(31, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
(T.Mul(31, 49) + threadIdx_x) % 192
<class 'tvm.tir.expr.FloorMod'>
(T.Mul(31, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (T.Mul(31, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(31, 49) + threadIdx_x) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (T.Mul(31, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(31, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (T.Mul(31, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(31, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(31, 49)
<class 'tvm.tir.expr.Mul'>
T.Mul(31, 49) + threadIdx_x
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[T.Mul(31, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(31, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(31, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if T.Mul(31, 49) + threadIdx_x < 1536:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[T.Mul(31, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(31, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(31, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if T.Mul(31, 49) + threadIdx_x < 1536:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[T.Mul(31, 49) + threadIdx_x] = kernel[blockIdx_x * 36864 + (T.Mul(31, 49) + threadIdx_x) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(31, 49) + threadIdx_x) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
0
<class 'tvm.tir.expr.IntImm'>
8
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
4
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
0
<class 'tvm.tir.expr.IntImm'>
T.Add(T.Mul(0, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)]
<class 'tvm.tir.expr.BufferLoad'>
rc_outer_inner
<class 'tvm.tir.expr.Var'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
0
<class 'tvm.tir.expr.IntImm'>
63
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63)
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
threadIdx_x
<class 'tvm.tir.expr.Var'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
768
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
192
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 192)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(0, 192)
<class 'tvm.tir.expr.Add'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(0, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
1
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 1]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 192)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(1, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(0, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
2
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 2]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(2, 192)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(2, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(0, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
3
<class 'tvm.tir.expr.IntImm'>
T.Mul(0, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 3]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(3, 192)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(3, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(0, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(0, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)]
<class 'tvm.tir.expr.BufferLoad'>
1
<class 'tvm.tir.expr.IntImm'>
T.Mul(1, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(0, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(0, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 1]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(1, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 2]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(2, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 3]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(3, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(0, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)]
<class 'tvm.tir.expr.BufferLoad'>
2
<class 'tvm.tir.expr.IntImm'>
T.Mul(2, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(0, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(2, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(0, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 1]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(2, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(1, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(2, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 2]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(2, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(2, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(2, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 3]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(2, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(3, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(2, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(0, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)]
<class 'tvm.tir.expr.BufferLoad'>
3
<class 'tvm.tir.expr.IntImm'>
T.Mul(3, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(0, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(3, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(0, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 1]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(3, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(1, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(3, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 2]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(3, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(2, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(3, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 3]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(3, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(3, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(3, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(0, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)]
<class 'tvm.tir.expr.BufferLoad'>
4
<class 'tvm.tir.expr.IntImm'>
T.Mul(4, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(0, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(4, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(0, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 1]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(4, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(1, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(4, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 2]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(4, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(2, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(4, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 3]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(4, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(3, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(4, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(0, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)]
<class 'tvm.tir.expr.BufferLoad'>
5
<class 'tvm.tir.expr.IntImm'>
T.Mul(5, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(0, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(5, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(0, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 1]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(5, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(1, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(5, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 2]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(5, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(2, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(5, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 3]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(5, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(3, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(5, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(0, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)]
<class 'tvm.tir.expr.BufferLoad'>
6
<class 'tvm.tir.expr.IntImm'>
T.Mul(6, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(0, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(6, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(0, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 1]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(6, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(1, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(6, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 2]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(6, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(2, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(6, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 3]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(6, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(3, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(6, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(0, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)]
<class 'tvm.tir.expr.BufferLoad'>
7
<class 'tvm.tir.expr.IntImm'>
T.Mul(7, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(0, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(7, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(0, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 1]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(7, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(1, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(7, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 2]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(7, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(2, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(7, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(0, 4) + 3]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(7, 63)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(3, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(7, 3)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(0, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(0, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(1, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(0, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(1, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 1]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(1, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 2]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(2, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 3]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(3, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(1, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(0, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(1, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 1]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(1, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 2]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(2, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 3]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(3, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(1, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(0, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(1, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 1]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(1, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 2]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(2, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 3]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(3, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(1, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(0, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(1, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 1]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(1, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 2]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(2, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 3]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(3, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(1, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(0, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(1, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 1]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(1, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 2]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(2, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 3]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(3, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(1, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(0, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(1, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 1]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(1, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 2]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(2, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 3]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(3, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(1, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(0, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(1, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 1]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(1, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 2]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(2, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 3]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(3, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(1, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(0, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Add(T.Mul(1, 4), 0)
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 1]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(1, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 1
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 2]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(2, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 2
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw[T.Mul(1, 4) + 3]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 768) + T.Mul(3, 192)
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24
<class 'tvm.tir.expr.Add'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3)
<class 'tvm.tir.expr.Add'>
T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.expr.Add'>
T.Mul(1, 4)
<class 'tvm.tir.expr.Mul'>
T.Mul(1, 4) + 3
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(1, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
T.Mul(2, 7)
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7)
<class 'tvm.tir.expr.Add'>
rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.expr.Add'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.stmt.BufferStore'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.stmt.SeqStmt'>
for rc_outer_inner in range(8):
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    threadIdx_x = T.int32()
    kernel_shared = T.Buffer((1536,), scope="shared")
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.stmt.For'>
threadIdx_x = T.env_thread("threadIdx.x")
pad_temp_shared = T.Buffer((4032,), scope="shared")
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(0, 7) + threadIdx_x // 7 < 576:
        if T.Mul(0, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(0, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(0, 7) + threadIdx_x // 7) % 9 and (T.Mul(0, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(0, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(0, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(1, 7) + threadIdx_x // 7 < 576:
        if T.Mul(1, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(1, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(1, 7) + threadIdx_x // 7) % 9 and (T.Mul(1, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(1, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(1, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(2, 7) + threadIdx_x // 7 < 576:
        if T.Mul(2, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(2, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(2, 7) + threadIdx_x // 7) % 9 and (T.Mul(2, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(2, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(2, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(3, 7) + threadIdx_x // 7 < 576:
        if T.Mul(3, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(3, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(3, 7) + threadIdx_x // 7) % 9 and (T.Mul(3, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(3, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(3, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(4, 7) + threadIdx_x // 7 < 576:
        if T.Mul(4, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(4, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(4, 7) + threadIdx_x // 7) % 9 and (T.Mul(4, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(4, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(4, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(5, 7) + threadIdx_x // 7 < 576:
        if T.Mul(5, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(5, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(5, 7) + threadIdx_x // 7) % 9 and (T.Mul(5, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(5, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(5, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(6, 7) + threadIdx_x // 7 < 576:
        if T.Mul(6, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(6, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(6, 7) + threadIdx_x // 7) % 9 and (T.Mul(6, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(6, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(6, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(7, 7) + threadIdx_x // 7 < 576:
        if T.Mul(7, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(7, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(7, 7) + threadIdx_x // 7) % 9 and (T.Mul(7, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(7, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(7, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(8, 7) + threadIdx_x // 7 < 576:
        if T.Mul(8, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(8, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(8, 7) + threadIdx_x // 7) % 9 and (T.Mul(8, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(8, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(8, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(9, 7) + threadIdx_x // 7 < 576:
        if T.Mul(9, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(9, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(9, 7) + threadIdx_x // 7) % 9 and (T.Mul(9, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(9, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(9, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(10, 7) + threadIdx_x // 7 < 576:
        if T.Mul(10, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(10, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(10, 7) + threadIdx_x // 7) % 9 and (T.Mul(10, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(10, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(10, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(11, 7) + threadIdx_x // 7 < 576:
        if T.Mul(11, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(11, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(11, 7) + threadIdx_x // 7) % 9 and (T.Mul(11, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(11, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(11, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(12, 7) + threadIdx_x // 7 < 576:
        if T.Mul(12, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(12, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(12, 7) + threadIdx_x // 7) % 9 and (T.Mul(12, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(12, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(12, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(13, 7) + threadIdx_x // 7 < 576:
        if T.Mul(13, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(13, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(13, 7) + threadIdx_x // 7) % 9 and (T.Mul(13, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(13, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(13, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(14, 7) + threadIdx_x // 7 < 576:
        if T.Mul(14, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(14, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(14, 7) + threadIdx_x // 7) % 9 and (T.Mul(14, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(14, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(14, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(15, 7) + threadIdx_x // 7 < 576:
        if T.Mul(15, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(15, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(15, 7) + threadIdx_x // 7) % 9 and (T.Mul(15, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(15, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(15, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(16, 7) + threadIdx_x // 7 < 576:
        if T.Mul(16, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(16, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(16, 7) + threadIdx_x // 7) % 9 and (T.Mul(16, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(16, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(16, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(17, 7) + threadIdx_x // 7 < 576:
        if T.Mul(17, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(17, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(17, 7) + threadIdx_x // 7) % 9 and (T.Mul(17, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(17, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(17, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(18, 7) + threadIdx_x // 7 < 576:
        if T.Mul(18, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(18, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(18, 7) + threadIdx_x // 7) % 9 and (T.Mul(18, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(18, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(18, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(19, 7) + threadIdx_x // 7 < 576:
        if T.Mul(19, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(19, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(19, 7) + threadIdx_x // 7) % 9 and (T.Mul(19, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(19, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(19, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(20, 7) + threadIdx_x // 7 < 576:
        if T.Mul(20, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(20, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(20, 7) + threadIdx_x // 7) % 9 and (T.Mul(20, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(20, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(20, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(21, 7) + threadIdx_x // 7 < 576:
        if T.Mul(21, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(21, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(21, 7) + threadIdx_x // 7) % 9 and (T.Mul(21, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(21, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(21, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(22, 7) + threadIdx_x // 7 < 576:
        if T.Mul(22, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(22, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(22, 7) + threadIdx_x // 7) % 9 and (T.Mul(22, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(22, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(22, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(23, 7) + threadIdx_x // 7 < 576:
        if T.Mul(23, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(23, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(23, 7) + threadIdx_x // 7) % 9 and (T.Mul(23, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(23, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(23, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(24, 7) + threadIdx_x // 7 < 576:
        if T.Mul(24, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(24, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(24, 7) + threadIdx_x // 7) % 9 and (T.Mul(24, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(24, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(24, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(25, 7) + threadIdx_x // 7 < 576:
        if T.Mul(25, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(25, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(25, 7) + threadIdx_x // 7) % 9 and (T.Mul(25, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(25, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(25, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(26, 7) + threadIdx_x // 7 < 576:
        if T.Mul(26, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(26, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(26, 7) + threadIdx_x // 7) % 9 and (T.Mul(26, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(26, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(26, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(27, 7) + threadIdx_x // 7 < 576:
        if T.Mul(27, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(27, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(27, 7) + threadIdx_x // 7) % 9 and (T.Mul(27, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(27, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(27, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(28, 7) + threadIdx_x // 7 < 576:
        if T.Mul(28, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(28, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(28, 7) + threadIdx_x // 7) % 9 and (T.Mul(28, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(28, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(28, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(29, 7) + threadIdx_x // 7 < 576:
        if T.Mul(29, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(29, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(29, 7) + threadIdx_x // 7) % 9 and (T.Mul(29, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(29, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(29, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(30, 7) + threadIdx_x // 7 < 576:
        if T.Mul(30, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(30, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(30, 7) + threadIdx_x // 7) % 9 and (T.Mul(30, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(30, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(30, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(31, 7) + threadIdx_x // 7 < 576:
        if T.Mul(31, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(31, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(31, 7) + threadIdx_x // 7) % 9 and (T.Mul(31, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(31, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(31, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(32, 7) + threadIdx_x // 7 < 576:
        if T.Mul(32, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(32, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(32, 7) + threadIdx_x // 7) % 9 and (T.Mul(32, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(32, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(32, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(33, 7) + threadIdx_x // 7 < 576:
        if T.Mul(33, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(33, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(33, 7) + threadIdx_x // 7) % 9 and (T.Mul(33, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(33, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(33, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(34, 7) + threadIdx_x // 7 < 576:
        if T.Mul(34, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(34, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(34, 7) + threadIdx_x // 7) % 9 and (T.Mul(34, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(34, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(34, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(35, 7) + threadIdx_x // 7 < 576:
        if T.Mul(35, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(35, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(35, 7) + threadIdx_x // 7) % 9 and (T.Mul(35, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(35, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(35, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(36, 7) + threadIdx_x // 7 < 576:
        if T.Mul(36, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(36, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(36, 7) + threadIdx_x // 7) % 9 and (T.Mul(36, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(36, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(36, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(37, 7) + threadIdx_x // 7 < 576:
        if T.Mul(37, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(37, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(37, 7) + threadIdx_x // 7) % 9 and (T.Mul(37, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(37, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(37, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(38, 7) + threadIdx_x // 7 < 576:
        if T.Mul(38, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(38, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(38, 7) + threadIdx_x // 7) % 9 and (T.Mul(38, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(38, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(38, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(39, 7) + threadIdx_x // 7 < 576:
        if T.Mul(39, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(39, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(39, 7) + threadIdx_x // 7) % 9 and (T.Mul(39, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(39, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(39, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(40, 7) + threadIdx_x // 7 < 576:
        if T.Mul(40, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(40, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(40, 7) + threadIdx_x // 7) % 9 and (T.Mul(40, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(40, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(40, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(41, 7) + threadIdx_x // 7 < 576:
        if T.Mul(41, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(41, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(41, 7) + threadIdx_x // 7) % 9 and (T.Mul(41, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(41, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(41, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(42, 7) + threadIdx_x // 7 < 576:
        if T.Mul(42, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(42, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(42, 7) + threadIdx_x // 7) % 9 and (T.Mul(42, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(42, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(42, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(43, 7) + threadIdx_x // 7 < 576:
        if T.Mul(43, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(43, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(43, 7) + threadIdx_x // 7) % 9 and (T.Mul(43, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(43, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(43, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(44, 7) + threadIdx_x // 7 < 576:
        if T.Mul(44, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(44, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(44, 7) + threadIdx_x // 7) % 9 and (T.Mul(44, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(44, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(44, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(45, 7) + threadIdx_x // 7 < 576:
        if T.Mul(45, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(45, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(45, 7) + threadIdx_x // 7) % 9 and (T.Mul(45, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(45, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(45, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(46, 7) + threadIdx_x // 7 < 576:
        if T.Mul(46, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(46, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(46, 7) + threadIdx_x // 7) % 9 and (T.Mul(46, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(46, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(46, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(47, 7) + threadIdx_x // 7 < 576:
        if T.Mul(47, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(47, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(47, 7) + threadIdx_x // 7) % 9 and (T.Mul(47, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(47, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(47, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(48, 7) + threadIdx_x // 7 < 576:
        if T.Mul(48, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(48, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(48, 7) + threadIdx_x // 7) % 9 and (T.Mul(48, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(48, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(48, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(49, 7) + threadIdx_x // 7 < 576:
        if T.Mul(49, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(49, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(49, 7) + threadIdx_x // 7) % 9 and (T.Mul(49, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(49, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(49, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(50, 7) + threadIdx_x // 7 < 576:
        if T.Mul(50, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(50, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(50, 7) + threadIdx_x // 7) % 9 and (T.Mul(50, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(50, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(50, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(51, 7) + threadIdx_x // 7 < 576:
        if T.Mul(51, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(51, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(51, 7) + threadIdx_x // 7) % 9 and (T.Mul(51, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(51, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(51, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(52, 7) + threadIdx_x // 7 < 576:
        if T.Mul(52, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(52, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(52, 7) + threadIdx_x // 7) % 9 and (T.Mul(52, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(52, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(52, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(53, 7) + threadIdx_x // 7 < 576:
        if T.Mul(53, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(53, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(53, 7) + threadIdx_x // 7) % 9 and (T.Mul(53, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(53, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(53, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(54, 7) + threadIdx_x // 7 < 576:
        if T.Mul(54, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(54, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(54, 7) + threadIdx_x // 7) % 9 and (T.Mul(54, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(54, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(54, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(55, 7) + threadIdx_x // 7 < 576:
        if T.Mul(55, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(55, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(55, 7) + threadIdx_x // 7) % 9 and (T.Mul(55, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(55, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(55, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(56, 7) + threadIdx_x // 7 < 576:
        if T.Mul(56, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(56, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(56, 7) + threadIdx_x // 7) % 9 and (T.Mul(56, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(56, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(56, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(57, 7) + threadIdx_x // 7 < 576:
        if T.Mul(57, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(57, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(57, 7) + threadIdx_x // 7) % 9 and (T.Mul(57, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(57, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(57, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(58, 7) + threadIdx_x // 7 < 576:
        if T.Mul(58, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(58, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(58, 7) + threadIdx_x // 7) % 9 and (T.Mul(58, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(58, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(58, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(59, 7) + threadIdx_x // 7 < 576:
        if T.Mul(59, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(59, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(59, 7) + threadIdx_x // 7) % 9 and (T.Mul(59, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(59, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(59, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(60, 7) + threadIdx_x // 7 < 576:
        if T.Mul(60, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(60, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(60, 7) + threadIdx_x // 7) % 9 and (T.Mul(60, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(60, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(60, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(61, 7) + threadIdx_x // 7 < 576:
        if T.Mul(61, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(61, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(61, 7) + threadIdx_x // 7) % 9 and (T.Mul(61, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(61, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(61, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(62, 7) + threadIdx_x // 7 < 576:
        if T.Mul(62, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(62, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(62, 7) + threadIdx_x // 7) % 9 and (T.Mul(62, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(62, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(62, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(63, 7) + threadIdx_x // 7 < 576:
        if T.Mul(63, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(63, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(63, 7) + threadIdx_x // 7) % 9 and (T.Mul(63, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(63, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(63, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(64, 7) + threadIdx_x // 7 < 576:
        if T.Mul(64, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(64, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(64, 7) + threadIdx_x // 7) % 9 and (T.Mul(64, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(64, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(64, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(65, 7) + threadIdx_x // 7 < 576:
        if T.Mul(65, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(65, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(65, 7) + threadIdx_x // 7) % 9 and (T.Mul(65, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(65, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(65, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(66, 7) + threadIdx_x // 7 < 576:
        if T.Mul(66, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(66, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(66, 7) + threadIdx_x // 7) % 9 and (T.Mul(66, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(66, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(66, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(67, 7) + threadIdx_x // 7 < 576:
        if T.Mul(67, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(67, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(67, 7) + threadIdx_x // 7) % 9 and (T.Mul(67, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(67, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(67, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(68, 7) + threadIdx_x // 7 < 576:
        if T.Mul(68, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(68, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(68, 7) + threadIdx_x // 7) % 9 and (T.Mul(68, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(68, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(68, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(69, 7) + threadIdx_x // 7 < 576:
        if T.Mul(69, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(69, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(69, 7) + threadIdx_x // 7) % 9 and (T.Mul(69, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(69, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(69, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(70, 7) + threadIdx_x // 7 < 576:
        if T.Mul(70, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(70, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(70, 7) + threadIdx_x // 7) % 9 and (T.Mul(70, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(70, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(70, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(71, 7) + threadIdx_x // 7 < 576:
        if T.Mul(71, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(71, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(71, 7) + threadIdx_x // 7) % 9 and (T.Mul(71, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(71, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(71, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(72, 7) + threadIdx_x // 7 < 576:
        if T.Mul(72, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(72, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(72, 7) + threadIdx_x // 7) % 9 and (T.Mul(72, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(72, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(72, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(73, 7) + threadIdx_x // 7 < 576:
        if T.Mul(73, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(73, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(73, 7) + threadIdx_x // 7) % 9 and (T.Mul(73, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(73, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(73, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(74, 7) + threadIdx_x // 7 < 576:
        if T.Mul(74, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(74, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(74, 7) + threadIdx_x // 7) % 9 and (T.Mul(74, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(74, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(74, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(75, 7) + threadIdx_x // 7 < 576:
        if T.Mul(75, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(75, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(75, 7) + threadIdx_x // 7) % 9 and (T.Mul(75, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(75, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(75, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(76, 7) + threadIdx_x // 7 < 576:
        if T.Mul(76, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(76, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(76, 7) + threadIdx_x // 7) % 9 and (T.Mul(76, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(76, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(76, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(77, 7) + threadIdx_x // 7 < 576:
        if T.Mul(77, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(77, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(77, 7) + threadIdx_x // 7) % 9 and (T.Mul(77, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(77, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(77, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(78, 7) + threadIdx_x // 7 < 576:
        if T.Mul(78, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(78, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(78, 7) + threadIdx_x // 7) % 9 and (T.Mul(78, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(78, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(78, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(79, 7) + threadIdx_x // 7 < 576:
        if T.Mul(79, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(79, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(79, 7) + threadIdx_x // 7) % 9 and (T.Mul(79, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(79, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(79, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(80, 7) + threadIdx_x // 7 < 576:
        if T.Mul(80, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(80, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(80, 7) + threadIdx_x // 7) % 9 and (T.Mul(80, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(80, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(80, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(81, 7) + threadIdx_x // 7 < 576:
        if T.Mul(81, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(81, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(81, 7) + threadIdx_x // 7) % 9 and (T.Mul(81, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(81, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(81, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if T.Mul(82, 7) + threadIdx_x // 7 < 576:
        if T.Mul(82, 49) + threadIdx_x < 4032:
            pad_temp_shared[T.Mul(82, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(82, 7) + threadIdx_x // 7) % 9 and (T.Mul(82, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(82, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(82, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
threadIdx_x_1 = T.env_thread("threadIdx.x")
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(0, 49) + threadIdx_x_1 < 1536:
        blockIdx_x = T.int32()
        kernel_shared[T.Mul(0, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(0, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(0, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
blockIdx_x = T.int32()
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(1, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(1, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(1, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(1, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(2, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(2, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(2, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(2, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(3, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(3, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(3, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(3, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(4, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(4, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(4, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(4, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(5, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(5, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(5, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(5, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(6, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(6, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(6, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(6, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(7, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(7, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(7, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(7, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(8, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(8, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(8, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(8, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(9, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(9, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(9, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(9, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(10, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(10, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(10, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(10, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(11, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(11, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(11, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(11, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(12, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(12, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(12, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(12, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(13, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(13, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(13, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(13, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(14, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(14, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(14, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(14, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(15, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(15, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(15, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(15, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(16, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(16, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(16, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(16, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(17, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(17, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(17, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(17, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(18, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(18, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(18, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(18, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(19, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(19, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(19, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(19, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(20, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(20, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(20, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(20, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(21, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(21, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(21, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(21, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(22, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(22, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(22, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(22, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(23, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(23, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(23, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(23, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(24, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(24, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(24, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(24, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(25, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(25, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(25, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(25, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(26, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(26, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(26, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(26, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(27, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(27, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(27, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(27, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(28, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(28, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(28, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(28, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(29, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(29, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(29, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(29, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(30, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(30, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(30, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(30, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    if T.Mul(31, 49) + threadIdx_x_1 < 1536:
        kernel_shared[T.Mul(31, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(31, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(31, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
for rc_outer_inner in range(8):
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    threadIdx_x_2 = T.int32()
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
    conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
    conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.stmt.SeqStmt'>
for rx_outer_outer in range(3):
    threadIdx_x = T.env_thread("threadIdx.x")
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(0, 7) + threadIdx_x // 7 < 576:
            if T.Mul(0, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(0, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(0, 7) + threadIdx_x // 7) % 9 and (T.Mul(0, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(0, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(0, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(1, 7) + threadIdx_x // 7 < 576:
            if T.Mul(1, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(1, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(1, 7) + threadIdx_x // 7) % 9 and (T.Mul(1, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(1, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(1, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(2, 7) + threadIdx_x // 7 < 576:
            if T.Mul(2, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(2, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(2, 7) + threadIdx_x // 7) % 9 and (T.Mul(2, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(2, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(2, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(3, 7) + threadIdx_x // 7 < 576:
            if T.Mul(3, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(3, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(3, 7) + threadIdx_x // 7) % 9 and (T.Mul(3, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(3, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(3, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(4, 7) + threadIdx_x // 7 < 576:
            if T.Mul(4, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(4, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(4, 7) + threadIdx_x // 7) % 9 and (T.Mul(4, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(4, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(4, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(5, 7) + threadIdx_x // 7 < 576:
            if T.Mul(5, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(5, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(5, 7) + threadIdx_x // 7) % 9 and (T.Mul(5, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(5, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(5, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(6, 7) + threadIdx_x // 7 < 576:
            if T.Mul(6, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(6, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(6, 7) + threadIdx_x // 7) % 9 and (T.Mul(6, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(6, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(6, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(7, 7) + threadIdx_x // 7 < 576:
            if T.Mul(7, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(7, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(7, 7) + threadIdx_x // 7) % 9 and (T.Mul(7, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(7, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(7, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(8, 7) + threadIdx_x // 7 < 576:
            if T.Mul(8, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(8, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(8, 7) + threadIdx_x // 7) % 9 and (T.Mul(8, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(8, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(8, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(9, 7) + threadIdx_x // 7 < 576:
            if T.Mul(9, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(9, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(9, 7) + threadIdx_x // 7) % 9 and (T.Mul(9, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(9, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(9, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(10, 7) + threadIdx_x // 7 < 576:
            if T.Mul(10, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(10, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(10, 7) + threadIdx_x // 7) % 9 and (T.Mul(10, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(10, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(10, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(11, 7) + threadIdx_x // 7 < 576:
            if T.Mul(11, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(11, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(11, 7) + threadIdx_x // 7) % 9 and (T.Mul(11, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(11, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(11, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(12, 7) + threadIdx_x // 7 < 576:
            if T.Mul(12, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(12, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(12, 7) + threadIdx_x // 7) % 9 and (T.Mul(12, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(12, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(12, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(13, 7) + threadIdx_x // 7 < 576:
            if T.Mul(13, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(13, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(13, 7) + threadIdx_x // 7) % 9 and (T.Mul(13, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(13, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(13, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(14, 7) + threadIdx_x // 7 < 576:
            if T.Mul(14, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(14, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(14, 7) + threadIdx_x // 7) % 9 and (T.Mul(14, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(14, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(14, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(15, 7) + threadIdx_x // 7 < 576:
            if T.Mul(15, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(15, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(15, 7) + threadIdx_x // 7) % 9 and (T.Mul(15, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(15, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(15, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(16, 7) + threadIdx_x // 7 < 576:
            if T.Mul(16, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(16, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(16, 7) + threadIdx_x // 7) % 9 and (T.Mul(16, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(16, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(16, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(17, 7) + threadIdx_x // 7 < 576:
            if T.Mul(17, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(17, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(17, 7) + threadIdx_x // 7) % 9 and (T.Mul(17, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(17, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(17, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(18, 7) + threadIdx_x // 7 < 576:
            if T.Mul(18, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(18, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(18, 7) + threadIdx_x // 7) % 9 and (T.Mul(18, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(18, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(18, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(19, 7) + threadIdx_x // 7 < 576:
            if T.Mul(19, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(19, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(19, 7) + threadIdx_x // 7) % 9 and (T.Mul(19, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(19, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(19, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(20, 7) + threadIdx_x // 7 < 576:
            if T.Mul(20, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(20, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(20, 7) + threadIdx_x // 7) % 9 and (T.Mul(20, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(20, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(20, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(21, 7) + threadIdx_x // 7 < 576:
            if T.Mul(21, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(21, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(21, 7) + threadIdx_x // 7) % 9 and (T.Mul(21, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(21, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(21, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(22, 7) + threadIdx_x // 7 < 576:
            if T.Mul(22, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(22, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(22, 7) + threadIdx_x // 7) % 9 and (T.Mul(22, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(22, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(22, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(23, 7) + threadIdx_x // 7 < 576:
            if T.Mul(23, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(23, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(23, 7) + threadIdx_x // 7) % 9 and (T.Mul(23, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(23, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(23, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(24, 7) + threadIdx_x // 7 < 576:
            if T.Mul(24, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(24, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(24, 7) + threadIdx_x // 7) % 9 and (T.Mul(24, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(24, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(24, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(25, 7) + threadIdx_x // 7 < 576:
            if T.Mul(25, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(25, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(25, 7) + threadIdx_x // 7) % 9 and (T.Mul(25, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(25, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(25, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(26, 7) + threadIdx_x // 7 < 576:
            if T.Mul(26, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(26, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(26, 7) + threadIdx_x // 7) % 9 and (T.Mul(26, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(26, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(26, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(27, 7) + threadIdx_x // 7 < 576:
            if T.Mul(27, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(27, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(27, 7) + threadIdx_x // 7) % 9 and (T.Mul(27, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(27, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(27, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(28, 7) + threadIdx_x // 7 < 576:
            if T.Mul(28, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(28, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(28, 7) + threadIdx_x // 7) % 9 and (T.Mul(28, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(28, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(28, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(29, 7) + threadIdx_x // 7 < 576:
            if T.Mul(29, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(29, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(29, 7) + threadIdx_x // 7) % 9 and (T.Mul(29, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(29, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(29, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(30, 7) + threadIdx_x // 7 < 576:
            if T.Mul(30, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(30, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(30, 7) + threadIdx_x // 7) % 9 and (T.Mul(30, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(30, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(30, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(31, 7) + threadIdx_x // 7 < 576:
            if T.Mul(31, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(31, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(31, 7) + threadIdx_x // 7) % 9 and (T.Mul(31, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(31, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(31, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(32, 7) + threadIdx_x // 7 < 576:
            if T.Mul(32, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(32, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(32, 7) + threadIdx_x // 7) % 9 and (T.Mul(32, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(32, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(32, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(33, 7) + threadIdx_x // 7 < 576:
            if T.Mul(33, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(33, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(33, 7) + threadIdx_x // 7) % 9 and (T.Mul(33, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(33, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(33, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(34, 7) + threadIdx_x // 7 < 576:
            if T.Mul(34, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(34, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(34, 7) + threadIdx_x // 7) % 9 and (T.Mul(34, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(34, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(34, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(35, 7) + threadIdx_x // 7 < 576:
            if T.Mul(35, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(35, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(35, 7) + threadIdx_x // 7) % 9 and (T.Mul(35, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(35, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(35, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(36, 7) + threadIdx_x // 7 < 576:
            if T.Mul(36, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(36, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(36, 7) + threadIdx_x // 7) % 9 and (T.Mul(36, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(36, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(36, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(37, 7) + threadIdx_x // 7 < 576:
            if T.Mul(37, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(37, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(37, 7) + threadIdx_x // 7) % 9 and (T.Mul(37, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(37, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(37, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(38, 7) + threadIdx_x // 7 < 576:
            if T.Mul(38, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(38, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(38, 7) + threadIdx_x // 7) % 9 and (T.Mul(38, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(38, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(38, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(39, 7) + threadIdx_x // 7 < 576:
            if T.Mul(39, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(39, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(39, 7) + threadIdx_x // 7) % 9 and (T.Mul(39, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(39, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(39, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(40, 7) + threadIdx_x // 7 < 576:
            if T.Mul(40, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(40, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(40, 7) + threadIdx_x // 7) % 9 and (T.Mul(40, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(40, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(40, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(41, 7) + threadIdx_x // 7 < 576:
            if T.Mul(41, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(41, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(41, 7) + threadIdx_x // 7) % 9 and (T.Mul(41, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(41, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(41, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(42, 7) + threadIdx_x // 7 < 576:
            if T.Mul(42, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(42, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(42, 7) + threadIdx_x // 7) % 9 and (T.Mul(42, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(42, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(42, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(43, 7) + threadIdx_x // 7 < 576:
            if T.Mul(43, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(43, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(43, 7) + threadIdx_x // 7) % 9 and (T.Mul(43, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(43, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(43, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(44, 7) + threadIdx_x // 7 < 576:
            if T.Mul(44, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(44, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(44, 7) + threadIdx_x // 7) % 9 and (T.Mul(44, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(44, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(44, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(45, 7) + threadIdx_x // 7 < 576:
            if T.Mul(45, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(45, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(45, 7) + threadIdx_x // 7) % 9 and (T.Mul(45, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(45, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(45, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(46, 7) + threadIdx_x // 7 < 576:
            if T.Mul(46, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(46, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(46, 7) + threadIdx_x // 7) % 9 and (T.Mul(46, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(46, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(46, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(47, 7) + threadIdx_x // 7 < 576:
            if T.Mul(47, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(47, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(47, 7) + threadIdx_x // 7) % 9 and (T.Mul(47, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(47, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(47, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(48, 7) + threadIdx_x // 7 < 576:
            if T.Mul(48, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(48, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(48, 7) + threadIdx_x // 7) % 9 and (T.Mul(48, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(48, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(48, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(49, 7) + threadIdx_x // 7 < 576:
            if T.Mul(49, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(49, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(49, 7) + threadIdx_x // 7) % 9 and (T.Mul(49, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(49, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(49, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(50, 7) + threadIdx_x // 7 < 576:
            if T.Mul(50, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(50, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(50, 7) + threadIdx_x // 7) % 9 and (T.Mul(50, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(50, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(50, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(51, 7) + threadIdx_x // 7 < 576:
            if T.Mul(51, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(51, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(51, 7) + threadIdx_x // 7) % 9 and (T.Mul(51, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(51, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(51, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(52, 7) + threadIdx_x // 7 < 576:
            if T.Mul(52, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(52, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(52, 7) + threadIdx_x // 7) % 9 and (T.Mul(52, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(52, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(52, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(53, 7) + threadIdx_x // 7 < 576:
            if T.Mul(53, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(53, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(53, 7) + threadIdx_x // 7) % 9 and (T.Mul(53, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(53, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(53, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(54, 7) + threadIdx_x // 7 < 576:
            if T.Mul(54, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(54, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(54, 7) + threadIdx_x // 7) % 9 and (T.Mul(54, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(54, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(54, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(55, 7) + threadIdx_x // 7 < 576:
            if T.Mul(55, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(55, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(55, 7) + threadIdx_x // 7) % 9 and (T.Mul(55, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(55, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(55, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(56, 7) + threadIdx_x // 7 < 576:
            if T.Mul(56, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(56, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(56, 7) + threadIdx_x // 7) % 9 and (T.Mul(56, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(56, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(56, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(57, 7) + threadIdx_x // 7 < 576:
            if T.Mul(57, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(57, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(57, 7) + threadIdx_x // 7) % 9 and (T.Mul(57, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(57, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(57, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(58, 7) + threadIdx_x // 7 < 576:
            if T.Mul(58, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(58, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(58, 7) + threadIdx_x // 7) % 9 and (T.Mul(58, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(58, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(58, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(59, 7) + threadIdx_x // 7 < 576:
            if T.Mul(59, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(59, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(59, 7) + threadIdx_x // 7) % 9 and (T.Mul(59, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(59, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(59, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(60, 7) + threadIdx_x // 7 < 576:
            if T.Mul(60, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(60, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(60, 7) + threadIdx_x // 7) % 9 and (T.Mul(60, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(60, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(60, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(61, 7) + threadIdx_x // 7 < 576:
            if T.Mul(61, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(61, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(61, 7) + threadIdx_x // 7) % 9 and (T.Mul(61, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(61, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(61, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(62, 7) + threadIdx_x // 7 < 576:
            if T.Mul(62, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(62, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(62, 7) + threadIdx_x // 7) % 9 and (T.Mul(62, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(62, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(62, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(63, 7) + threadIdx_x // 7 < 576:
            if T.Mul(63, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(63, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(63, 7) + threadIdx_x // 7) % 9 and (T.Mul(63, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(63, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(63, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(64, 7) + threadIdx_x // 7 < 576:
            if T.Mul(64, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(64, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(64, 7) + threadIdx_x // 7) % 9 and (T.Mul(64, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(64, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(64, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(65, 7) + threadIdx_x // 7 < 576:
            if T.Mul(65, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(65, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(65, 7) + threadIdx_x // 7) % 9 and (T.Mul(65, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(65, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(65, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(66, 7) + threadIdx_x // 7 < 576:
            if T.Mul(66, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(66, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(66, 7) + threadIdx_x // 7) % 9 and (T.Mul(66, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(66, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(66, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(67, 7) + threadIdx_x // 7 < 576:
            if T.Mul(67, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(67, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(67, 7) + threadIdx_x // 7) % 9 and (T.Mul(67, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(67, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(67, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(68, 7) + threadIdx_x // 7 < 576:
            if T.Mul(68, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(68, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(68, 7) + threadIdx_x // 7) % 9 and (T.Mul(68, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(68, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(68, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(69, 7) + threadIdx_x // 7 < 576:
            if T.Mul(69, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(69, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(69, 7) + threadIdx_x // 7) % 9 and (T.Mul(69, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(69, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(69, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(70, 7) + threadIdx_x // 7 < 576:
            if T.Mul(70, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(70, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(70, 7) + threadIdx_x // 7) % 9 and (T.Mul(70, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(70, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(70, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(71, 7) + threadIdx_x // 7 < 576:
            if T.Mul(71, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(71, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(71, 7) + threadIdx_x // 7) % 9 and (T.Mul(71, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(71, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(71, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(72, 7) + threadIdx_x // 7 < 576:
            if T.Mul(72, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(72, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(72, 7) + threadIdx_x // 7) % 9 and (T.Mul(72, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(72, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(72, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(73, 7) + threadIdx_x // 7 < 576:
            if T.Mul(73, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(73, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(73, 7) + threadIdx_x // 7) % 9 and (T.Mul(73, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(73, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(73, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(74, 7) + threadIdx_x // 7 < 576:
            if T.Mul(74, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(74, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(74, 7) + threadIdx_x // 7) % 9 and (T.Mul(74, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(74, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(74, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(75, 7) + threadIdx_x // 7 < 576:
            if T.Mul(75, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(75, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(75, 7) + threadIdx_x // 7) % 9 and (T.Mul(75, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(75, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(75, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(76, 7) + threadIdx_x // 7 < 576:
            if T.Mul(76, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(76, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(76, 7) + threadIdx_x // 7) % 9 and (T.Mul(76, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(76, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(76, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(77, 7) + threadIdx_x // 7 < 576:
            if T.Mul(77, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(77, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(77, 7) + threadIdx_x // 7) % 9 and (T.Mul(77, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(77, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(77, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(78, 7) + threadIdx_x // 7 < 576:
            if T.Mul(78, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(78, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(78, 7) + threadIdx_x // 7) % 9 and (T.Mul(78, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(78, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(78, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(79, 7) + threadIdx_x // 7 < 576:
            if T.Mul(79, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(79, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(79, 7) + threadIdx_x // 7) % 9 and (T.Mul(79, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(79, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(79, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(80, 7) + threadIdx_x // 7 < 576:
            if T.Mul(80, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(80, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(80, 7) + threadIdx_x // 7) % 9 and (T.Mul(80, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(80, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(80, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(81, 7) + threadIdx_x // 7 < 576:
            if T.Mul(81, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(81, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(81, 7) + threadIdx_x // 7) % 9 and (T.Mul(81, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(81, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(81, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(82, 7) + threadIdx_x // 7 < 576:
            if T.Mul(82, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(82, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(82, 7) + threadIdx_x // 7) % 9 and (T.Mul(82, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(82, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(82, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    threadIdx_x_1 = T.env_thread("threadIdx.x")
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(0, 49) + threadIdx_x_1 < 1536:
            blockIdx_x = T.int32()
            kernel_shared[T.Mul(0, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(0, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(0, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    blockIdx_x = T.int32()
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(1, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(1, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(1, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(1, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(2, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(2, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(2, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(2, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(3, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(3, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(3, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(3, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(4, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(4, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(4, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(4, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(5, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(5, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(5, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(5, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(6, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(6, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(6, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(6, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(7, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(7, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(7, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(7, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(8, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(8, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(8, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(8, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(9, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(9, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(9, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(9, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(10, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(10, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(10, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(10, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(11, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(11, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(11, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(11, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(12, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(12, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(12, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(12, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(13, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(13, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(13, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(13, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(14, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(14, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(14, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(14, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(15, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(15, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(15, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(15, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(16, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(16, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(16, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(16, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(17, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(17, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(17, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(17, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(18, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(18, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(18, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(18, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(19, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(19, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(19, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(19, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(20, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(20, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(20, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(20, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(21, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(21, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(21, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(21, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(22, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(22, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(22, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(22, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(23, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(23, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(23, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(23, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(24, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(24, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(24, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(24, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(25, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(25, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(25, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(25, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(26, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(26, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(26, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(26, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(27, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(27, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(27, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(27, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(28, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(28, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(28, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(28, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(29, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(29, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(29, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(29, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(30, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(30, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(30, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(30, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(31, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(31, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(31, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(31, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    for rc_outer_inner in range(8):
        conv2d_nchw = T.Buffer((8,), scope="local", align=32)
        threadIdx_x_2 = T.int32()
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.stmt.For'>
for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
    threadIdx_x = T.env_thread("threadIdx.x")
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    data = T.Buffer((25088,))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(0, 7) + threadIdx_x // 7 < 576:
            if T.Mul(0, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(0, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(0, 7) + threadIdx_x // 7) % 9 and (T.Mul(0, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(0, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(0, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(1, 7) + threadIdx_x // 7 < 576:
            if T.Mul(1, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(1, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(1, 7) + threadIdx_x // 7) % 9 and (T.Mul(1, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(1, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(1, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(2, 7) + threadIdx_x // 7 < 576:
            if T.Mul(2, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(2, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(2, 7) + threadIdx_x // 7) % 9 and (T.Mul(2, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(2, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(2, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(3, 7) + threadIdx_x // 7 < 576:
            if T.Mul(3, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(3, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(3, 7) + threadIdx_x // 7) % 9 and (T.Mul(3, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(3, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(3, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(4, 7) + threadIdx_x // 7 < 576:
            if T.Mul(4, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(4, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(4, 7) + threadIdx_x // 7) % 9 and (T.Mul(4, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(4, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(4, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(5, 7) + threadIdx_x // 7 < 576:
            if T.Mul(5, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(5, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(5, 7) + threadIdx_x // 7) % 9 and (T.Mul(5, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(5, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(5, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(6, 7) + threadIdx_x // 7 < 576:
            if T.Mul(6, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(6, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(6, 7) + threadIdx_x // 7) % 9 and (T.Mul(6, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(6, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(6, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(7, 7) + threadIdx_x // 7 < 576:
            if T.Mul(7, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(7, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(7, 7) + threadIdx_x // 7) % 9 and (T.Mul(7, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(7, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(7, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(8, 7) + threadIdx_x // 7 < 576:
            if T.Mul(8, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(8, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(8, 7) + threadIdx_x // 7) % 9 and (T.Mul(8, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(8, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(8, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(9, 7) + threadIdx_x // 7 < 576:
            if T.Mul(9, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(9, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(9, 7) + threadIdx_x // 7) % 9 and (T.Mul(9, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(9, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(9, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(10, 7) + threadIdx_x // 7 < 576:
            if T.Mul(10, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(10, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(10, 7) + threadIdx_x // 7) % 9 and (T.Mul(10, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(10, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(10, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(11, 7) + threadIdx_x // 7 < 576:
            if T.Mul(11, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(11, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(11, 7) + threadIdx_x // 7) % 9 and (T.Mul(11, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(11, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(11, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(12, 7) + threadIdx_x // 7 < 576:
            if T.Mul(12, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(12, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(12, 7) + threadIdx_x // 7) % 9 and (T.Mul(12, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(12, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(12, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(13, 7) + threadIdx_x // 7 < 576:
            if T.Mul(13, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(13, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(13, 7) + threadIdx_x // 7) % 9 and (T.Mul(13, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(13, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(13, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(14, 7) + threadIdx_x // 7 < 576:
            if T.Mul(14, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(14, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(14, 7) + threadIdx_x // 7) % 9 and (T.Mul(14, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(14, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(14, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(15, 7) + threadIdx_x // 7 < 576:
            if T.Mul(15, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(15, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(15, 7) + threadIdx_x // 7) % 9 and (T.Mul(15, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(15, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(15, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(16, 7) + threadIdx_x // 7 < 576:
            if T.Mul(16, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(16, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(16, 7) + threadIdx_x // 7) % 9 and (T.Mul(16, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(16, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(16, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(17, 7) + threadIdx_x // 7 < 576:
            if T.Mul(17, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(17, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(17, 7) + threadIdx_x // 7) % 9 and (T.Mul(17, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(17, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(17, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(18, 7) + threadIdx_x // 7 < 576:
            if T.Mul(18, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(18, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(18, 7) + threadIdx_x // 7) % 9 and (T.Mul(18, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(18, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(18, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(19, 7) + threadIdx_x // 7 < 576:
            if T.Mul(19, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(19, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(19, 7) + threadIdx_x // 7) % 9 and (T.Mul(19, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(19, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(19, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(20, 7) + threadIdx_x // 7 < 576:
            if T.Mul(20, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(20, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(20, 7) + threadIdx_x // 7) % 9 and (T.Mul(20, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(20, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(20, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(21, 7) + threadIdx_x // 7 < 576:
            if T.Mul(21, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(21, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(21, 7) + threadIdx_x // 7) % 9 and (T.Mul(21, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(21, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(21, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(22, 7) + threadIdx_x // 7 < 576:
            if T.Mul(22, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(22, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(22, 7) + threadIdx_x // 7) % 9 and (T.Mul(22, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(22, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(22, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(23, 7) + threadIdx_x // 7 < 576:
            if T.Mul(23, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(23, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(23, 7) + threadIdx_x // 7) % 9 and (T.Mul(23, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(23, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(23, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(24, 7) + threadIdx_x // 7 < 576:
            if T.Mul(24, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(24, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(24, 7) + threadIdx_x // 7) % 9 and (T.Mul(24, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(24, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(24, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(25, 7) + threadIdx_x // 7 < 576:
            if T.Mul(25, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(25, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(25, 7) + threadIdx_x // 7) % 9 and (T.Mul(25, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(25, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(25, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(26, 7) + threadIdx_x // 7 < 576:
            if T.Mul(26, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(26, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(26, 7) + threadIdx_x // 7) % 9 and (T.Mul(26, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(26, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(26, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(27, 7) + threadIdx_x // 7 < 576:
            if T.Mul(27, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(27, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(27, 7) + threadIdx_x // 7) % 9 and (T.Mul(27, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(27, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(27, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(28, 7) + threadIdx_x // 7 < 576:
            if T.Mul(28, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(28, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(28, 7) + threadIdx_x // 7) % 9 and (T.Mul(28, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(28, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(28, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(29, 7) + threadIdx_x // 7 < 576:
            if T.Mul(29, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(29, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(29, 7) + threadIdx_x // 7) % 9 and (T.Mul(29, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(29, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(29, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(30, 7) + threadIdx_x // 7 < 576:
            if T.Mul(30, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(30, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(30, 7) + threadIdx_x // 7) % 9 and (T.Mul(30, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(30, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(30, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(31, 7) + threadIdx_x // 7 < 576:
            if T.Mul(31, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(31, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(31, 7) + threadIdx_x // 7) % 9 and (T.Mul(31, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(31, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(31, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(32, 7) + threadIdx_x // 7 < 576:
            if T.Mul(32, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(32, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(32, 7) + threadIdx_x // 7) % 9 and (T.Mul(32, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(32, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(32, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(33, 7) + threadIdx_x // 7 < 576:
            if T.Mul(33, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(33, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(33, 7) + threadIdx_x // 7) % 9 and (T.Mul(33, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(33, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(33, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(34, 7) + threadIdx_x // 7 < 576:
            if T.Mul(34, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(34, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(34, 7) + threadIdx_x // 7) % 9 and (T.Mul(34, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(34, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(34, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(35, 7) + threadIdx_x // 7 < 576:
            if T.Mul(35, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(35, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(35, 7) + threadIdx_x // 7) % 9 and (T.Mul(35, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(35, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(35, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(36, 7) + threadIdx_x // 7 < 576:
            if T.Mul(36, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(36, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(36, 7) + threadIdx_x // 7) % 9 and (T.Mul(36, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(36, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(36, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(37, 7) + threadIdx_x // 7 < 576:
            if T.Mul(37, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(37, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(37, 7) + threadIdx_x // 7) % 9 and (T.Mul(37, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(37, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(37, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(38, 7) + threadIdx_x // 7 < 576:
            if T.Mul(38, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(38, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(38, 7) + threadIdx_x // 7) % 9 and (T.Mul(38, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(38, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(38, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(39, 7) + threadIdx_x // 7 < 576:
            if T.Mul(39, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(39, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(39, 7) + threadIdx_x // 7) % 9 and (T.Mul(39, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(39, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(39, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(40, 7) + threadIdx_x // 7 < 576:
            if T.Mul(40, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(40, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(40, 7) + threadIdx_x // 7) % 9 and (T.Mul(40, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(40, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(40, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(41, 7) + threadIdx_x // 7 < 576:
            if T.Mul(41, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(41, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(41, 7) + threadIdx_x // 7) % 9 and (T.Mul(41, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(41, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(41, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(42, 7) + threadIdx_x // 7 < 576:
            if T.Mul(42, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(42, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(42, 7) + threadIdx_x // 7) % 9 and (T.Mul(42, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(42, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(42, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(43, 7) + threadIdx_x // 7 < 576:
            if T.Mul(43, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(43, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(43, 7) + threadIdx_x // 7) % 9 and (T.Mul(43, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(43, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(43, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(44, 7) + threadIdx_x // 7 < 576:
            if T.Mul(44, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(44, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(44, 7) + threadIdx_x // 7) % 9 and (T.Mul(44, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(44, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(44, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(45, 7) + threadIdx_x // 7 < 576:
            if T.Mul(45, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(45, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(45, 7) + threadIdx_x // 7) % 9 and (T.Mul(45, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(45, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(45, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(46, 7) + threadIdx_x // 7 < 576:
            if T.Mul(46, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(46, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(46, 7) + threadIdx_x // 7) % 9 and (T.Mul(46, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(46, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(46, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(47, 7) + threadIdx_x // 7 < 576:
            if T.Mul(47, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(47, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(47, 7) + threadIdx_x // 7) % 9 and (T.Mul(47, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(47, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(47, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(48, 7) + threadIdx_x // 7 < 576:
            if T.Mul(48, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(48, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(48, 7) + threadIdx_x // 7) % 9 and (T.Mul(48, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(48, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(48, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(49, 7) + threadIdx_x // 7 < 576:
            if T.Mul(49, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(49, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(49, 7) + threadIdx_x // 7) % 9 and (T.Mul(49, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(49, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(49, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(50, 7) + threadIdx_x // 7 < 576:
            if T.Mul(50, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(50, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(50, 7) + threadIdx_x // 7) % 9 and (T.Mul(50, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(50, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(50, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(51, 7) + threadIdx_x // 7 < 576:
            if T.Mul(51, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(51, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(51, 7) + threadIdx_x // 7) % 9 and (T.Mul(51, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(51, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(51, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(52, 7) + threadIdx_x // 7 < 576:
            if T.Mul(52, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(52, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(52, 7) + threadIdx_x // 7) % 9 and (T.Mul(52, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(52, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(52, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(53, 7) + threadIdx_x // 7 < 576:
            if T.Mul(53, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(53, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(53, 7) + threadIdx_x // 7) % 9 and (T.Mul(53, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(53, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(53, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(54, 7) + threadIdx_x // 7 < 576:
            if T.Mul(54, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(54, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(54, 7) + threadIdx_x // 7) % 9 and (T.Mul(54, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(54, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(54, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(55, 7) + threadIdx_x // 7 < 576:
            if T.Mul(55, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(55, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(55, 7) + threadIdx_x // 7) % 9 and (T.Mul(55, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(55, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(55, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(56, 7) + threadIdx_x // 7 < 576:
            if T.Mul(56, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(56, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(56, 7) + threadIdx_x // 7) % 9 and (T.Mul(56, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(56, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(56, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(57, 7) + threadIdx_x // 7 < 576:
            if T.Mul(57, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(57, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(57, 7) + threadIdx_x // 7) % 9 and (T.Mul(57, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(57, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(57, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(58, 7) + threadIdx_x // 7 < 576:
            if T.Mul(58, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(58, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(58, 7) + threadIdx_x // 7) % 9 and (T.Mul(58, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(58, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(58, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(59, 7) + threadIdx_x // 7 < 576:
            if T.Mul(59, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(59, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(59, 7) + threadIdx_x // 7) % 9 and (T.Mul(59, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(59, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(59, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(60, 7) + threadIdx_x // 7 < 576:
            if T.Mul(60, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(60, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(60, 7) + threadIdx_x // 7) % 9 and (T.Mul(60, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(60, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(60, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(61, 7) + threadIdx_x // 7 < 576:
            if T.Mul(61, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(61, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(61, 7) + threadIdx_x // 7) % 9 and (T.Mul(61, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(61, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(61, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(62, 7) + threadIdx_x // 7 < 576:
            if T.Mul(62, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(62, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(62, 7) + threadIdx_x // 7) % 9 and (T.Mul(62, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(62, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(62, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(63, 7) + threadIdx_x // 7 < 576:
            if T.Mul(63, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(63, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(63, 7) + threadIdx_x // 7) % 9 and (T.Mul(63, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(63, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(63, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(64, 7) + threadIdx_x // 7 < 576:
            if T.Mul(64, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(64, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(64, 7) + threadIdx_x // 7) % 9 and (T.Mul(64, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(64, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(64, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(65, 7) + threadIdx_x // 7 < 576:
            if T.Mul(65, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(65, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(65, 7) + threadIdx_x // 7) % 9 and (T.Mul(65, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(65, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(65, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(66, 7) + threadIdx_x // 7 < 576:
            if T.Mul(66, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(66, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(66, 7) + threadIdx_x // 7) % 9 and (T.Mul(66, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(66, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(66, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(67, 7) + threadIdx_x // 7 < 576:
            if T.Mul(67, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(67, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(67, 7) + threadIdx_x // 7) % 9 and (T.Mul(67, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(67, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(67, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(68, 7) + threadIdx_x // 7 < 576:
            if T.Mul(68, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(68, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(68, 7) + threadIdx_x // 7) % 9 and (T.Mul(68, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(68, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(68, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(69, 7) + threadIdx_x // 7 < 576:
            if T.Mul(69, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(69, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(69, 7) + threadIdx_x // 7) % 9 and (T.Mul(69, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(69, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(69, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(70, 7) + threadIdx_x // 7 < 576:
            if T.Mul(70, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(70, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(70, 7) + threadIdx_x // 7) % 9 and (T.Mul(70, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(70, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(70, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(71, 7) + threadIdx_x // 7 < 576:
            if T.Mul(71, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(71, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(71, 7) + threadIdx_x // 7) % 9 and (T.Mul(71, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(71, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(71, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(72, 7) + threadIdx_x // 7 < 576:
            if T.Mul(72, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(72, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(72, 7) + threadIdx_x // 7) % 9 and (T.Mul(72, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(72, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(72, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(73, 7) + threadIdx_x // 7 < 576:
            if T.Mul(73, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(73, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(73, 7) + threadIdx_x // 7) % 9 and (T.Mul(73, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(73, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(73, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(74, 7) + threadIdx_x // 7 < 576:
            if T.Mul(74, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(74, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(74, 7) + threadIdx_x // 7) % 9 and (T.Mul(74, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(74, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(74, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(75, 7) + threadIdx_x // 7 < 576:
            if T.Mul(75, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(75, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(75, 7) + threadIdx_x // 7) % 9 and (T.Mul(75, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(75, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(75, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(76, 7) + threadIdx_x // 7 < 576:
            if T.Mul(76, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(76, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(76, 7) + threadIdx_x // 7) % 9 and (T.Mul(76, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(76, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(76, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(77, 7) + threadIdx_x // 7 < 576:
            if T.Mul(77, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(77, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(77, 7) + threadIdx_x // 7) % 9 and (T.Mul(77, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(77, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(77, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(78, 7) + threadIdx_x // 7 < 576:
            if T.Mul(78, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(78, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(78, 7) + threadIdx_x // 7) % 9 and (T.Mul(78, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(78, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(78, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(79, 7) + threadIdx_x // 7 < 576:
            if T.Mul(79, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(79, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(79, 7) + threadIdx_x // 7) % 9 and (T.Mul(79, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(79, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(79, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(80, 7) + threadIdx_x // 7 < 576:
            if T.Mul(80, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(80, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(80, 7) + threadIdx_x // 7) % 9 and (T.Mul(80, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(80, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(80, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(81, 7) + threadIdx_x // 7 < 576:
            if T.Mul(81, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(81, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(81, 7) + threadIdx_x // 7) % 9 and (T.Mul(81, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(81, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(81, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(82, 7) + threadIdx_x // 7 < 576:
            if T.Mul(82, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(82, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(82, 7) + threadIdx_x // 7) % 9 and (T.Mul(82, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(82, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(82, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    threadIdx_x_1 = T.env_thread("threadIdx.x")
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(0, 49) + threadIdx_x_1 < 1536:
            blockIdx_x = T.int32()
            kernel_shared[T.Mul(0, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(0, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(0, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    blockIdx_x = T.int32()
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(1, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(1, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(1, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(1, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(2, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(2, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(2, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(2, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(3, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(3, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(3, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(3, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(4, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(4, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(4, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(4, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(5, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(5, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(5, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(5, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(6, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(6, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(6, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(6, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(7, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(7, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(7, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(7, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(8, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(8, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(8, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(8, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(9, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(9, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(9, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(9, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(10, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(10, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(10, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(10, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(11, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(11, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(11, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(11, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(12, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(12, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(12, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(12, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(13, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(13, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(13, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(13, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(14, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(14, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(14, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(14, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(15, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(15, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(15, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(15, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(16, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(16, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(16, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(16, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(17, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(17, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(17, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(17, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(18, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(18, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(18, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(18, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(19, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(19, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(19, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(19, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(20, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(20, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(20, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(20, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(21, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(21, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(21, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(21, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(22, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(22, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(22, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(22, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(23, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(23, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(23, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(23, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(24, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(24, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(24, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(24, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(25, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(25, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(25, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(25, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(26, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(26, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(26, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(26, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(27, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(27, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(27, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(27, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(28, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(28, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(28, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(28, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(29, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(29, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(29, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(29, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(30, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(30, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(30, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(30, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(31, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(31, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(31, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(31, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    for rc_outer_inner in range(8):
        conv2d_nchw = T.Buffer((8,), scope="local", align=32)
        threadIdx_x_2 = T.int32()
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
<class 'tvm.tir.stmt.For'>
0
<class 'tvm.tir.expr.IntImm'>
8
<class 'tvm.tir.expr.IntImm'>
i1_inner
<class 'tvm.tir.expr.Var'>
conv2d_nchw[i1_inner]
<class 'tvm.tir.expr.BufferLoad'>
8
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 8
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 8 + i1_inner
<class 'tvm.tir.expr.Add'>
bias[blockIdx_x * 8 + i1_inner]
<class 'tvm.tir.expr.BufferLoad'>
conv2d_nchw[i1_inner] + bias[blockIdx_x * 8 + i1_inner]
<class 'tvm.tir.expr.Add'>
T.float32(0.0)
<class 'tvm.tir.expr.FloatImm'>
T.max(conv2d_nchw[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.expr.Max'>
392
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 392
<class 'tvm.tir.expr.Mul'>
49
<class 'tvm.tir.expr.IntImm'>
i1_inner * 49
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 392 + i1_inner * 49
<class 'tvm.tir.expr.Add'>
blockIdx_x * 392 + i1_inner * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
compute = T.Buffer((25088,))
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
i1_inner = T.int32()
bias = T.Buffer((512,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
compute[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
for i1_inner in range(8):
    compute = T.Buffer((25088,))
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    bias = T.Buffer((512,))
    blockIdx_x = T.int32()
    threadIdx_x = T.int32()
    compute[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.stmt.For'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = T.float32(0.0)
conv2d_nchw[T.Mul(0, 4) + 1] = T.float32(0.0)
conv2d_nchw[T.Mul(0, 4) + 2] = T.float32(0.0)
conv2d_nchw[T.Mul(0, 4) + 3] = T.float32(0.0)
conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = T.float32(0.0)
conv2d_nchw[T.Mul(1, 4) + 1] = T.float32(0.0)
conv2d_nchw[T.Mul(1, 4) + 2] = T.float32(0.0)
conv2d_nchw[T.Mul(1, 4) + 3] = T.float32(0.0)
blockIdx_x = T.int32()
threadIdx_x_2 = T.int32()
for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
    threadIdx_x = T.env_thread("threadIdx.x")
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    data = T.Buffer((25088,))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(0, 7) + threadIdx_x // 7 < 576:
            if T.Mul(0, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(0, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(0, 7) + threadIdx_x // 7) % 9 and (T.Mul(0, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(0, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(0, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(1, 7) + threadIdx_x // 7 < 576:
            if T.Mul(1, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(1, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(1, 7) + threadIdx_x // 7) % 9 and (T.Mul(1, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(1, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(1, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(2, 7) + threadIdx_x // 7 < 576:
            if T.Mul(2, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(2, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(2, 7) + threadIdx_x // 7) % 9 and (T.Mul(2, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(2, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(2, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(3, 7) + threadIdx_x // 7 < 576:
            if T.Mul(3, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(3, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(3, 7) + threadIdx_x // 7) % 9 and (T.Mul(3, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(3, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(3, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(4, 7) + threadIdx_x // 7 < 576:
            if T.Mul(4, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(4, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(4, 7) + threadIdx_x // 7) % 9 and (T.Mul(4, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(4, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(4, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(5, 7) + threadIdx_x // 7 < 576:
            if T.Mul(5, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(5, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(5, 7) + threadIdx_x // 7) % 9 and (T.Mul(5, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(5, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(5, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(6, 7) + threadIdx_x // 7 < 576:
            if T.Mul(6, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(6, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(6, 7) + threadIdx_x // 7) % 9 and (T.Mul(6, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(6, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(6, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(7, 7) + threadIdx_x // 7 < 576:
            if T.Mul(7, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(7, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(7, 7) + threadIdx_x // 7) % 9 and (T.Mul(7, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(7, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(7, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(8, 7) + threadIdx_x // 7 < 576:
            if T.Mul(8, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(8, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(8, 7) + threadIdx_x // 7) % 9 and (T.Mul(8, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(8, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(8, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(9, 7) + threadIdx_x // 7 < 576:
            if T.Mul(9, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(9, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(9, 7) + threadIdx_x // 7) % 9 and (T.Mul(9, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(9, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(9, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(10, 7) + threadIdx_x // 7 < 576:
            if T.Mul(10, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(10, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(10, 7) + threadIdx_x // 7) % 9 and (T.Mul(10, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(10, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(10, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(11, 7) + threadIdx_x // 7 < 576:
            if T.Mul(11, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(11, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(11, 7) + threadIdx_x // 7) % 9 and (T.Mul(11, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(11, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(11, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(12, 7) + threadIdx_x // 7 < 576:
            if T.Mul(12, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(12, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(12, 7) + threadIdx_x // 7) % 9 and (T.Mul(12, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(12, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(12, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(13, 7) + threadIdx_x // 7 < 576:
            if T.Mul(13, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(13, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(13, 7) + threadIdx_x // 7) % 9 and (T.Mul(13, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(13, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(13, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(14, 7) + threadIdx_x // 7 < 576:
            if T.Mul(14, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(14, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(14, 7) + threadIdx_x // 7) % 9 and (T.Mul(14, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(14, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(14, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(15, 7) + threadIdx_x // 7 < 576:
            if T.Mul(15, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(15, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(15, 7) + threadIdx_x // 7) % 9 and (T.Mul(15, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(15, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(15, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(16, 7) + threadIdx_x // 7 < 576:
            if T.Mul(16, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(16, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(16, 7) + threadIdx_x // 7) % 9 and (T.Mul(16, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(16, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(16, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(17, 7) + threadIdx_x // 7 < 576:
            if T.Mul(17, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(17, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(17, 7) + threadIdx_x // 7) % 9 and (T.Mul(17, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(17, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(17, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(18, 7) + threadIdx_x // 7 < 576:
            if T.Mul(18, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(18, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(18, 7) + threadIdx_x // 7) % 9 and (T.Mul(18, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(18, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(18, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(19, 7) + threadIdx_x // 7 < 576:
            if T.Mul(19, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(19, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(19, 7) + threadIdx_x // 7) % 9 and (T.Mul(19, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(19, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(19, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(20, 7) + threadIdx_x // 7 < 576:
            if T.Mul(20, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(20, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(20, 7) + threadIdx_x // 7) % 9 and (T.Mul(20, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(20, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(20, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(21, 7) + threadIdx_x // 7 < 576:
            if T.Mul(21, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(21, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(21, 7) + threadIdx_x // 7) % 9 and (T.Mul(21, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(21, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(21, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(22, 7) + threadIdx_x // 7 < 576:
            if T.Mul(22, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(22, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(22, 7) + threadIdx_x // 7) % 9 and (T.Mul(22, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(22, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(22, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(23, 7) + threadIdx_x // 7 < 576:
            if T.Mul(23, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(23, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(23, 7) + threadIdx_x // 7) % 9 and (T.Mul(23, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(23, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(23, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(24, 7) + threadIdx_x // 7 < 576:
            if T.Mul(24, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(24, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(24, 7) + threadIdx_x // 7) % 9 and (T.Mul(24, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(24, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(24, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(25, 7) + threadIdx_x // 7 < 576:
            if T.Mul(25, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(25, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(25, 7) + threadIdx_x // 7) % 9 and (T.Mul(25, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(25, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(25, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(26, 7) + threadIdx_x // 7 < 576:
            if T.Mul(26, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(26, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(26, 7) + threadIdx_x // 7) % 9 and (T.Mul(26, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(26, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(26, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(27, 7) + threadIdx_x // 7 < 576:
            if T.Mul(27, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(27, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(27, 7) + threadIdx_x // 7) % 9 and (T.Mul(27, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(27, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(27, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(28, 7) + threadIdx_x // 7 < 576:
            if T.Mul(28, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(28, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(28, 7) + threadIdx_x // 7) % 9 and (T.Mul(28, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(28, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(28, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(29, 7) + threadIdx_x // 7 < 576:
            if T.Mul(29, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(29, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(29, 7) + threadIdx_x // 7) % 9 and (T.Mul(29, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(29, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(29, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(30, 7) + threadIdx_x // 7 < 576:
            if T.Mul(30, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(30, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(30, 7) + threadIdx_x // 7) % 9 and (T.Mul(30, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(30, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(30, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(31, 7) + threadIdx_x // 7 < 576:
            if T.Mul(31, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(31, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(31, 7) + threadIdx_x // 7) % 9 and (T.Mul(31, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(31, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(31, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(32, 7) + threadIdx_x // 7 < 576:
            if T.Mul(32, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(32, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(32, 7) + threadIdx_x // 7) % 9 and (T.Mul(32, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(32, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(32, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(33, 7) + threadIdx_x // 7 < 576:
            if T.Mul(33, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(33, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(33, 7) + threadIdx_x // 7) % 9 and (T.Mul(33, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(33, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(33, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(34, 7) + threadIdx_x // 7 < 576:
            if T.Mul(34, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(34, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(34, 7) + threadIdx_x // 7) % 9 and (T.Mul(34, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(34, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(34, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(35, 7) + threadIdx_x // 7 < 576:
            if T.Mul(35, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(35, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(35, 7) + threadIdx_x // 7) % 9 and (T.Mul(35, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(35, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(35, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(36, 7) + threadIdx_x // 7 < 576:
            if T.Mul(36, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(36, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(36, 7) + threadIdx_x // 7) % 9 and (T.Mul(36, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(36, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(36, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(37, 7) + threadIdx_x // 7 < 576:
            if T.Mul(37, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(37, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(37, 7) + threadIdx_x // 7) % 9 and (T.Mul(37, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(37, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(37, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(38, 7) + threadIdx_x // 7 < 576:
            if T.Mul(38, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(38, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(38, 7) + threadIdx_x // 7) % 9 and (T.Mul(38, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(38, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(38, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(39, 7) + threadIdx_x // 7 < 576:
            if T.Mul(39, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(39, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(39, 7) + threadIdx_x // 7) % 9 and (T.Mul(39, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(39, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(39, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(40, 7) + threadIdx_x // 7 < 576:
            if T.Mul(40, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(40, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(40, 7) + threadIdx_x // 7) % 9 and (T.Mul(40, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(40, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(40, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(41, 7) + threadIdx_x // 7 < 576:
            if T.Mul(41, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(41, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(41, 7) + threadIdx_x // 7) % 9 and (T.Mul(41, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(41, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(41, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(42, 7) + threadIdx_x // 7 < 576:
            if T.Mul(42, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(42, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(42, 7) + threadIdx_x // 7) % 9 and (T.Mul(42, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(42, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(42, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(43, 7) + threadIdx_x // 7 < 576:
            if T.Mul(43, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(43, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(43, 7) + threadIdx_x // 7) % 9 and (T.Mul(43, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(43, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(43, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(44, 7) + threadIdx_x // 7 < 576:
            if T.Mul(44, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(44, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(44, 7) + threadIdx_x // 7) % 9 and (T.Mul(44, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(44, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(44, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(45, 7) + threadIdx_x // 7 < 576:
            if T.Mul(45, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(45, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(45, 7) + threadIdx_x // 7) % 9 and (T.Mul(45, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(45, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(45, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(46, 7) + threadIdx_x // 7 < 576:
            if T.Mul(46, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(46, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(46, 7) + threadIdx_x // 7) % 9 and (T.Mul(46, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(46, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(46, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(47, 7) + threadIdx_x // 7 < 576:
            if T.Mul(47, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(47, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(47, 7) + threadIdx_x // 7) % 9 and (T.Mul(47, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(47, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(47, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(48, 7) + threadIdx_x // 7 < 576:
            if T.Mul(48, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(48, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(48, 7) + threadIdx_x // 7) % 9 and (T.Mul(48, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(48, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(48, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(49, 7) + threadIdx_x // 7 < 576:
            if T.Mul(49, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(49, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(49, 7) + threadIdx_x // 7) % 9 and (T.Mul(49, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(49, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(49, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(50, 7) + threadIdx_x // 7 < 576:
            if T.Mul(50, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(50, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(50, 7) + threadIdx_x // 7) % 9 and (T.Mul(50, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(50, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(50, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(51, 7) + threadIdx_x // 7 < 576:
            if T.Mul(51, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(51, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(51, 7) + threadIdx_x // 7) % 9 and (T.Mul(51, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(51, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(51, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(52, 7) + threadIdx_x // 7 < 576:
            if T.Mul(52, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(52, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(52, 7) + threadIdx_x // 7) % 9 and (T.Mul(52, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(52, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(52, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(53, 7) + threadIdx_x // 7 < 576:
            if T.Mul(53, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(53, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(53, 7) + threadIdx_x // 7) % 9 and (T.Mul(53, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(53, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(53, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(54, 7) + threadIdx_x // 7 < 576:
            if T.Mul(54, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(54, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(54, 7) + threadIdx_x // 7) % 9 and (T.Mul(54, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(54, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(54, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(55, 7) + threadIdx_x // 7 < 576:
            if T.Mul(55, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(55, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(55, 7) + threadIdx_x // 7) % 9 and (T.Mul(55, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(55, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(55, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(56, 7) + threadIdx_x // 7 < 576:
            if T.Mul(56, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(56, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(56, 7) + threadIdx_x // 7) % 9 and (T.Mul(56, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(56, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(56, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(57, 7) + threadIdx_x // 7 < 576:
            if T.Mul(57, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(57, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(57, 7) + threadIdx_x // 7) % 9 and (T.Mul(57, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(57, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(57, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(58, 7) + threadIdx_x // 7 < 576:
            if T.Mul(58, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(58, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(58, 7) + threadIdx_x // 7) % 9 and (T.Mul(58, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(58, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(58, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(59, 7) + threadIdx_x // 7 < 576:
            if T.Mul(59, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(59, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(59, 7) + threadIdx_x // 7) % 9 and (T.Mul(59, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(59, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(59, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(60, 7) + threadIdx_x // 7 < 576:
            if T.Mul(60, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(60, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(60, 7) + threadIdx_x // 7) % 9 and (T.Mul(60, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(60, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(60, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(61, 7) + threadIdx_x // 7 < 576:
            if T.Mul(61, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(61, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(61, 7) + threadIdx_x // 7) % 9 and (T.Mul(61, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(61, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(61, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(62, 7) + threadIdx_x // 7 < 576:
            if T.Mul(62, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(62, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(62, 7) + threadIdx_x // 7) % 9 and (T.Mul(62, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(62, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(62, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(63, 7) + threadIdx_x // 7 < 576:
            if T.Mul(63, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(63, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(63, 7) + threadIdx_x // 7) % 9 and (T.Mul(63, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(63, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(63, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(64, 7) + threadIdx_x // 7 < 576:
            if T.Mul(64, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(64, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(64, 7) + threadIdx_x // 7) % 9 and (T.Mul(64, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(64, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(64, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(65, 7) + threadIdx_x // 7 < 576:
            if T.Mul(65, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(65, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(65, 7) + threadIdx_x // 7) % 9 and (T.Mul(65, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(65, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(65, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(66, 7) + threadIdx_x // 7 < 576:
            if T.Mul(66, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(66, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(66, 7) + threadIdx_x // 7) % 9 and (T.Mul(66, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(66, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(66, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(67, 7) + threadIdx_x // 7 < 576:
            if T.Mul(67, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(67, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(67, 7) + threadIdx_x // 7) % 9 and (T.Mul(67, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(67, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(67, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(68, 7) + threadIdx_x // 7 < 576:
            if T.Mul(68, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(68, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(68, 7) + threadIdx_x // 7) % 9 and (T.Mul(68, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(68, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(68, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(69, 7) + threadIdx_x // 7 < 576:
            if T.Mul(69, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(69, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(69, 7) + threadIdx_x // 7) % 9 and (T.Mul(69, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(69, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(69, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(70, 7) + threadIdx_x // 7 < 576:
            if T.Mul(70, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(70, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(70, 7) + threadIdx_x // 7) % 9 and (T.Mul(70, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(70, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(70, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(71, 7) + threadIdx_x // 7 < 576:
            if T.Mul(71, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(71, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(71, 7) + threadIdx_x // 7) % 9 and (T.Mul(71, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(71, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(71, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(72, 7) + threadIdx_x // 7 < 576:
            if T.Mul(72, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(72, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(72, 7) + threadIdx_x // 7) % 9 and (T.Mul(72, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(72, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(72, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(73, 7) + threadIdx_x // 7 < 576:
            if T.Mul(73, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(73, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(73, 7) + threadIdx_x // 7) % 9 and (T.Mul(73, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(73, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(73, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(74, 7) + threadIdx_x // 7 < 576:
            if T.Mul(74, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(74, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(74, 7) + threadIdx_x // 7) % 9 and (T.Mul(74, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(74, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(74, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(75, 7) + threadIdx_x // 7 < 576:
            if T.Mul(75, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(75, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(75, 7) + threadIdx_x // 7) % 9 and (T.Mul(75, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(75, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(75, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(76, 7) + threadIdx_x // 7 < 576:
            if T.Mul(76, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(76, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(76, 7) + threadIdx_x // 7) % 9 and (T.Mul(76, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(76, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(76, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(77, 7) + threadIdx_x // 7 < 576:
            if T.Mul(77, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(77, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(77, 7) + threadIdx_x // 7) % 9 and (T.Mul(77, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(77, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(77, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(78, 7) + threadIdx_x // 7 < 576:
            if T.Mul(78, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(78, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(78, 7) + threadIdx_x // 7) % 9 and (T.Mul(78, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(78, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(78, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(79, 7) + threadIdx_x // 7 < 576:
            if T.Mul(79, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(79, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(79, 7) + threadIdx_x // 7) % 9 and (T.Mul(79, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(79, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(79, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(80, 7) + threadIdx_x // 7 < 576:
            if T.Mul(80, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(80, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(80, 7) + threadIdx_x // 7) % 9 and (T.Mul(80, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(80, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(80, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(81, 7) + threadIdx_x // 7 < 576:
            if T.Mul(81, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(81, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(81, 7) + threadIdx_x // 7) % 9 and (T.Mul(81, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(81, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(81, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if T.Mul(82, 7) + threadIdx_x // 7 < 576:
            if T.Mul(82, 49) + threadIdx_x < 4032:
                pad_temp_shared[T.Mul(82, 49) + threadIdx_x] = T.if_then_else(1 <= (T.Mul(82, 7) + threadIdx_x // 7) % 9 and (T.Mul(82, 7) + threadIdx_x // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(82, 7) + threadIdx_x // 7) // 9 * 49 + (T.Mul(82, 7) + threadIdx_x // 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    threadIdx_x_1 = T.env_thread("threadIdx.x")
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(0, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(0, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(0, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(0, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(1, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(1, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(1, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(1, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(2, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(2, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(2, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(2, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(3, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(3, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(3, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(3, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(4, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(4, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(4, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(4, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(5, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(5, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(5, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(5, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(6, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(6, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(6, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(6, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(7, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(7, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(7, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(7, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(8, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(8, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(8, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(8, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(9, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(9, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(9, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(9, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(10, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(10, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(10, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(10, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(11, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(11, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(11, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(11, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(12, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(12, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(12, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(12, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(13, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(13, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(13, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(13, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(14, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(14, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(14, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(14, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(15, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(15, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(15, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(15, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(16, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(16, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(16, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(16, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(17, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(17, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(17, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(17, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(18, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(18, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(18, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(18, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(19, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(19, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(19, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(19, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(20, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(20, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(20, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(20, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(21, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(21, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(21, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(21, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(22, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(22, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(22, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(22, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(23, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(23, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(23, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(23, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(24, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(24, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(24, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(24, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(25, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(25, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(25, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(25, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(26, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(26, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(26, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(26, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(27, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(27, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(27, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(27, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(28, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(28, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(28, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(28, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(29, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(29, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(29, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(29, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(30, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(30, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(30, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(30, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        if T.Mul(31, 49) + threadIdx_x_1 < 1536:
            kernel_shared[T.Mul(31, 49) + threadIdx_x_1] = kernel[blockIdx_x * 36864 + (T.Mul(31, 49) + threadIdx_x_1) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(31, 49) + threadIdx_x_1) % 192 * 3 + rx_outer_outer]
    for rc_outer_inner in range(8):
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x_2] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
        conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
        conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
        conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x_2] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
for i1_inner in range(8):
    compute = T.Buffer((25088,))
    bias = T.Buffer((512,))
    compute[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x_2] = T.max(conv2d_nchw[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.stmt.SeqStmt'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = T.float32(0.0)
    conv2d_nchw[T.Mul(0, 4) + 1] = T.float32(0.0)
    conv2d_nchw[T.Mul(0, 4) + 2] = T.float32(0.0)
    conv2d_nchw[T.Mul(0, 4) + 3] = T.float32(0.0)
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = T.float32(0.0)
    conv2d_nchw[T.Mul(1, 4) + 1] = T.float32(0.0)
    conv2d_nchw[T.Mul(1, 4) + 2] = T.float32(0.0)
    conv2d_nchw[T.Mul(1, 4) + 3] = T.float32(0.0)
    blockIdx_x = T.int32()
    for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        data = T.Buffer((25088,))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(0, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(0, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(0, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(0, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(0, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(0, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(0, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(1, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(1, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(1, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(1, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(1, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(1, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(1, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(2, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(2, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(2, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(2, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(2, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(2, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(2, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(3, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(3, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(3, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(3, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(3, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(3, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(3, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(4, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(4, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(4, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(4, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(4, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(4, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(4, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(5, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(5, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(5, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(5, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(5, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(5, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(5, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(6, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(6, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(6, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(6, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(6, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(6, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(6, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(7, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(7, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(7, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(7, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(7, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(7, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(7, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(8, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(8, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(8, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(8, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(8, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(8, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(8, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(9, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(9, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(9, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(9, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(9, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(9, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(9, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(10, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(10, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(10, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(10, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(10, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(10, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(10, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(11, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(11, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(11, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(11, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(11, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(11, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(11, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(12, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(12, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(12, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(12, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(12, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(12, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(12, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(13, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(13, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(13, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(13, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(13, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(13, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(13, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(14, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(14, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(14, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(14, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(14, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(14, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(14, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(15, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(15, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(15, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(15, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(15, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(15, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(15, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(16, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(16, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(16, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(16, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(16, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(16, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(16, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(17, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(17, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(17, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(17, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(17, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(17, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(17, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(18, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(18, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(18, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(18, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(18, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(18, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(18, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(19, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(19, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(19, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(19, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(19, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(19, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(19, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(20, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(20, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(20, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(20, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(20, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(20, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(20, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(21, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(21, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(21, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(21, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(21, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(21, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(21, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(22, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(22, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(22, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(22, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(22, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(22, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(22, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(23, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(23, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(23, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(23, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(23, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(23, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(23, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(24, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(24, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(24, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(24, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(24, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(24, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(24, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(25, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(25, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(25, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(25, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(25, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(25, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(25, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(26, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(26, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(26, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(26, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(26, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(26, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(26, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(27, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(27, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(27, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(27, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(27, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(27, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(27, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(28, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(28, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(28, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(28, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(28, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(28, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(28, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(29, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(29, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(29, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(29, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(29, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(29, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(29, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(30, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(30, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(30, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(30, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(30, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(30, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(30, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(31, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(31, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(31, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(31, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(31, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(31, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(31, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(32, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(32, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(32, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(32, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(32, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(32, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(32, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(33, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(33, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(33, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(33, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(33, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(33, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(33, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(34, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(34, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(34, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(34, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(34, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(34, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(34, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(35, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(35, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(35, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(35, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(35, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(35, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(35, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(36, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(36, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(36, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(36, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(36, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(36, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(36, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(37, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(37, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(37, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(37, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(37, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(37, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(37, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(38, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(38, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(38, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(38, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(38, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(38, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(38, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(39, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(39, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(39, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(39, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(39, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(39, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(39, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(40, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(40, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(40, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(40, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(40, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(40, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(40, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(41, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(41, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(41, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(41, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(41, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(41, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(41, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(42, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(42, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(42, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(42, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(42, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(42, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(42, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(43, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(43, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(43, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(43, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(43, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(43, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(43, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(44, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(44, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(44, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(44, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(44, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(44, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(44, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(45, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(45, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(45, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(45, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(45, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(45, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(45, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(46, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(46, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(46, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(46, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(46, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(46, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(46, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(47, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(47, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(47, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(47, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(47, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(47, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(47, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(48, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(48, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(48, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(48, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(48, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(48, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(48, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(49, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(49, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(49, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(49, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(49, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(49, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(49, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(50, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(50, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(50, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(50, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(50, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(50, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(50, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(51, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(51, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(51, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(51, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(51, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(51, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(51, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(52, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(52, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(52, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(52, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(52, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(52, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(52, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(53, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(53, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(53, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(53, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(53, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(53, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(53, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(54, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(54, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(54, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(54, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(54, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(54, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(54, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(55, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(55, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(55, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(55, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(55, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(55, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(55, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(56, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(56, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(56, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(56, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(56, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(56, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(56, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(57, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(57, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(57, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(57, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(57, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(57, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(57, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(58, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(58, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(58, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(58, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(58, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(58, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(58, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(59, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(59, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(59, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(59, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(59, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(59, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(59, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(60, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(60, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(60, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(60, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(60, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(60, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(60, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(61, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(61, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(61, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(61, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(61, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(61, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(61, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(62, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(62, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(62, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(62, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(62, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(62, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(62, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(63, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(63, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(63, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(63, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(63, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(63, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(63, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(64, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(64, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(64, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(64, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(64, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(64, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(64, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(65, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(65, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(65, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(65, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(65, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(65, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(65, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(66, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(66, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(66, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(66, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(66, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(66, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(66, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(67, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(67, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(67, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(67, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(67, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(67, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(67, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(68, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(68, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(68, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(68, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(68, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(68, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(68, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(69, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(69, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(69, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(69, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(69, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(69, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(69, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(70, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(70, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(70, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(70, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(70, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(70, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(70, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(71, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(71, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(71, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(71, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(71, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(71, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(71, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(72, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(72, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(72, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(72, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(72, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(72, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(72, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(73, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(73, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(73, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(73, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(73, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(73, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(73, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(74, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(74, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(74, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(74, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(74, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(74, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(74, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(75, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(75, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(75, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(75, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(75, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(75, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(75, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(76, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(76, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(76, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(76, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(76, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(76, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(76, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(77, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(77, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(77, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(77, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(77, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(77, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(77, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(78, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(78, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(78, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(78, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(78, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(78, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(78, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(79, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(79, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(79, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(79, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(79, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(79, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(79, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(80, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(80, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(80, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(80, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(80, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(80, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(80, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(81, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(81, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(81, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(81, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(81, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(81, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(81, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(82, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(82, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(82, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(82, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(82, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(82, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(82, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        threadIdx_x_2 = T.env_thread("threadIdx.x")
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(0, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(0, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(0, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(0, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(1, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(1, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(1, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(1, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(2, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(2, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(2, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(2, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(3, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(3, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(3, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(3, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(4, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(4, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(4, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(4, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(5, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(5, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(5, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(5, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(6, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(6, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(6, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(6, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(7, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(7, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(7, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(7, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(8, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(8, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(8, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(8, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(9, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(9, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(9, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(9, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(10, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(10, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(10, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(10, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(11, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(11, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(11, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(11, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(12, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(12, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(12, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(12, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(13, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(13, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(13, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(13, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(14, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(14, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(14, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(14, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(15, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(15, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(15, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(15, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(16, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(16, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(16, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(16, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(17, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(17, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(17, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(17, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(18, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(18, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(18, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(18, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(19, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(19, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(19, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(19, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(20, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(20, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(20, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(20, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(21, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(21, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(21, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(21, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(22, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(22, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(22, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(22, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(23, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(23, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(23, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(23, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(24, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(24, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(24, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(24, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(25, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(25, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(25, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(25, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(26, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(26, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(26, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(26, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(27, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(27, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(27, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(27, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(28, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(28, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(28, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(28, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(29, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(29, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(29, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(29, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(30, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(30, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(30, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(30, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(31, 49) + threadIdx_x_2 < 1536:
                kernel_shared[T.Mul(31, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(31, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(31, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        for rc_outer_inner in range(8):
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
    for i1_inner in range(8):
        compute = T.Buffer((25088,))
        bias = T.Buffer((512,))
        compute[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
T.bool(True)
<class 'tvm.tir.expr.IntImm'>
with T.allocate([1536], "float32", "shared") as kernel_shared:
    threadIdx_x = T.launch_thread("threadIdx.x", 49)
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = T.float32(0.0)
    conv2d_nchw[T.Mul(0, 4) + 1] = T.float32(0.0)
    conv2d_nchw[T.Mul(0, 4) + 2] = T.float32(0.0)
    conv2d_nchw[T.Mul(0, 4) + 3] = T.float32(0.0)
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = T.float32(0.0)
    conv2d_nchw[T.Mul(1, 4) + 1] = T.float32(0.0)
    conv2d_nchw[T.Mul(1, 4) + 2] = T.float32(0.0)
    conv2d_nchw[T.Mul(1, 4) + 3] = T.float32(0.0)
    blockIdx_x = T.int32()
    for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        data = T.Buffer((25088,))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(0, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(0, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(0, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(0, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(0, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(0, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(0, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(1, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(1, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(1, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(1, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(1, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(1, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(1, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(2, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(2, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(2, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(2, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(2, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(2, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(2, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(3, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(3, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(3, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(3, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(3, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(3, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(3, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(4, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(4, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(4, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(4, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(4, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(4, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(4, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(5, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(5, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(5, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(5, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(5, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(5, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(5, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(6, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(6, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(6, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(6, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(6, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(6, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(6, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(7, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(7, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(7, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(7, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(7, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(7, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(7, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(8, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(8, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(8, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(8, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(8, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(8, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(8, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(9, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(9, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(9, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(9, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(9, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(9, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(9, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(10, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(10, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(10, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(10, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(10, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(10, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(10, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(11, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(11, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(11, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(11, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(11, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(11, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(11, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(12, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(12, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(12, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(12, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(12, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(12, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(12, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(13, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(13, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(13, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(13, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(13, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(13, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(13, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(14, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(14, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(14, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(14, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(14, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(14, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(14, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(15, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(15, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(15, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(15, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(15, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(15, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(15, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(16, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(16, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(16, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(16, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(16, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(16, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(16, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(17, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(17, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(17, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(17, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(17, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(17, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(17, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(18, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(18, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(18, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(18, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(18, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(18, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(18, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(19, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(19, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(19, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(19, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(19, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(19, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(19, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(20, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(20, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(20, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(20, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(20, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(20, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(20, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(21, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(21, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(21, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(21, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(21, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(21, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(21, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(22, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(22, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(22, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(22, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(22, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(22, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(22, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(23, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(23, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(23, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(23, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(23, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(23, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(23, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(24, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(24, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(24, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(24, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(24, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(24, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(24, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(25, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(25, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(25, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(25, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(25, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(25, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(25, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(26, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(26, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(26, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(26, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(26, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(26, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(26, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(27, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(27, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(27, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(27, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(27, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(27, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(27, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(28, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(28, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(28, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(28, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(28, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(28, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(28, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(29, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(29, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(29, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(29, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(29, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(29, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(29, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(30, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(30, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(30, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(30, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(30, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(30, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(30, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(31, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(31, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(31, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(31, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(31, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(31, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(31, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(32, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(32, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(32, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(32, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(32, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(32, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(32, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(33, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(33, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(33, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(33, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(33, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(33, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(33, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(34, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(34, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(34, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(34, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(34, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(34, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(34, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(35, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(35, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(35, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(35, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(35, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(35, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(35, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(36, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(36, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(36, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(36, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(36, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(36, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(36, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(37, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(37, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(37, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(37, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(37, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(37, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(37, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(38, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(38, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(38, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(38, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(38, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(38, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(38, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(39, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(39, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(39, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(39, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(39, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(39, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(39, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(40, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(40, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(40, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(40, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(40, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(40, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(40, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(41, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(41, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(41, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(41, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(41, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(41, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(41, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(42, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(42, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(42, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(42, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(42, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(42, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(42, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(43, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(43, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(43, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(43, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(43, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(43, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(43, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(44, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(44, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(44, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(44, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(44, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(44, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(44, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(45, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(45, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(45, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(45, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(45, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(45, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(45, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(46, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(46, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(46, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(46, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(46, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(46, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(46, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(47, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(47, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(47, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(47, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(47, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(47, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(47, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(48, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(48, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(48, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(48, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(48, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(48, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(48, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(49, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(49, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(49, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(49, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(49, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(49, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(49, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(50, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(50, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(50, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(50, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(50, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(50, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(50, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(51, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(51, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(51, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(51, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(51, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(51, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(51, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(52, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(52, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(52, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(52, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(52, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(52, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(52, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(53, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(53, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(53, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(53, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(53, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(53, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(53, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(54, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(54, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(54, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(54, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(54, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(54, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(54, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(55, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(55, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(55, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(55, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(55, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(55, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(55, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(56, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(56, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(56, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(56, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(56, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(56, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(56, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(57, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(57, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(57, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(57, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(57, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(57, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(57, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(58, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(58, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(58, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(58, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(58, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(58, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(58, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(59, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(59, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(59, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(59, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(59, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(59, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(59, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(60, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(60, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(60, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(60, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(60, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(60, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(60, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(61, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(61, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(61, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(61, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(61, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(61, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(61, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(62, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(62, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(62, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(62, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(62, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(62, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(62, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(63, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(63, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(63, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(63, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(63, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(63, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(63, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(64, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(64, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(64, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(64, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(64, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(64, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(64, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(65, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(65, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(65, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(65, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(65, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(65, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(65, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(66, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(66, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(66, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(66, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(66, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(66, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(66, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(67, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(67, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(67, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(67, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(67, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(67, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(67, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(68, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(68, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(68, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(68, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(68, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(68, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(68, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(69, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(69, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(69, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(69, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(69, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(69, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(69, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(70, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(70, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(70, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(70, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(70, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(70, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(70, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(71, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(71, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(71, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(71, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(71, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(71, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(71, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(72, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(72, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(72, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(72, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(72, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(72, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(72, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(73, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(73, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(73, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(73, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(73, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(73, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(73, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(74, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(74, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(74, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(74, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(74, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(74, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(74, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(75, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(75, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(75, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(75, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(75, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(75, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(75, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(76, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(76, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(76, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(76, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(76, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(76, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(76, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(77, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(77, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(77, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(77, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(77, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(77, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(77, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(78, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(78, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(78, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(78, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(78, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(78, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(78, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(79, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(79, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(79, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(79, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(79, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(79, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(79, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(80, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(80, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(80, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(80, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(80, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(80, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(80, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(81, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(81, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(81, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(81, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(81, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(81, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(81, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(82, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(82, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared[T.Mul(82, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(82, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(82, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(82, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(82, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        threadIdx_x_2 = T.env_thread("threadIdx.x")
        kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
        kernel = T.Buffer((2359296,))
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(0, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(0, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(0, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(0, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(1, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(1, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(1, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(1, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(2, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(2, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(2, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(2, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(3, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(3, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(3, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(3, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(4, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(4, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(4, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(4, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(5, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(5, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(5, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(5, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(6, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(6, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(6, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(6, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(7, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(7, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(7, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(7, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(8, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(8, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(8, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(8, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(9, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(9, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(9, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(9, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(10, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(10, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(10, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(10, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(11, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(11, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(11, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(11, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(12, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(12, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(12, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(12, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(13, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(13, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(13, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(13, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(14, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(14, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(14, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(14, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(15, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(15, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(15, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(15, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(16, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(16, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(16, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(16, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(17, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(17, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(17, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(17, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(18, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(18, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(18, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(18, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(19, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(19, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(19, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(19, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(20, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(20, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(20, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(20, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(21, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(21, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(21, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(21, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(22, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(22, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(22, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(22, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(23, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(23, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(23, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(23, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(24, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(24, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(24, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(24, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(25, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(25, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(25, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(25, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(26, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(26, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(26, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(26, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(27, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(27, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(27, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(27, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(28, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(28, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(28, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(28, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(29, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(29, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(29, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(29, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(30, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(30, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(30, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(30, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(31, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(31, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(31, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(31, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        for rc_outer_inner in range(8):
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
    for i1_inner in range(8):
        compute = T.Buffer((25088,))
        bias = T.Buffer((512,))
        compute[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.stmt.Allocate'>
T.bool(True)
<class 'tvm.tir.expr.IntImm'>
with T.allocate([4032], "float32", "shared") as pad_temp_shared:
    kernel_shared = T.allocate([1536], "float32", "shared")
    threadIdx_x = T.launch_thread("threadIdx.x", 49)
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = T.float32(0.0)
    conv2d_nchw[T.Mul(0, 4) + 1] = T.float32(0.0)
    conv2d_nchw[T.Mul(0, 4) + 2] = T.float32(0.0)
    conv2d_nchw[T.Mul(0, 4) + 3] = T.float32(0.0)
    conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = T.float32(0.0)
    conv2d_nchw[T.Mul(1, 4) + 1] = T.float32(0.0)
    conv2d_nchw[T.Mul(1, 4) + 2] = T.float32(0.0)
    conv2d_nchw[T.Mul(1, 4) + 3] = T.float32(0.0)
    blockIdx_x = T.int32()
    for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        pad_temp_shared_1 = T.Buffer((4032,), data=pad_temp_shared, scope="shared")
        data = T.Buffer((25088,))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(0, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(0, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(0, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(0, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(0, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(0, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(0, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(1, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(1, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(1, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(1, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(1, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(1, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(1, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(2, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(2, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(2, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(2, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(2, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(2, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(2, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(3, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(3, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(3, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(3, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(3, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(3, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(3, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(4, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(4, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(4, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(4, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(4, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(4, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(4, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(5, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(5, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(5, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(5, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(5, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(5, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(5, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(6, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(6, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(6, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(6, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(6, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(6, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(6, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(7, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(7, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(7, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(7, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(7, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(7, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(7, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(8, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(8, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(8, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(8, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(8, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(8, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(8, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(9, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(9, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(9, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(9, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(9, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(9, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(9, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(10, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(10, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(10, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(10, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(10, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(10, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(10, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(11, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(11, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(11, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(11, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(11, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(11, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(11, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(12, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(12, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(12, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(12, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(12, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(12, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(12, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(13, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(13, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(13, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(13, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(13, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(13, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(13, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(14, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(14, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(14, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(14, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(14, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(14, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(14, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(15, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(15, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(15, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(15, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(15, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(15, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(15, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(16, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(16, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(16, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(16, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(16, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(16, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(16, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(17, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(17, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(17, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(17, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(17, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(17, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(17, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(18, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(18, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(18, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(18, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(18, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(18, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(18, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(19, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(19, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(19, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(19, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(19, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(19, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(19, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(20, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(20, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(20, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(20, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(20, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(20, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(20, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(21, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(21, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(21, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(21, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(21, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(21, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(21, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(22, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(22, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(22, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(22, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(22, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(22, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(22, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(23, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(23, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(23, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(23, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(23, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(23, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(23, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(24, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(24, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(24, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(24, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(24, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(24, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(24, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(25, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(25, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(25, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(25, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(25, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(25, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(25, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(26, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(26, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(26, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(26, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(26, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(26, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(26, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(27, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(27, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(27, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(27, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(27, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(27, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(27, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(28, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(28, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(28, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(28, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(28, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(28, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(28, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(29, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(29, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(29, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(29, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(29, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(29, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(29, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(30, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(30, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(30, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(30, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(30, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(30, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(30, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(31, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(31, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(31, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(31, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(31, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(31, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(31, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(32, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(32, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(32, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(32, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(32, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(32, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(32, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(33, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(33, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(33, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(33, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(33, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(33, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(33, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(34, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(34, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(34, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(34, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(34, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(34, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(34, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(35, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(35, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(35, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(35, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(35, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(35, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(35, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(36, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(36, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(36, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(36, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(36, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(36, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(36, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(37, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(37, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(37, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(37, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(37, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(37, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(37, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(38, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(38, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(38, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(38, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(38, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(38, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(38, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(39, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(39, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(39, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(39, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(39, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(39, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(39, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(40, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(40, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(40, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(40, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(40, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(40, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(40, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(41, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(41, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(41, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(41, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(41, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(41, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(41, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(42, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(42, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(42, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(42, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(42, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(42, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(42, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(43, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(43, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(43, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(43, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(43, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(43, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(43, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(44, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(44, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(44, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(44, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(44, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(44, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(44, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(45, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(45, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(45, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(45, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(45, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(45, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(45, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(46, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(46, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(46, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(46, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(46, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(46, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(46, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(47, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(47, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(47, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(47, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(47, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(47, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(47, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(48, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(48, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(48, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(48, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(48, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(48, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(48, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(49, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(49, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(49, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(49, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(49, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(49, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(49, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(50, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(50, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(50, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(50, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(50, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(50, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(50, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(51, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(51, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(51, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(51, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(51, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(51, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(51, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(52, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(52, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(52, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(52, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(52, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(52, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(52, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(53, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(53, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(53, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(53, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(53, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(53, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(53, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(54, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(54, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(54, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(54, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(54, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(54, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(54, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(55, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(55, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(55, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(55, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(55, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(55, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(55, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(56, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(56, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(56, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(56, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(56, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(56, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(56, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(57, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(57, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(57, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(57, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(57, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(57, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(57, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(58, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(58, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(58, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(58, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(58, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(58, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(58, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(59, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(59, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(59, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(59, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(59, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(59, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(59, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(60, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(60, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(60, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(60, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(60, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(60, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(60, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(61, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(61, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(61, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(61, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(61, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(61, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(61, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(62, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(62, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(62, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(62, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(62, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(62, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(62, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(63, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(63, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(63, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(63, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(63, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(63, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(63, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(64, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(64, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(64, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(64, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(64, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(64, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(64, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(65, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(65, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(65, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(65, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(65, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(65, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(65, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(66, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(66, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(66, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(66, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(66, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(66, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(66, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(67, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(67, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(67, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(67, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(67, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(67, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(67, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(68, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(68, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(68, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(68, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(68, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(68, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(68, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(69, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(69, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(69, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(69, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(69, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(69, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(69, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(70, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(70, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(70, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(70, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(70, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(70, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(70, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(71, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(71, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(71, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(71, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(71, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(71, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(71, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(72, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(72, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(72, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(72, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(72, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(72, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(72, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(73, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(73, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(73, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(73, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(73, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(73, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(73, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(74, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(74, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(74, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(74, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(74, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(74, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(74, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(75, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(75, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(75, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(75, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(75, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(75, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(75, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(76, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(76, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(76, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(76, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(76, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(76, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(76, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(77, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(77, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(77, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(77, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(77, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(77, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(77, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(78, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(78, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(78, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(78, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(78, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(78, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(78, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(79, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(79, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(79, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(79, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(79, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(79, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(79, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(80, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(80, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(80, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(80, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(80, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(80, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(80, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(81, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(81, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(81, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(81, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(81, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(81, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(81, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(82, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(82, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(82, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(82, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(82, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(82, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(82, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        threadIdx_x_2 = T.env_thread("threadIdx.x")
        kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
        kernel = T.Buffer((2359296,))
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(0, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(0, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(0, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(0, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(1, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(1, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(1, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(1, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(2, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(2, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(2, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(2, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(3, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(3, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(3, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(3, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(4, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(4, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(4, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(4, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(5, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(5, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(5, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(5, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(6, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(6, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(6, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(6, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(7, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(7, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(7, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(7, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(8, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(8, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(8, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(8, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(9, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(9, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(9, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(9, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(10, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(10, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(10, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(10, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(11, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(11, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(11, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(11, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(12, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(12, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(12, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(12, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(13, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(13, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(13, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(13, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(14, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(14, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(14, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(14, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(15, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(15, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(15, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(15, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(16, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(16, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(16, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(16, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(17, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(17, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(17, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(17, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(18, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(18, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(18, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(18, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(19, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(19, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(19, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(19, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(20, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(20, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(20, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(20, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(21, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(21, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(21, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(21, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(22, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(22, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(22, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(22, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(23, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(23, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(23, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(23, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(24, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(24, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(24, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(24, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(25, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(25, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(25, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(25, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(26, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(26, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(26, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(26, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(27, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(27, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(27, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(27, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(28, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(28, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(28, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(28, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(29, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(29, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(29, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(29, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(30, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(30, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(30, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(30, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(31, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(31, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(31, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(31, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        for rc_outer_inner in range(8):
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 1] = conv2d_nchw[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 2] = conv2d_nchw[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw[T.Mul(0, 4) + 3] = conv2d_nchw[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 1] = conv2d_nchw[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 2] = conv2d_nchw[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw[T.Mul(1, 4) + 3] = conv2d_nchw[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
    for i1_inner in range(8):
        compute = T.Buffer((25088,))
        bias = T.Buffer((512,))
        compute[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.stmt.Allocate'>
T.bool(True)
<class 'tvm.tir.expr.IntImm'>
with T.allocate([8], "float32", "local") as conv2d_nchw:
    pad_temp_shared = T.allocate([4032], "float32", "shared")
    kernel_shared = T.allocate([1536], "float32", "shared")
    threadIdx_x = T.launch_thread("threadIdx.x", 49)
    conv2d_nchw_1 = T.Buffer((8,), data=conv2d_nchw, scope="local", align=32)
    conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = T.float32(0.0)
    conv2d_nchw_1[T.Mul(0, 4) + 1] = T.float32(0.0)
    conv2d_nchw_1[T.Mul(0, 4) + 2] = T.float32(0.0)
    conv2d_nchw_1[T.Mul(0, 4) + 3] = T.float32(0.0)
    conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = T.float32(0.0)
    conv2d_nchw_1[T.Mul(1, 4) + 1] = T.float32(0.0)
    conv2d_nchw_1[T.Mul(1, 4) + 2] = T.float32(0.0)
    conv2d_nchw_1[T.Mul(1, 4) + 3] = T.float32(0.0)
    blockIdx_x = T.int32()
    for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        pad_temp_shared_1 = T.Buffer((4032,), data=pad_temp_shared, scope="shared")
        data = T.Buffer((25088,))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(0, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(0, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(0, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(0, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(0, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(0, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(0, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(1, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(1, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(1, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(1, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(1, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(1, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(1, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(2, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(2, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(2, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(2, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(2, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(2, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(2, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(3, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(3, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(3, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(3, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(3, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(3, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(3, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(4, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(4, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(4, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(4, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(4, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(4, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(4, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(5, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(5, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(5, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(5, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(5, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(5, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(5, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(6, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(6, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(6, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(6, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(6, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(6, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(6, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(7, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(7, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(7, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(7, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(7, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(7, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(7, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(8, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(8, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(8, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(8, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(8, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(8, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(8, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(9, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(9, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(9, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(9, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(9, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(9, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(9, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(10, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(10, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(10, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(10, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(10, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(10, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(10, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(11, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(11, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(11, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(11, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(11, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(11, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(11, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(12, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(12, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(12, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(12, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(12, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(12, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(12, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(13, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(13, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(13, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(13, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(13, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(13, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(13, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(14, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(14, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(14, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(14, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(14, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(14, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(14, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(15, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(15, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(15, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(15, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(15, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(15, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(15, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(16, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(16, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(16, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(16, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(16, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(16, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(16, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(17, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(17, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(17, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(17, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(17, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(17, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(17, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(18, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(18, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(18, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(18, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(18, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(18, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(18, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(19, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(19, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(19, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(19, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(19, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(19, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(19, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(20, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(20, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(20, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(20, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(20, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(20, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(20, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(21, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(21, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(21, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(21, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(21, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(21, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(21, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(22, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(22, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(22, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(22, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(22, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(22, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(22, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(23, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(23, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(23, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(23, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(23, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(23, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(23, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(24, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(24, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(24, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(24, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(24, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(24, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(24, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(25, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(25, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(25, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(25, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(25, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(25, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(25, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(26, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(26, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(26, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(26, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(26, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(26, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(26, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(27, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(27, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(27, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(27, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(27, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(27, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(27, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(28, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(28, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(28, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(28, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(28, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(28, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(28, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(29, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(29, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(29, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(29, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(29, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(29, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(29, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(30, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(30, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(30, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(30, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(30, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(30, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(30, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(31, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(31, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(31, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(31, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(31, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(31, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(31, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(32, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(32, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(32, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(32, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(32, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(32, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(32, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(33, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(33, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(33, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(33, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(33, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(33, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(33, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(34, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(34, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(34, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(34, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(34, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(34, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(34, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(35, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(35, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(35, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(35, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(35, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(35, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(35, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(36, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(36, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(36, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(36, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(36, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(36, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(36, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(37, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(37, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(37, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(37, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(37, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(37, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(37, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(38, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(38, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(38, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(38, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(38, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(38, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(38, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(39, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(39, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(39, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(39, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(39, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(39, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(39, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(40, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(40, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(40, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(40, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(40, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(40, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(40, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(41, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(41, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(41, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(41, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(41, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(41, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(41, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(42, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(42, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(42, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(42, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(42, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(42, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(42, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(43, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(43, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(43, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(43, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(43, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(43, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(43, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(44, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(44, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(44, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(44, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(44, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(44, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(44, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(45, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(45, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(45, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(45, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(45, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(45, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(45, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(46, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(46, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(46, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(46, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(46, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(46, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(46, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(47, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(47, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(47, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(47, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(47, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(47, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(47, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(48, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(48, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(48, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(48, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(48, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(48, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(48, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(49, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(49, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(49, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(49, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(49, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(49, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(49, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(50, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(50, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(50, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(50, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(50, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(50, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(50, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(51, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(51, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(51, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(51, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(51, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(51, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(51, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(52, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(52, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(52, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(52, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(52, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(52, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(52, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(53, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(53, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(53, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(53, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(53, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(53, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(53, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(54, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(54, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(54, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(54, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(54, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(54, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(54, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(55, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(55, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(55, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(55, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(55, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(55, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(55, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(56, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(56, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(56, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(56, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(56, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(56, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(56, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(57, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(57, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(57, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(57, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(57, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(57, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(57, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(58, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(58, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(58, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(58, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(58, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(58, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(58, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(59, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(59, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(59, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(59, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(59, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(59, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(59, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(60, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(60, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(60, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(60, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(60, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(60, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(60, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(61, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(61, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(61, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(61, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(61, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(61, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(61, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(62, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(62, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(62, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(62, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(62, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(62, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(62, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(63, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(63, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(63, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(63, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(63, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(63, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(63, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(64, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(64, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(64, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(64, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(64, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(64, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(64, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(65, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(65, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(65, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(65, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(65, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(65, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(65, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(66, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(66, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(66, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(66, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(66, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(66, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(66, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(67, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(67, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(67, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(67, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(67, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(67, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(67, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(68, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(68, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(68, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(68, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(68, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(68, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(68, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(69, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(69, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(69, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(69, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(69, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(69, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(69, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(70, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(70, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(70, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(70, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(70, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(70, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(70, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(71, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(71, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(71, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(71, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(71, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(71, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(71, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(72, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(72, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(72, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(72, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(72, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(72, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(72, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(73, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(73, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(73, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(73, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(73, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(73, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(73, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(74, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(74, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(74, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(74, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(74, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(74, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(74, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(75, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(75, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(75, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(75, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(75, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(75, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(75, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(76, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(76, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(76, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(76, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(76, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(76, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(76, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(77, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(77, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(77, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(77, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(77, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(77, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(77, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(78, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(78, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(78, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(78, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(78, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(78, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(78, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(79, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(79, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(79, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(79, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(79, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(79, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(79, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(80, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(80, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(80, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(80, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(80, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(80, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(80, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(81, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(81, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(81, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(81, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(81, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(81, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(81, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(82, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(82, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(82, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(82, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(82, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(82, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(82, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        threadIdx_x_2 = T.env_thread("threadIdx.x")
        kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
        kernel = T.Buffer((2359296,))
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(0, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(0, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(0, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(0, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(1, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(1, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(1, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(1, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(2, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(2, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(2, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(2, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(3, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(3, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(3, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(3, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(4, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(4, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(4, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(4, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(5, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(5, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(5, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(5, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(6, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(6, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(6, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(6, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(7, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(7, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(7, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(7, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(8, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(8, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(8, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(8, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(9, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(9, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(9, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(9, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(10, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(10, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(10, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(10, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(11, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(11, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(11, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(11, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(12, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(12, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(12, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(12, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(13, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(13, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(13, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(13, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(14, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(14, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(14, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(14, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(15, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(15, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(15, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(15, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(16, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(16, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(16, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(16, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(17, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(17, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(17, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(17, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(18, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(18, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(18, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(18, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(19, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(19, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(19, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(19, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(20, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(20, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(20, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(20, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(21, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(21, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(21, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(21, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(22, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(22, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(22, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(22, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(23, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(23, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(23, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(23, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(24, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(24, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(24, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(24, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(25, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(25, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(25, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(25, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(26, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(26, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(26, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(26, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(27, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(27, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(27, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(27, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(28, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(28, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(28, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(28, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(29, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(29, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(29, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(29, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(30, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(30, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(30, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(30, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(31, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(31, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(31, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(31, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        for rc_outer_inner in range(8):
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
    for i1_inner in range(8):
        compute = T.Buffer((25088,))
        bias = T.Buffer((512,))
        compute[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw_1[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.stmt.Allocate'>
with T.launch_thread("blockIdx.x", 64) as blockIdx_x:
    conv2d_nchw = T.allocate([8], "float32", "local")
    pad_temp_shared = T.allocate([4032], "float32", "shared")
    kernel_shared = T.allocate([1536], "float32", "shared")
    threadIdx_x = T.launch_thread("threadIdx.x", 49)
    conv2d_nchw_1 = T.Buffer((8,), data=conv2d_nchw, scope="local", align=32)
    conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = T.float32(0.0)
    conv2d_nchw_1[T.Mul(0, 4) + 1] = T.float32(0.0)
    conv2d_nchw_1[T.Mul(0, 4) + 2] = T.float32(0.0)
    conv2d_nchw_1[T.Mul(0, 4) + 3] = T.float32(0.0)
    conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = T.float32(0.0)
    conv2d_nchw_1[T.Mul(1, 4) + 1] = T.float32(0.0)
    conv2d_nchw_1[T.Mul(1, 4) + 2] = T.float32(0.0)
    conv2d_nchw_1[T.Mul(1, 4) + 3] = T.float32(0.0)
    for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        pad_temp_shared_1 = T.Buffer((4032,), data=pad_temp_shared, scope="shared")
        data = T.Buffer((25088,))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(0, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(0, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(0, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(0, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(0, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(0, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(0, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(1, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(1, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(1, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(1, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(1, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(1, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(1, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(2, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(2, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(2, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(2, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(2, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(2, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(2, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(3, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(3, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(3, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(3, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(3, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(3, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(3, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(4, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(4, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(4, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(4, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(4, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(4, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(4, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(5, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(5, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(5, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(5, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(5, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(5, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(5, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(6, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(6, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(6, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(6, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(6, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(6, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(6, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(7, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(7, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(7, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(7, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(7, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(7, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(7, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(8, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(8, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(8, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(8, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(8, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(8, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(8, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(9, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(9, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(9, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(9, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(9, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(9, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(9, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(10, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(10, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(10, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(10, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(10, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(10, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(10, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(11, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(11, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(11, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(11, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(11, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(11, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(11, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(12, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(12, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(12, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(12, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(12, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(12, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(12, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(13, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(13, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(13, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(13, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(13, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(13, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(13, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(14, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(14, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(14, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(14, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(14, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(14, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(14, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(15, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(15, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(15, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(15, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(15, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(15, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(15, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(16, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(16, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(16, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(16, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(16, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(16, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(16, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(17, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(17, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(17, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(17, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(17, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(17, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(17, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(18, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(18, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(18, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(18, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(18, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(18, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(18, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(19, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(19, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(19, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(19, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(19, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(19, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(19, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(20, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(20, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(20, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(20, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(20, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(20, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(20, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(21, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(21, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(21, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(21, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(21, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(21, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(21, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(22, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(22, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(22, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(22, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(22, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(22, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(22, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(23, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(23, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(23, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(23, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(23, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(23, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(23, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(24, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(24, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(24, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(24, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(24, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(24, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(24, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(25, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(25, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(25, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(25, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(25, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(25, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(25, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(26, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(26, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(26, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(26, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(26, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(26, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(26, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(27, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(27, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(27, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(27, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(27, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(27, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(27, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(28, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(28, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(28, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(28, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(28, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(28, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(28, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(29, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(29, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(29, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(29, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(29, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(29, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(29, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(30, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(30, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(30, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(30, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(30, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(30, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(30, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(31, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(31, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(31, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(31, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(31, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(31, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(31, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(32, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(32, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(32, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(32, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(32, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(32, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(32, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(33, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(33, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(33, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(33, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(33, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(33, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(33, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(34, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(34, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(34, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(34, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(34, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(34, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(34, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(35, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(35, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(35, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(35, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(35, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(35, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(35, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(36, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(36, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(36, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(36, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(36, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(36, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(36, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(37, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(37, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(37, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(37, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(37, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(37, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(37, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(38, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(38, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(38, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(38, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(38, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(38, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(38, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(39, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(39, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(39, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(39, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(39, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(39, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(39, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(40, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(40, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(40, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(40, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(40, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(40, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(40, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(41, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(41, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(41, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(41, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(41, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(41, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(41, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(42, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(42, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(42, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(42, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(42, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(42, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(42, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(43, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(43, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(43, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(43, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(43, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(43, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(43, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(44, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(44, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(44, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(44, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(44, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(44, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(44, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(45, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(45, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(45, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(45, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(45, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(45, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(45, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(46, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(46, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(46, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(46, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(46, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(46, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(46, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(47, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(47, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(47, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(47, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(47, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(47, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(47, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(48, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(48, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(48, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(48, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(48, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(48, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(48, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(49, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(49, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(49, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(49, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(49, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(49, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(49, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(50, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(50, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(50, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(50, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(50, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(50, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(50, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(51, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(51, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(51, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(51, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(51, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(51, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(51, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(52, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(52, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(52, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(52, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(52, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(52, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(52, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(53, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(53, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(53, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(53, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(53, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(53, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(53, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(54, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(54, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(54, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(54, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(54, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(54, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(54, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(55, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(55, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(55, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(55, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(55, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(55, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(55, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(56, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(56, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(56, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(56, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(56, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(56, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(56, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(57, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(57, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(57, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(57, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(57, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(57, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(57, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(58, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(58, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(58, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(58, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(58, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(58, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(58, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(59, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(59, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(59, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(59, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(59, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(59, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(59, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(60, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(60, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(60, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(60, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(60, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(60, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(60, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(61, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(61, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(61, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(61, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(61, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(61, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(61, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(62, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(62, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(62, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(62, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(62, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(62, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(62, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(63, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(63, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(63, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(63, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(63, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(63, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(63, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(64, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(64, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(64, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(64, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(64, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(64, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(64, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(65, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(65, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(65, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(65, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(65, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(65, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(65, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(66, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(66, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(66, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(66, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(66, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(66, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(66, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(67, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(67, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(67, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(67, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(67, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(67, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(67, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(68, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(68, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(68, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(68, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(68, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(68, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(68, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(69, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(69, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(69, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(69, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(69, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(69, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(69, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(70, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(70, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(70, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(70, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(70, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(70, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(70, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(71, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(71, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(71, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(71, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(71, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(71, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(71, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(72, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(72, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(72, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(72, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(72, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(72, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(72, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(73, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(73, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(73, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(73, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(73, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(73, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(73, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(74, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(74, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(74, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(74, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(74, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(74, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(74, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(75, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(75, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(75, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(75, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(75, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(75, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(75, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(76, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(76, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(76, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(76, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(76, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(76, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(76, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(77, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(77, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(77, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(77, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(77, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(77, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(77, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(78, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(78, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(78, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(78, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(78, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(78, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(78, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(79, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(79, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(79, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(79, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(79, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(79, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(79, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(80, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(80, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(80, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(80, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(80, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(80, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(80, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(81, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(81, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(81, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(81, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(81, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(81, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(81, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if T.Mul(82, 7) + threadIdx_x_1 // 7 < 576:
                if T.Mul(82, 49) + threadIdx_x_1 < 4032:
                    pad_temp_shared_1[T.Mul(82, 49) + threadIdx_x_1] = T.if_then_else(1 <= (T.Mul(82, 7) + threadIdx_x_1 // 7) % 9 and (T.Mul(82, 7) + threadIdx_x_1 // 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (T.Mul(82, 7) + threadIdx_x_1 // 7) // 9 * 49 + (T.Mul(82, 7) + threadIdx_x_1 // 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        threadIdx_x_2 = T.env_thread("threadIdx.x")
        kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
        kernel = T.Buffer((2359296,))
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(0, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(0, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(0, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(0, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(1, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(1, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(1, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(1, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(2, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(2, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(2, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(2, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(3, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(3, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(3, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(3, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(4, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(4, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(4, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(4, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(5, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(5, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(5, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(5, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(6, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(6, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(6, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(6, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(7, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(7, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(7, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(7, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(8, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(8, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(8, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(8, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(9, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(9, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(9, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(9, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(10, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(10, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(10, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(10, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(11, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(11, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(11, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(11, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(12, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(12, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(12, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(12, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(13, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(13, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(13, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(13, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(14, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(14, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(14, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(14, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(15, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(15, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(15, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(15, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(16, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(16, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(16, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(16, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(17, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(17, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(17, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(17, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(18, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(18, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(18, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(18, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(19, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(19, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(19, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(19, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(20, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(20, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(20, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(20, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(21, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(21, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(21, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(21, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(22, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(22, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(22, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(22, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(23, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(23, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(23, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(23, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(24, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(24, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(24, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(24, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(25, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(25, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(25, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(25, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(26, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(26, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(26, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(26, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(27, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(27, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(27, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(27, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(28, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(28, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(28, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(28, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(29, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(29, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(29, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(29, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(30, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(30, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(30, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(30, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            if T.Mul(31, 49) + threadIdx_x_2 < 1536:
                kernel_shared_1[T.Mul(31, 49) + threadIdx_x_2] = kernel[blockIdx_x * 36864 + (T.Mul(31, 49) + threadIdx_x_2) // 192 * 4608 + rc_outer_outer * 576 + (T.Mul(31, 49) + threadIdx_x_2) % 192 * 3 + rx_outer_outer]
        for rc_outer_inner in range(8):
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(0, 7) + threadIdx_x] * kernel_shared_1[T.Add(T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3), 0)]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(1, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 1]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(0, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 1] = conv2d_nchw_1[T.Mul(0, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 2] = conv2d_nchw_1[T.Mul(0, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw_1[T.Mul(0, 4) + 3] = conv2d_nchw_1[T.Mul(0, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(0, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(0, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(0, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(1, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(1, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(2, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(2, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(3, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(3, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(4, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(4, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(5, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(5, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(6, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(6, 3) + 2]
            conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] = conv2d_nchw_1[T.Add(T.Mul(1, 4), 0)] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(0, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 1] = conv2d_nchw_1[T.Mul(1, 4) + 1] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(1, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 2] = conv2d_nchw_1[T.Mul(1, 4) + 2] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(2, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
            conv2d_nchw_1[T.Mul(1, 4) + 3] = conv2d_nchw_1[T.Mul(1, 4) + 3] + pad_temp_shared_1[rc_outer_inner * 504 + T.Mul(7, 63) + T.Mul(2, 7) + threadIdx_x] * kernel_shared_1[T.Mul(1, 768) + T.Mul(3, 192) + rc_outer_inner * 24 + T.Mul(7, 3) + 2]
    for i1_inner in range(8):
        compute = T.Buffer((25088,))
        bias = T.Buffer((512,))
        compute[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw_1[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((1, 512, 7, 7), "float32"), kernel: T.Buffer((512, 512, 3, 3), "float32"), bias: T.Buffer((1, 512, 1, 1), "float32"), compute: T.Buffer((1, 512, 7, 7), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        blockIdx_x = T.launch_thread("blockIdx.x", 64)
        conv2d_nchw = T.allocate([8], "float32", "local")
        pad_temp_shared = T.allocate([4032], "float32", "shared")
        kernel_shared = T.allocate([1536], "float32", "shared")
        threadIdx_x = T.launch_thread("threadIdx.x", 49)
        conv2d_nchw_1 = T.Buffer((8,), data=conv2d_nchw, scope="local", align=32)
        conv2d_nchw_1[0] = T.float32(0.0)
        conv2d_nchw_1[1] = T.float32(0.0)
        conv2d_nchw_1[2] = T.float32(0.0)
        conv2d_nchw_1[3] = T.float32(0.0)
        conv2d_nchw_1[4] = T.float32(0.0)
        conv2d_nchw_1[5] = T.float32(0.0)
        conv2d_nchw_1[6] = T.float32(0.0)
        conv2d_nchw_1[7] = T.float32(0.0)
        for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
            cse_var_2: T.int32 = rc_outer_outer * 3136
            cse_var_1: T.int32 = rc_outer_outer * 576
            threadIdx_x_1 = T.env_thread("threadIdx.x")
            pad_temp_shared_1 = T.Buffer((4032,), data=pad_temp_shared, scope="shared")
            data_1 = T.Buffer((25088,), data=data.data)
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 49] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 49) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 98] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 98) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 147] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 147) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 196] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 196) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 245] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 245) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 294] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 294) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 343] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 343) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 392] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 392) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 441] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 335], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 490] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 490) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 539] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 539) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 588] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 588) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 637] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 637) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 686] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 686) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 735] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 735) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 784] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 784) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 833] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 833) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 882] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 678], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 931] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 931) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 980] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 980) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1029] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1029) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1078] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1078) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1127] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1127) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1176] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1176) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1225] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1225) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1274] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1274) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1323] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 1021], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1372] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1372) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1421] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1421) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1470] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1470) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1519] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1519) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1568] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1568) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1617] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1617) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1666] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1666) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1715] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1715) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1764] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 1364], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1813] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1813) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1862] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1862) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1911] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1911) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1960] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1960) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2009] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2009) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2058] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2058) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2107] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2107) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2156] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2156) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2205] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 1707], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2254] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2254) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2303] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2303) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2352] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2352) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2401] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2401) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2450] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2450) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2499] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2499) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2548] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2548) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2597] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2597) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2646] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 2050], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2695] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2695) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2744] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2744) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2793] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2793) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2842] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2842) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2891] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2891) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2940] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2940) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2989] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2989) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3038] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3038) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3087] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 2393], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3136] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3136) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3185] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3185) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3234] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3234) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3283] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3283) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3332] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3332) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3381] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3381) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3430] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3430) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3479] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3479) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3528] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 2736], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3577] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3577) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3626] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3626) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3675] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3675) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3724] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3724) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3773] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3773) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3822] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3822) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3871] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3871) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3920] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3920) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3969] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 3079], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                if threadIdx_x_1 < 14:
                    pad_temp_shared_1[threadIdx_x_1 + 4018] = T.if_then_else(threadIdx_x_1 < 7 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 4018) // 63 * 49 + rx_outer_outer + threadIdx_x_1 + 41], T.float32(0.0))
            threadIdx_x_2 = T.env_thread("threadIdx.x")
            kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
            kernel_1 = T.Buffer((2359296,), data=kernel.data)
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2] = kernel_1[blockIdx_x * 36864 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 49] = kernel_1[blockIdx_x * 36864 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 147]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 98] = kernel_1[blockIdx_x * 36864 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 294]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 147] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 147) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 147) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 196] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 196) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 12]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 245] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 245) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 159]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 294] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 294) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 306]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 343] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 343) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 151) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 392] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 392) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 24]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 441] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 441) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 171]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 490] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 490) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 318]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 539] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 539) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 155) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 588] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 588) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 36]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 637] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 637) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 183]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 686] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 686) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 330]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 735] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 735) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 159) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 784] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 784) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 48]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 833] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 833) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 195]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 882] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 882) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 342]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 931] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 931) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 163) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 980] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 980) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 60]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1029] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1029) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 207]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1078] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1078) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 354]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1127] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1127) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 167) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1176] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1176) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 72]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1225] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1225) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 219]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1274] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1274) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 366]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1323] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1323) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 171) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1372] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1372) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 84]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1421] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1421) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 231]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1470] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1470) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 378]
            with T.launch_thread(threadIdx_x_2, 49):
                if threadIdx_x_2 < 17:
                    kernel_shared_1[threadIdx_x_2 + 1519] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1519) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 525]
            for rc_outer_inner in range(8):
                cse_var_3: T.int32 = rc_outer_inner * 24
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 192]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 384]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 576]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 3]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 195]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 387]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 579]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 6]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 198]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 390]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 582]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 9]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 201]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 393]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 585]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 12]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 204]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 396]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 588]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 15]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 207]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 399]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 591]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 18]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 210]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 402]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 594]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 21]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 213]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 405]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 597]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 768]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 960]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 1152]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 1344]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 771]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 963]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 1155]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 1347]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 774]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 966]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 1158]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 1350]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 777]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 969]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 1161]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 1353]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 780]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 972]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 1164]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 1356]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 783]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 975]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 1167]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 1359]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 786]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 978]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 1170]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 1362]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 789]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 981]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 1173]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 1365]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 1]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 193]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 385]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 577]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 4]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 196]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 388]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 580]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 7]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 199]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 391]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 583]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 10]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 202]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 394]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 586]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 13]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 205]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 397]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 589]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 16]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 208]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 400]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 592]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 19]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 211]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 403]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 595]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 22]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 214]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 406]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 598]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 769]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 961]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 1153]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 1345]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 772]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 964]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 1156]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 1348]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 775]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 967]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 1159]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 1351]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 778]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 970]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 1162]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 1354]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 781]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 973]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 1165]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 1357]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 784]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 976]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 1168]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 1360]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 787]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 979]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 1171]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 1363]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 790]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 982]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 1174]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 1366]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 2]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 194]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 386]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 578]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 5]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 197]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 389]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 581]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 8]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 200]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 392]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 584]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 11]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 203]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 395]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 587]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 14]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 206]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 398]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 590]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 17]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 209]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 401]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 593]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 20]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 212]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 404]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 596]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 23]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 215]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 407]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 599]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 770]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 962]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 1154]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 1346]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 773]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 965]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 1157]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 1349]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 776]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 968]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 1160]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 1352]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 779]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 971]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 1163]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 1355]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 782]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 974]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 1166]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 1358]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 785]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 977]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 1169]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 1361]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 788]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 980]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 1172]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 1364]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 791]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 983]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 1175]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 1367]
        for i1_inner in range(8):
            compute_1 = T.Buffer((25088,), data=compute.data)
            bias_1 = T.Buffer((512,), data=bias.data)
            compute_1[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw_1[i1_inner] + bias_1[blockIdx_x * 8 + i1_inner], T.float32(0.0))
Phase 3
--------------------
64
<class 'tvm.tir.expr.IntImm'>
8
<class 'tvm.tir.expr.IntImm'>
4032
<class 'tvm.tir.expr.IntImm'>
1536
<class 'tvm.tir.expr.IntImm'>
49
<class 'tvm.tir.expr.IntImm'>
T.float32(0.0)
<class 'tvm.tir.expr.FloatImm'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
conv2d_nchw[0] = T.float32(0.0)
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
conv2d_nchw[1] = T.float32(0.0)
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
conv2d_nchw[2] = T.float32(0.0)
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
conv2d_nchw[3] = T.float32(0.0)
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
conv2d_nchw[4] = T.float32(0.0)
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
conv2d_nchw[5] = T.float32(0.0)
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
conv2d_nchw[6] = T.float32(0.0)
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
conv2d_nchw[7] = T.float32(0.0)
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
8
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
3
<class 'tvm.tir.expr.IntImm'>
49
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x
<class 'tvm.tir.expr.Var'>
7 <= threadIdx_x
<class 'tvm.tir.expr.LE'>
1
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer
<class 'tvm.tir.expr.Var'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
rc_outer_outer
<class 'tvm.tir.expr.Var'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.float32(0.0)
<class 'tvm.tir.expr.FloatImm'>
T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
49
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 49
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 49) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 49) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 49) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 49) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 49) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 49) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 49) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 49) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 49) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
49
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 49
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 49] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 49) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 49] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 49) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
98
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 98
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 98) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 98) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 98) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 98) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 98) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 98) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 98) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 98) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 98) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
98
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 98
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 98] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 98) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 98] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 98) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
147
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 147
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 147) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 147) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 147) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 147) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 147) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 147) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 147) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 147) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 147) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
147
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 147
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 147] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 147) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 147] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 147) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
196
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 196
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 196) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 196) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 196) // 63 * 49
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 196) // 63 * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 196) // 63 * 49 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 196) // 63 * 49 + threadIdx_x + rx_outer_outer - 1
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 196) // 63 * 49 + threadIdx_x + rx_outer_outer - 1]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 196) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
196
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 196
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
rx_outer_outer = T.int32()
threadIdx_x = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 196] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 196) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 196] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 196) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
245
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 245
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 245) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 245) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 245) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 245) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 245) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 245) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 245) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 245) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 245) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
245
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 245
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 245] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 245) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 245] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 245) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
294
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 294
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 294) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 294) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 294) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 294) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 294) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 294) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 294) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 294) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 294) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
294
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 294
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 294] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 294) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 294] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 294) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
343
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 343
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 343) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 343) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 343) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 343) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 343) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 343) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 343) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 343) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 343) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
343
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 343
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 343] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 343) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 343] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 343) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
42
<class 'tvm.tir.expr.IntImm'>
threadIdx_x < 42
<class 'tvm.tir.expr.LT'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
392
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 392
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 392) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 392) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 392) // 63 * 49
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 392) // 63 * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 392) // 63 * 49 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 392) // 63 * 49 + threadIdx_x + rx_outer_outer + 6
<class 'tvm.tir.expr.Add'>
data[rc_outer_outer * 3136 + (threadIdx_x + 392) // 63 * 49 + threadIdx_x + rx_outer_outer + 6]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 392) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
392
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 392
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 392] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 392) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 392] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 392) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
7
<class 'tvm.tir.expr.IntImm'>
7 <= threadIdx_x
<class 'tvm.tir.expr.LE'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
335
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 335
<class 'tvm.tir.expr.Add'>
data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 335]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 335], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
441
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 441
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 441] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 335], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 441] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 335], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
490
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 490
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 490) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 490) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 490) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 490) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 490) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 490) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 490) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 490) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 490) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
490
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 490
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 490] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 490) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 490] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 490) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
539
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 539
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 539) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 539) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 539) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 539) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 539) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 539) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 539) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 539) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 539) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
539
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 539
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 539] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 539) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 539] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 539) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
588
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 588
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 588) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 588) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 588) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 588) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 588) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 588) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 588) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 588) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 588) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
588
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 588
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 588] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 588) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 588] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 588) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
637
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 637
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 637) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 637) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 637) // 63 * 49
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 637) // 63 * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 637) // 63 * 49 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 637) // 63 * 49 + threadIdx_x + rx_outer_outer - 1
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 637) // 63 * 49 + threadIdx_x + rx_outer_outer - 1]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 637) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
637
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 637
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
rx_outer_outer = T.int32()
threadIdx_x = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 637] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 637) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 637] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 637) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
686
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 686
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 686) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 686) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 686) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 686) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 686) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 686) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 686) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 686) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 686) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
686
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 686
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 686] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 686) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 686] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 686) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
735
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 735
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 735) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 735) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 735) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 735) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 735) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 735) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 735) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 735) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 735) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
735
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 735
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 735] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 735) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 735] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 735) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
784
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 784
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 784) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 784) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 784) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 784) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 784) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 784) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 784) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 784) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 784) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
784
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 784
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 784] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 784) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 784] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 784) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
42
<class 'tvm.tir.expr.IntImm'>
threadIdx_x < 42
<class 'tvm.tir.expr.LT'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
833
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 833
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 833) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 833) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 833) // 63 * 49
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 833) // 63 * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 833) // 63 * 49 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 833) // 63 * 49 + threadIdx_x + rx_outer_outer + 6
<class 'tvm.tir.expr.Add'>
data[rc_outer_outer * 3136 + (threadIdx_x + 833) // 63 * 49 + threadIdx_x + rx_outer_outer + 6]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 833) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
833
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 833
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 833] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 833) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 833] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 833) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
7
<class 'tvm.tir.expr.IntImm'>
7 <= threadIdx_x
<class 'tvm.tir.expr.LE'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
678
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 678
<class 'tvm.tir.expr.Add'>
data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 678]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 678], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
882
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 882
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 882] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 678], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 882] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 678], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
931
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 931
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 931) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 931) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 931) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 931) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 931) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 931) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 931) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 931) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 931) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
931
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 931
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 931] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 931) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 931] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 931) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
980
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 980
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 980) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 980) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 980) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 980) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 980) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 980) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 980) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 980) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 980) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
980
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 980
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 980] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 980) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 980] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 980) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
1029
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1029
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1029) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1029) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1029) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1029) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 1029) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 1029) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 1029) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 1029) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1029) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
1029
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1029
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 1029] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1029) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 1029] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1029) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
1078
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1078
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1078) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1078) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1078) // 63 * 49
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 1078) // 63 * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 1078) // 63 * 49 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 1078) // 63 * 49 + threadIdx_x + rx_outer_outer - 1
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 1078) // 63 * 49 + threadIdx_x + rx_outer_outer - 1]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1078) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
1078
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1078
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
rx_outer_outer = T.int32()
threadIdx_x = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 1078] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1078) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 1078] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1078) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
1127
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1127
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1127) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1127) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1127) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1127) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 1127) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 1127) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 1127) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 1127) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1127) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
1127
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1127
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 1127] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1127) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 1127] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1127) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
1176
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1176
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1176) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1176) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1176) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1176) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 1176) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 1176) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 1176) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 1176) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1176) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
1176
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1176
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 1176] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1176) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 1176] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1176) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
1225
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1225
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1225) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1225) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1225) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1225) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 1225) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 1225) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 1225) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 1225) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1225) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
1225
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1225
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 1225] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1225) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 1225] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1225) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
42
<class 'tvm.tir.expr.IntImm'>
threadIdx_x < 42
<class 'tvm.tir.expr.LT'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
1274
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1274
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1274) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1274) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1274) // 63 * 49
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 1274) // 63 * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 1274) // 63 * 49 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 1274) // 63 * 49 + threadIdx_x + rx_outer_outer + 6
<class 'tvm.tir.expr.Add'>
data[rc_outer_outer * 3136 + (threadIdx_x + 1274) // 63 * 49 + threadIdx_x + rx_outer_outer + 6]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1274) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
1274
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1274
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 1274] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1274) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 1274] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1274) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
7
<class 'tvm.tir.expr.IntImm'>
7 <= threadIdx_x
<class 'tvm.tir.expr.LE'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
1021
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1021
<class 'tvm.tir.expr.Add'>
data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1021]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1021], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
1323
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1323
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 1323] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1021], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 1323] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1021], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
1372
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1372
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1372) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1372) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1372) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1372) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 1372) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 1372) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 1372) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 1372) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1372) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
1372
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1372
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 1372] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1372) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 1372] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1372) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
1421
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1421
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1421) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1421) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1421) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1421) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 1421) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 1421) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 1421) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 1421) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1421) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
1421
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1421
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 1421] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1421) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 1421] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1421) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
1470
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1470
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1470) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1470) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1470) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1470) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 1470) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 1470) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 1470) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 1470) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1470) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
1470
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1470
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 1470] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1470) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 1470] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1470) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
1519
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1519
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1519) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1519) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1519) // 63 * 49
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 1519) // 63 * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 1519) // 63 * 49 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 1519) // 63 * 49 + threadIdx_x + rx_outer_outer - 1
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 1519) // 63 * 49 + threadIdx_x + rx_outer_outer - 1]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1519) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
1519
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1519
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
rx_outer_outer = T.int32()
threadIdx_x = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 1519] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1519) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 1519] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1519) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
1568
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1568
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1568) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1568) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1568) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1568) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 1568) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 1568) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 1568) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 1568) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1568) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
1568
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1568
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 1568] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1568) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 1568] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1568) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
1617
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1617
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1617) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1617) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1617) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1617) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 1617) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 1617) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 1617) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 1617) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1617) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
1617
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1617
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 1617] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1617) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 1617] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1617) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
1666
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1666
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1666) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1666) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1666) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1666) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 1666) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 1666) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 1666) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 1666) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1666) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
1666
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1666
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 1666] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1666) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 1666] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1666) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
42
<class 'tvm.tir.expr.IntImm'>
threadIdx_x < 42
<class 'tvm.tir.expr.LT'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
1715
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1715
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1715) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1715) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1715) // 63 * 49
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 1715) // 63 * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 1715) // 63 * 49 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 1715) // 63 * 49 + threadIdx_x + rx_outer_outer + 6
<class 'tvm.tir.expr.Add'>
data[rc_outer_outer * 3136 + (threadIdx_x + 1715) // 63 * 49 + threadIdx_x + rx_outer_outer + 6]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1715) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
1715
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1715
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 1715] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1715) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 1715] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1715) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
7
<class 'tvm.tir.expr.IntImm'>
7 <= threadIdx_x
<class 'tvm.tir.expr.LE'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
1364
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1364
<class 'tvm.tir.expr.Add'>
data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1364]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1364], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
1764
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1764
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 1764] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1364], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 1764] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1364], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
1813
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1813
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1813) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1813) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1813) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1813) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 1813) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 1813) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 1813) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 1813) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1813) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
1813
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1813
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 1813] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1813) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 1813] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1813) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
1862
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1862
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1862) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1862) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1862) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1862) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 1862) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 1862) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 1862) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 1862) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1862) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
1862
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1862
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 1862] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1862) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 1862] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1862) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
1911
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1911
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1911) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1911) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1911) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1911) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 1911) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 1911) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 1911) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 1911) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1911) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
1911
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1911
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 1911] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1911) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 1911] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1911) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
1960
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1960
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1960) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1960) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 1960) // 63 * 49
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 1960) // 63 * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 1960) // 63 * 49 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 1960) // 63 * 49 + threadIdx_x + rx_outer_outer - 1
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 1960) // 63 * 49 + threadIdx_x + rx_outer_outer - 1]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1960) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
1960
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1960
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
rx_outer_outer = T.int32()
threadIdx_x = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 1960] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1960) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 1960] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1960) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
2009
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2009
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2009) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2009) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2009) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2009) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 2009) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 2009) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 2009) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 2009) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2009) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
2009
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2009
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 2009] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2009) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 2009] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2009) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
2058
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2058
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2058) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2058) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2058) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2058) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 2058) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 2058) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 2058) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 2058) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2058) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
2058
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2058
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 2058] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2058) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 2058] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2058) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
2107
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2107
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2107) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2107) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2107) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2107) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 2107) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 2107) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 2107) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 2107) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2107) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
2107
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2107
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 2107] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2107) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 2107] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2107) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
42
<class 'tvm.tir.expr.IntImm'>
threadIdx_x < 42
<class 'tvm.tir.expr.LT'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
2156
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2156
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2156) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2156) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2156) // 63 * 49
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 2156) // 63 * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 2156) // 63 * 49 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 2156) // 63 * 49 + threadIdx_x + rx_outer_outer + 6
<class 'tvm.tir.expr.Add'>
data[rc_outer_outer * 3136 + (threadIdx_x + 2156) // 63 * 49 + threadIdx_x + rx_outer_outer + 6]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2156) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
2156
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2156
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 2156] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2156) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 2156] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2156) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
7
<class 'tvm.tir.expr.IntImm'>
7 <= threadIdx_x
<class 'tvm.tir.expr.LE'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
1707
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1707
<class 'tvm.tir.expr.Add'>
data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1707]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1707], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
2205
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2205
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 2205] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1707], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 2205] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1707], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
2254
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2254
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2254) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2254) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2254) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2254) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 2254) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 2254) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 2254) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 2254) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2254) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
2254
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2254
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 2254] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2254) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 2254] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2254) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
2303
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2303
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2303) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2303) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2303) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2303) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 2303) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 2303) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 2303) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 2303) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2303) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
2303
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2303
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 2303] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2303) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 2303] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2303) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
2352
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2352
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2352) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2352) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2352) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2352) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 2352) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 2352) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 2352) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 2352) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2352) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
2352
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2352
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 2352] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2352) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 2352] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2352) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
2401
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2401
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2401) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2401) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2401) // 63 * 49
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 2401) // 63 * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 2401) // 63 * 49 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 2401) // 63 * 49 + threadIdx_x + rx_outer_outer - 1
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 2401) // 63 * 49 + threadIdx_x + rx_outer_outer - 1]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2401) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
2401
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2401
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
rx_outer_outer = T.int32()
threadIdx_x = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 2401] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2401) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 2401] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2401) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
2450
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2450
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2450) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2450) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2450) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2450) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 2450) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 2450) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 2450) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 2450) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2450) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
2450
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2450
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 2450] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2450) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 2450] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2450) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
2499
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2499
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2499) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2499) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2499) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2499) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 2499) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 2499) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 2499) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 2499) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2499) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
2499
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2499
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 2499] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2499) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 2499] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2499) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
2548
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2548
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2548) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2548) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2548) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2548) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 2548) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 2548) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 2548) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 2548) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2548) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
2548
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2548
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 2548] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2548) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 2548] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2548) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
42
<class 'tvm.tir.expr.IntImm'>
threadIdx_x < 42
<class 'tvm.tir.expr.LT'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
2597
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2597
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2597) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2597) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2597) // 63 * 49
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 2597) // 63 * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 2597) // 63 * 49 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 2597) // 63 * 49 + threadIdx_x + rx_outer_outer + 6
<class 'tvm.tir.expr.Add'>
data[rc_outer_outer * 3136 + (threadIdx_x + 2597) // 63 * 49 + threadIdx_x + rx_outer_outer + 6]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2597) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
2597
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2597
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 2597] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2597) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 2597] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2597) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
7
<class 'tvm.tir.expr.IntImm'>
7 <= threadIdx_x
<class 'tvm.tir.expr.LE'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
2050
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2050
<class 'tvm.tir.expr.Add'>
data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2050]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2050], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
2646
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2646
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 2646] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2050], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 2646] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2050], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
2695
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2695
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2695) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2695) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2695) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2695) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 2695) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 2695) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 2695) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 2695) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2695) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
2695
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2695
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 2695] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2695) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 2695] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2695) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
2744
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2744
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2744) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2744) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2744) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2744) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 2744) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 2744) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 2744) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 2744) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2744) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
2744
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2744
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 2744] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2744) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 2744] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2744) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
2793
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2793
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2793) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2793) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2793) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2793) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 2793) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 2793) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 2793) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 2793) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2793) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
2793
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2793
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 2793] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2793) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 2793] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2793) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
2842
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2842
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2842) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2842) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2842) // 63 * 49
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 2842) // 63 * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 2842) // 63 * 49 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 2842) // 63 * 49 + threadIdx_x + rx_outer_outer - 1
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 2842) // 63 * 49 + threadIdx_x + rx_outer_outer - 1]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2842) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
2842
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2842
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
rx_outer_outer = T.int32()
threadIdx_x = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 2842] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2842) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 2842] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2842) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
2891
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2891
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2891) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2891) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2891) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2891) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 2891) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 2891) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 2891) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 2891) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2891) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
2891
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2891
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 2891] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2891) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 2891] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2891) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
2940
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2940
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2940) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2940) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2940) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2940) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 2940) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 2940) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 2940) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 2940) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2940) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
2940
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2940
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 2940] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2940) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 2940] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2940) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
2989
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2989
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2989) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 2989) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2989) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 2989) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 2989) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 2989) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 2989) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 2989) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2989) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
2989
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 2989
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 2989] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2989) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 2989] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2989) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
42
<class 'tvm.tir.expr.IntImm'>
threadIdx_x < 42
<class 'tvm.tir.expr.LT'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
3038
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3038
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3038) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3038) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3038) // 63 * 49
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 3038) // 63 * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 3038) // 63 * 49 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 3038) // 63 * 49 + threadIdx_x + rx_outer_outer + 6
<class 'tvm.tir.expr.Add'>
data[rc_outer_outer * 3136 + (threadIdx_x + 3038) // 63 * 49 + threadIdx_x + rx_outer_outer + 6]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3038) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
3038
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3038
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 3038] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3038) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 3038] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3038) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
7
<class 'tvm.tir.expr.IntImm'>
7 <= threadIdx_x
<class 'tvm.tir.expr.LE'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
2393
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2393
<class 'tvm.tir.expr.Add'>
data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2393]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2393], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
3087
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3087
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 3087] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2393], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 3087] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2393], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
3136
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3136
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3136) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3136) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3136) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3136) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 3136) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 3136) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 3136) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 3136) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3136) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
3136
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3136
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 3136] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3136) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 3136] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3136) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
3185
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3185
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3185) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3185) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3185) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3185) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 3185) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 3185) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 3185) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 3185) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3185) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
3185
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3185
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 3185] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3185) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 3185] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3185) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
3234
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3234
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3234) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3234) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3234) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3234) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 3234) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 3234) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 3234) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 3234) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3234) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
3234
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3234
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 3234] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3234) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 3234] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3234) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
3283
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3283
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3283) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3283) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3283) // 63 * 49
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 3283) // 63 * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 3283) // 63 * 49 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 3283) // 63 * 49 + threadIdx_x + rx_outer_outer - 1
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 3283) // 63 * 49 + threadIdx_x + rx_outer_outer - 1]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3283) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
3283
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3283
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
rx_outer_outer = T.int32()
threadIdx_x = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 3283] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3283) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 3283] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3283) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
3332
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3332
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3332) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3332) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3332) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3332) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 3332) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 3332) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 3332) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 3332) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3332) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
3332
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3332
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 3332] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3332) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 3332] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3332) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
3381
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3381
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3381) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3381) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3381) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3381) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 3381) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 3381) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 3381) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 3381) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3381) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
3381
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3381
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 3381] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3381) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 3381] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3381) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
3430
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3430
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3430) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3430) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3430) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3430) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 3430) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 3430) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 3430) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 3430) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3430) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
3430
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3430
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 3430] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3430) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 3430] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3430) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
42
<class 'tvm.tir.expr.IntImm'>
threadIdx_x < 42
<class 'tvm.tir.expr.LT'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
3479
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3479
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3479) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3479) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3479) // 63 * 49
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 3479) // 63 * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 3479) // 63 * 49 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 3479) // 63 * 49 + threadIdx_x + rx_outer_outer + 6
<class 'tvm.tir.expr.Add'>
data[rc_outer_outer * 3136 + (threadIdx_x + 3479) // 63 * 49 + threadIdx_x + rx_outer_outer + 6]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3479) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
3479
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3479
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 3479] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3479) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 3479] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3479) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
7
<class 'tvm.tir.expr.IntImm'>
7 <= threadIdx_x
<class 'tvm.tir.expr.LE'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
2736
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2736
<class 'tvm.tir.expr.Add'>
data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2736]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2736], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
3528
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3528
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 3528] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2736], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 3528] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2736], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
3577
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3577
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3577) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3577) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3577) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 7
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 7) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3577) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 3577) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 3577) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 3577) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 3577) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3577) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
3577
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3577
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 3577] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3577) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 3577] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3577) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
3626
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3626
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3626) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3626) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3626) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
5
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 5
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 5) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3626) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 3626) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 3626) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 3626) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 3626) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3626) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
3626
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3626
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 3626] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3626) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 3626] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3626) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
3675
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3675
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3675) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3675) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3675) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 3
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 3) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3675) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 3675) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 3675) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 3675) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 3675) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3675) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
3675
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3675
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 3675] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3675) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 3675] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3675) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
3724
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3724
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3724) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3724) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3724) // 63 * 49
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 3724) // 63 * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 3724) // 63 * 49 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 3724) // 63 * 49 + threadIdx_x + rx_outer_outer - 1
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 3724) // 63 * 49 + threadIdx_x + rx_outer_outer - 1]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3724) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
3724
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3724
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
rx_outer_outer = T.int32()
threadIdx_x = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 3724] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3724) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 3724] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3724) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
3773
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3773
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3773) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3773) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3773) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
8
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 8
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 8) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3773) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 3773) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 3773) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 3773) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 3773) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3773) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
3773
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3773
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 3773] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3773) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 3773] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3773) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
3822
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3822
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3822) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3822) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3822) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
6
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 6
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 6) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3822) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 3822) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 3822) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 3822) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 3822) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3822) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
3822
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3822
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 3822] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3822) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 3822] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3822) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
1 <= (threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.LE'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
8
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8
<class 'tvm.tir.expr.And'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
3871
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3871
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3871) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3871) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3871) // 63 * 49
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7
<class 'tvm.tir.expr.FloorDiv'>
4
<class 'tvm.tir.expr.IntImm'>
threadIdx_x // 7 + 4
<class 'tvm.tir.expr.Add'>
9
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9
<class 'tvm.tir.expr.FloorMod'>
7
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x // 7 + 4) % 9 * 7
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3871) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 3871) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rc_outer_outer * 3136 + (threadIdx_x + 3871) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 3871) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8
<class 'tvm.tir.expr.Sub'>
data[rc_outer_outer * 3136 + (threadIdx_x + 3871) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3871) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
3871
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3871
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 3871] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3871) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 3871] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3871) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
42
<class 'tvm.tir.expr.IntImm'>
threadIdx_x < 42
<class 'tvm.tir.expr.LT'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
3920
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3920
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3920) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 3920) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 3920) // 63 * 49
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 3920) // 63 * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 3920) // 63 * 49 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 3920) // 63 * 49 + threadIdx_x + rx_outer_outer + 6
<class 'tvm.tir.expr.Add'>
data[rc_outer_outer * 3136 + (threadIdx_x + 3920) // 63 * 49 + threadIdx_x + rx_outer_outer + 6]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3920) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
3920
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3920
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 3920] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3920) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 3920] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3920) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
7
<class 'tvm.tir.expr.IntImm'>
7 <= threadIdx_x
<class 'tvm.tir.expr.LE'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + threadIdx_x
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer
<class 'tvm.tir.expr.Add'>
3079
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 3079
<class 'tvm.tir.expr.Add'>
data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 3079]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 3079], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
3969
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 3969
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 3969] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 3079], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 3969] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 3079], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
14
<class 'tvm.tir.expr.IntImm'>
threadIdx_x < 14
<class 'tvm.tir.expr.LT'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x < 7
<class 'tvm.tir.expr.LT'>
1
<class 'tvm.tir.expr.IntImm'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.LE'>
threadIdx_x < 7 and 1 <= rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.And'>
7
<class 'tvm.tir.expr.IntImm'>
threadIdx_x % 7
<class 'tvm.tir.expr.FloorMod'>
rx_outer_outer + threadIdx_x % 7
<class 'tvm.tir.expr.Add'>
8
<class 'tvm.tir.expr.IntImm'>
rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.LT'>
threadIdx_x < 7 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8
<class 'tvm.tir.expr.And'>
3136
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136
<class 'tvm.tir.expr.Mul'>
4018
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 4018
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 4018) // 63
<class 'tvm.tir.expr.FloorDiv'>
49
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 4018) // 63 * 49
<class 'tvm.tir.expr.Mul'>
rc_outer_outer * 3136 + (threadIdx_x + 4018) // 63 * 49
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 4018) // 63 * 49 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
rc_outer_outer * 3136 + (threadIdx_x + 4018) // 63 * 49 + rx_outer_outer + threadIdx_x
<class 'tvm.tir.expr.Add'>
41
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 3136 + (threadIdx_x + 4018) // 63 * 49 + rx_outer_outer + threadIdx_x + 41
<class 'tvm.tir.expr.Add'>
data[rc_outer_outer * 3136 + (threadIdx_x + 4018) // 63 * 49 + rx_outer_outer + threadIdx_x + 41]
<class 'tvm.tir.expr.BufferLoad'>
T.if_then_else(threadIdx_x < 7 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 4018) // 63 * 49 + rx_outer_outer + threadIdx_x + 41], T.float32(0.0))
<class 'tvm.tir.expr.Call'>
4018
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 4018
<class 'tvm.tir.expr.Add'>
pad_temp_shared = T.Buffer((4032,), scope="shared")
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
pad_temp_shared[threadIdx_x + 4018] = T.if_then_else(threadIdx_x < 7 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 4018) // 63 * 49 + rx_outer_outer + threadIdx_x + 41], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if threadIdx_x < 14:
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    rx_outer_outer = T.int32()
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    pad_temp_shared[threadIdx_x + 4018] = T.if_then_else(threadIdx_x < 7 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 4018) // 63 * 49 + rx_outer_outer + threadIdx_x + 41], T.float32(0.0))
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if threadIdx_x < 14:
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        rx_outer_outer = T.int32()
        data = T.Buffer((25088,))
        rc_outer_outer = T.int32()
        pad_temp_shared[threadIdx_x + 4018] = T.if_then_else(threadIdx_x < 7 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 4018) // 63 * 49 + rx_outer_outer + threadIdx_x + 41], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
49
<class 'tvm.tir.expr.IntImm'>
blockIdx_x
<class 'tvm.tir.expr.Var'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
threadIdx_x
<class 'tvm.tir.expr.Var'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
rc_outer_outer = T.int32()
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
147
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 147
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 147]
<class 'tvm.tir.expr.BufferLoad'>
49
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 49
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
rc_outer_outer = T.int32()
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 49] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 147]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 49] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 147]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
294
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 294
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 294]
<class 'tvm.tir.expr.BufferLoad'>
98
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 98
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
rc_outer_outer = T.int32()
threadIdx_x = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 98] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 294]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 98] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 294]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
147
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 147
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 147) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 147) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 147) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 147) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
147
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 147
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 147) % 192
<class 'tvm.tir.expr.FloorMod'>
3
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 147) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 147) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 147) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 147) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 147) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 147) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 147) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
147
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 147
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 147] = kernel[blockIdx_x * 36864 + (threadIdx_x + 147) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 147) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 147] = kernel[blockIdx_x * 36864 + (threadIdx_x + 147) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 147) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
196
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 196
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 196) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 196) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 196) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 196) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 196) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 196) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
12
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + (threadIdx_x + 196) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 12
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 196) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 12]
<class 'tvm.tir.expr.BufferLoad'>
196
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 196
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 196] = kernel[blockIdx_x * 36864 + (threadIdx_x + 196) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 12]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 196] = kernel[blockIdx_x * 36864 + (threadIdx_x + 196) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 12]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
245
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 245
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 245) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 245) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 245) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 245) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 245) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 245) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
159
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + (threadIdx_x + 245) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 159
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 245) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 159]
<class 'tvm.tir.expr.BufferLoad'>
245
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 245
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 245] = kernel[blockIdx_x * 36864 + (threadIdx_x + 245) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 159]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 245] = kernel[blockIdx_x * 36864 + (threadIdx_x + 245) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 159]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
294
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 294
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 294) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 294) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 294) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 294) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 294) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 294) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
306
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + (threadIdx_x + 294) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 306
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 294) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 306]
<class 'tvm.tir.expr.BufferLoad'>
294
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 294
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 294] = kernel[blockIdx_x * 36864 + (threadIdx_x + 294) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 306]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 294] = kernel[blockIdx_x * 36864 + (threadIdx_x + 294) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 306]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
343
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 343
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 343) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 343) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 343) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 343) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
151
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 151
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 151) % 192
<class 'tvm.tir.expr.FloorMod'>
3
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 151) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 343) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 151) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 343) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 151) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 343) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 151) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
343
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 343
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 343] = kernel[blockIdx_x * 36864 + (threadIdx_x + 343) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 151) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 343] = kernel[blockIdx_x * 36864 + (threadIdx_x + 343) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 151) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
392
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 392
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 392) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 392) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 392) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 392) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 392) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 392) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
24
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + (threadIdx_x + 392) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 24
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 392) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 24]
<class 'tvm.tir.expr.BufferLoad'>
392
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 392
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 392] = kernel[blockIdx_x * 36864 + (threadIdx_x + 392) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 24]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 392] = kernel[blockIdx_x * 36864 + (threadIdx_x + 392) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 24]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
441
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 441
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 441) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 441) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 441) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 441) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 441) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 441) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
171
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + (threadIdx_x + 441) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 171
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 441) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 171]
<class 'tvm.tir.expr.BufferLoad'>
441
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 441
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 441] = kernel[blockIdx_x * 36864 + (threadIdx_x + 441) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 171]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 441] = kernel[blockIdx_x * 36864 + (threadIdx_x + 441) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 171]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
490
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 490
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 490) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 490) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 490) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 490) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 490) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 490) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
318
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + (threadIdx_x + 490) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 318
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 490) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 318]
<class 'tvm.tir.expr.BufferLoad'>
490
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 490
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 490] = kernel[blockIdx_x * 36864 + (threadIdx_x + 490) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 318]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 490] = kernel[blockIdx_x * 36864 + (threadIdx_x + 490) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 318]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
539
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 539
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 539) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 539) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 539) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 539) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
155
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 155
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 155) % 192
<class 'tvm.tir.expr.FloorMod'>
3
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 155) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 539) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 155) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 539) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 155) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 539) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 155) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
539
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 539
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 539] = kernel[blockIdx_x * 36864 + (threadIdx_x + 539) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 155) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 539] = kernel[blockIdx_x * 36864 + (threadIdx_x + 539) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 155) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
588
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 588
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 588) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 588) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 588) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 588) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 588) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 588) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
36
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + (threadIdx_x + 588) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 36
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 588) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 36]
<class 'tvm.tir.expr.BufferLoad'>
588
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 588
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 588] = kernel[blockIdx_x * 36864 + (threadIdx_x + 588) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 36]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 588] = kernel[blockIdx_x * 36864 + (threadIdx_x + 588) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 36]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
637
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 637
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 637) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 637) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 637) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 637) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 637) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 637) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
183
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + (threadIdx_x + 637) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 183
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 637) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 183]
<class 'tvm.tir.expr.BufferLoad'>
637
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 637
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 637] = kernel[blockIdx_x * 36864 + (threadIdx_x + 637) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 183]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 637] = kernel[blockIdx_x * 36864 + (threadIdx_x + 637) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 183]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
686
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 686
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 686) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 686) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 686) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 686) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 686) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 686) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
330
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + (threadIdx_x + 686) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 330
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 686) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 330]
<class 'tvm.tir.expr.BufferLoad'>
686
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 686
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 686] = kernel[blockIdx_x * 36864 + (threadIdx_x + 686) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 330]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 686] = kernel[blockIdx_x * 36864 + (threadIdx_x + 686) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 330]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
735
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 735
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 735) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 735) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 735) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 735) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
159
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 159
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 159) % 192
<class 'tvm.tir.expr.FloorMod'>
3
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 159) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 735) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 159) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 735) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 159) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 735) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 159) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
735
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 735
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 735] = kernel[blockIdx_x * 36864 + (threadIdx_x + 735) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 159) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 735] = kernel[blockIdx_x * 36864 + (threadIdx_x + 735) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 159) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
784
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 784
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 784) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 784) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 784) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 784) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 784) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 784) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
48
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + (threadIdx_x + 784) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 48
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 784) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 48]
<class 'tvm.tir.expr.BufferLoad'>
784
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 784
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 784] = kernel[blockIdx_x * 36864 + (threadIdx_x + 784) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 48]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 784] = kernel[blockIdx_x * 36864 + (threadIdx_x + 784) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 48]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
833
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 833
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 833) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 833) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 833) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 833) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 833) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 833) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
195
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + (threadIdx_x + 833) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 195
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 833) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 195]
<class 'tvm.tir.expr.BufferLoad'>
833
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 833
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 833] = kernel[blockIdx_x * 36864 + (threadIdx_x + 833) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 195]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 833] = kernel[blockIdx_x * 36864 + (threadIdx_x + 833) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 195]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
882
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 882
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 882) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 882) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 882) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 882) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 882) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 882) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
342
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + (threadIdx_x + 882) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 342
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 882) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 342]
<class 'tvm.tir.expr.BufferLoad'>
882
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 882
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 882] = kernel[blockIdx_x * 36864 + (threadIdx_x + 882) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 342]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 882] = kernel[blockIdx_x * 36864 + (threadIdx_x + 882) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 342]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
931
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 931
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 931) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 931) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 931) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 931) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
163
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 163
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 163) % 192
<class 'tvm.tir.expr.FloorMod'>
3
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 163) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 931) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 163) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 931) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 163) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 931) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 163) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
931
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 931
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 931] = kernel[blockIdx_x * 36864 + (threadIdx_x + 931) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 163) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 931] = kernel[blockIdx_x * 36864 + (threadIdx_x + 931) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 163) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
980
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 980
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 980) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 980) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 980) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 980) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 980) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 980) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
60
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + (threadIdx_x + 980) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 60
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 980) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 60]
<class 'tvm.tir.expr.BufferLoad'>
980
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 980
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 980] = kernel[blockIdx_x * 36864 + (threadIdx_x + 980) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 60]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 980] = kernel[blockIdx_x * 36864 + (threadIdx_x + 980) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 60]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
1029
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1029
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1029) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1029) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1029) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1029) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1029) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 1029) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
207
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + (threadIdx_x + 1029) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 207
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 1029) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 207]
<class 'tvm.tir.expr.BufferLoad'>
1029
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1029
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 1029] = kernel[blockIdx_x * 36864 + (threadIdx_x + 1029) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 207]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 1029] = kernel[blockIdx_x * 36864 + (threadIdx_x + 1029) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 207]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
1078
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1078
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1078) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1078) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1078) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1078) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1078) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 1078) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
354
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + (threadIdx_x + 1078) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 354
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 1078) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 354]
<class 'tvm.tir.expr.BufferLoad'>
1078
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1078
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 1078] = kernel[blockIdx_x * 36864 + (threadIdx_x + 1078) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 354]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 1078] = kernel[blockIdx_x * 36864 + (threadIdx_x + 1078) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 354]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
1127
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1127
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1127) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1127) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1127) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1127) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
167
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 167
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 167) % 192
<class 'tvm.tir.expr.FloorMod'>
3
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 167) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1127) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 167) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 1127) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 167) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 1127) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 167) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
1127
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1127
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 1127] = kernel[blockIdx_x * 36864 + (threadIdx_x + 1127) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 167) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 1127] = kernel[blockIdx_x * 36864 + (threadIdx_x + 1127) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 167) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
1176
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1176
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1176) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1176) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1176) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1176) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1176) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 1176) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
72
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + (threadIdx_x + 1176) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 72
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 1176) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 72]
<class 'tvm.tir.expr.BufferLoad'>
1176
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1176
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 1176] = kernel[blockIdx_x * 36864 + (threadIdx_x + 1176) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 72]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 1176] = kernel[blockIdx_x * 36864 + (threadIdx_x + 1176) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 72]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
1225
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1225
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1225) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1225) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1225) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1225) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1225) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 1225) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
219
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + (threadIdx_x + 1225) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 219
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 1225) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 219]
<class 'tvm.tir.expr.BufferLoad'>
1225
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1225
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 1225] = kernel[blockIdx_x * 36864 + (threadIdx_x + 1225) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 219]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 1225] = kernel[blockIdx_x * 36864 + (threadIdx_x + 1225) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 219]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
1274
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1274
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1274) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1274) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1274) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1274) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1274) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 1274) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
366
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + (threadIdx_x + 1274) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 366
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 1274) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 366]
<class 'tvm.tir.expr.BufferLoad'>
1274
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1274
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 1274] = kernel[blockIdx_x * 36864 + (threadIdx_x + 1274) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 366]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 1274] = kernel[blockIdx_x * 36864 + (threadIdx_x + 1274) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 366]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
1323
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1323
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1323) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1323) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1323) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1323) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
171
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 171
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 171) % 192
<class 'tvm.tir.expr.FloorMod'>
3
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 171) % 192 * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1323) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 171) % 192 * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 1323) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 171) % 192 * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 1323) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 171) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.expr.BufferLoad'>
1323
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1323
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 1323] = kernel[blockIdx_x * 36864 + (threadIdx_x + 1323) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 171) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 1323] = kernel[blockIdx_x * 36864 + (threadIdx_x + 1323) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x + 171) % 192 * 3 + rx_outer_outer]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
1372
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1372
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1372) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1372) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1372) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1372) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1372) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 1372) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
84
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + (threadIdx_x + 1372) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 84
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 1372) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 84]
<class 'tvm.tir.expr.BufferLoad'>
1372
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1372
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 1372] = kernel[blockIdx_x * 36864 + (threadIdx_x + 1372) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 84]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 1372] = kernel[blockIdx_x * 36864 + (threadIdx_x + 1372) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 84]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
1421
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1421
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1421) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1421) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1421) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1421) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1421) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 1421) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
231
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + (threadIdx_x + 1421) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 231
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 1421) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 231]
<class 'tvm.tir.expr.BufferLoad'>
1421
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1421
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 1421] = kernel[blockIdx_x * 36864 + (threadIdx_x + 1421) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 231]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 1421] = kernel[blockIdx_x * 36864 + (threadIdx_x + 1421) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 231]
<class 'tvm.tir.stmt.AttrStmt'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
1470
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1470
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1470) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1470) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1470) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1470) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1470) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 1470) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
378
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + (threadIdx_x + 1470) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 378
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 1470) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 378]
<class 'tvm.tir.expr.BufferLoad'>
1470
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1470
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 1470] = kernel[blockIdx_x * 36864 + (threadIdx_x + 1470) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 378]
<class 'tvm.tir.stmt.BufferStore'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 1470] = kernel[blockIdx_x * 36864 + (threadIdx_x + 1470) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 378]
<class 'tvm.tir.stmt.AttrStmt'>
17
<class 'tvm.tir.expr.IntImm'>
threadIdx_x < 17
<class 'tvm.tir.expr.LT'>
36864
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864
<class 'tvm.tir.expr.Mul'>
1519
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1519
<class 'tvm.tir.expr.Add'>
192
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1519) // 192
<class 'tvm.tir.expr.FloorDiv'>
4608
<class 'tvm.tir.expr.IntImm'>
(threadIdx_x + 1519) // 192 * 4608
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1519) // 192 * 4608
<class 'tvm.tir.expr.Add'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_outer * 576
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1519) // 192 * 4608 + rc_outer_outer * 576
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
threadIdx_x * 3
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 36864 + (threadIdx_x + 1519) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3
<class 'tvm.tir.expr.Add'>
blockIdx_x * 36864 + (threadIdx_x + 1519) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer
<class 'tvm.tir.expr.Add'>
525
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 36864 + (threadIdx_x + 1519) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 525
<class 'tvm.tir.expr.Add'>
kernel[blockIdx_x * 36864 + (threadIdx_x + 1519) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 525]
<class 'tvm.tir.expr.BufferLoad'>
1519
<class 'tvm.tir.expr.IntImm'>
threadIdx_x + 1519
<class 'tvm.tir.expr.Add'>
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
rc_outer_outer = T.int32()
rx_outer_outer = T.int32()
kernel_shared[threadIdx_x + 1519] = kernel[blockIdx_x * 36864 + (threadIdx_x + 1519) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 525]
<class 'tvm.tir.stmt.BufferStore'>
threadIdx_x = T.int32()
if threadIdx_x < 17:
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    rc_outer_outer = T.int32()
    rx_outer_outer = T.int32()
    kernel_shared[threadIdx_x + 1519] = kernel[blockIdx_x * 36864 + (threadIdx_x + 1519) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 525]
<class 'tvm.tir.stmt.IfThenElse'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    if threadIdx_x < 17:
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        blockIdx_x = T.int32()
        rc_outer_outer = T.int32()
        rx_outer_outer = T.int32()
        kernel_shared[threadIdx_x + 1519] = kernel[blockIdx_x * 36864 + (threadIdx_x + 1519) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x * 3 + rx_outer_outer + 525]
<class 'tvm.tir.stmt.AttrStmt'>
0
<class 'tvm.tir.expr.IntImm'>
8
<class 'tvm.tir.expr.IntImm'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
rc_outer_inner
<class 'tvm.tir.expr.Var'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
threadIdx_x
<class 'tvm.tir.expr.Var'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
kernel_shared[rc_outer_inner * 24]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
192
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 192
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 192]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 192]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 192]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 192]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
384
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 384
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 384]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 384]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 384]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 384]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
576
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 576
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 576]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 576]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 576]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 576]
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 63
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
3
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 3
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 3]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 3]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 3]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 3]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 63
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
195
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 195
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 195]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 195]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 195]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 195]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 63
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
387
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 387
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 387]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 387]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 387]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 387]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 63
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
579
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 579
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 579]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 579]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 579]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 579]
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
126
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 126
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
6
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 6
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 6]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 6]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 6]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 6]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
126
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 126
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
198
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 198
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 198]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 198]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 198]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 198]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
126
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 126
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
390
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 390
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 390]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 390]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 390]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 390]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
126
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 126
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
582
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 582
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 582]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 582]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 582]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 582]
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
189
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 189
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
9
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 9
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 9]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 9]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 9]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 9]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
189
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 189
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
201
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 201
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 201]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 201]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 201]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 201]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
189
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 189
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
393
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 393
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 393]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 393]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 393]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 393]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
189
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 189
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
585
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 585
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 585]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 585]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 585]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 585]
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
252
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 252
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
12
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 12
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 12]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 12]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 12]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 12]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
252
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 252
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
204
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 204
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 204]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 204]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 204]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 204]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
252
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 252
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
396
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 396
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 396]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 396]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 396]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 396]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
252
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 252
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
588
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 588
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 588]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 588]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 588]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 588]
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
315
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 315
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
15
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 15
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 15]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 15]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 15]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 15]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
315
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 315
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
207
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 207
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 207]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 207]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 207]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 207]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
315
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 315
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
399
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 399
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 399]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 399]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 399]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 399]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
315
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 315
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
591
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 591
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 591]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 591]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 591]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 591]
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
378
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 378
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
18
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 18
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 18]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 18]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 18]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 18]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
378
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 378
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
210
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 210
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 210]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 210]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 210]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 210]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
378
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 378
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
402
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 402
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 402]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 402]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 402]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 402]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
378
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 378
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
594
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 594
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 594]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 594]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 594]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 594]
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
441
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 441
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
21
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 21
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 21]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 21]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 21]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 21]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
441
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 441
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
213
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 213
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 213]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 213]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 213]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 213]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
441
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 441
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
405
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 405
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 405]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 405]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 405]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 405]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
441
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 441
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
597
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 597
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 597]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 597]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 597]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 597]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
768
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 768
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 768]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 768]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 768]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 768]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
960
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 960
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 960]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 960]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 960]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 960]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1152
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1152
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1152]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 1152]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 1152]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 1152]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1344
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1344
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1344]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 1344]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 1344]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 1344]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 63
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
771
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 771
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 771]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 771]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 771]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 771]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 63
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
963
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 963
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 963]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 963]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 963]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 963]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 63
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1155
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1155
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1155]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 1155]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 1155]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 1155]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
63
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 63
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1347
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1347
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1347]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 1347]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 1347]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 1347]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
126
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 126
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
774
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 774
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 774]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 774]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 774]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 774]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
126
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 126
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
966
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 966
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 966]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 966]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 966]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 966]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
126
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 126
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1158
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1158
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1158]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 1158]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 1158]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 1158]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
126
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 126
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1350
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1350
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1350]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 1350]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 1350]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 1350]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
189
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 189
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
777
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 777
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 777]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 777]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 777]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 777]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
189
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 189
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
969
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 969
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 969]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 969]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 969]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 969]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
189
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 189
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1161
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1161
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1161]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 1161]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 1161]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 1161]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
189
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 189
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1353
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1353
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1353]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 1353]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 1353]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 1353]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
252
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 252
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
780
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 780
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 780]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 780]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 780]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 780]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
252
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 252
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
972
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 972
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 972]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 972]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 972]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 972]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
252
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 252
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1164
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1164
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1164]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 1164]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 1164]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 1164]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
252
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 252
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1356
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1356
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1356]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 1356]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 1356]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 1356]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
315
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 315
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
783
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 783
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 783]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 783]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 783]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 783]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
315
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 315
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
975
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 975
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 975]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 975]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 975]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 975]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
315
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 315
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1167
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1167
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1167]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 1167]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 1167]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 1167]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
315
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 315
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1359
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1359
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1359]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 1359]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 1359]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 1359]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
378
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 378
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
786
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 786
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 786]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 786]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 786]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 786]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
378
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 378
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
978
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 978
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 978]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 978]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 978]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 978]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
378
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 378
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1170
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1170
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1170]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 1170]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 1170]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 1170]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
378
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 378
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1362
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1362
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1362]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 1362]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 1362]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 1362]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
441
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 441
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
789
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 789
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 789]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 789]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 789]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 789]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
441
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 441
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
981
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 981
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 981]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 981]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 981]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 981]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
441
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 441
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1173
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1173
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1173]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 1173]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 1173]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 1173]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
441
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 441
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1365
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1365
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1365]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 1365]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 1365]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 1365]
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 7
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 1]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 1]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 1]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 7
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
193
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 193
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 193]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 193]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 193]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 193]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 7
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
385
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 385
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 385]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 385]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 385]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 385]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 7
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
577
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 577
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 577]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 577]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 577]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 577]
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
70
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 70
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
4
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 4
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 4]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 4]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 4]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 4]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
70
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 70
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
196
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 196
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 196]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 196]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 196]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 196]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
70
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 70
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
388
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 388
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 388]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 388]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 388]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 388]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
70
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 70
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
580
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 580
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 580]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 580]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 580]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 580]
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
133
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 133
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
7
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 7
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 7]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 7]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 7]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 7]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
133
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 133
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
199
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 199
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 199]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 199]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 199]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 199]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
133
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 133
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
391
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 391
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 391]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 391]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 391]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 391]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
133
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 133
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
583
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 583
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 583]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 583]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 583]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 583]
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
196
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 196
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
10
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 10
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 10]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 10]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 10]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 10]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
196
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 196
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
202
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 202
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 202]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 202]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 202]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 202]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
196
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 196
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
394
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 394
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 394]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 394]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 394]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 394]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
196
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 196
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
586
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 586
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 586]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 586]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 586]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 586]
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
259
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 259
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
13
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 13
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 13]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 13]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 13]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 13]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
259
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 259
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
205
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 205
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 205]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 205]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 205]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 205]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
259
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 259
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
397
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 397
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 397]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 397]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 397]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 397]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
259
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 259
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
589
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 589
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 589]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 589]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 589]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 589]
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
322
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 322
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
16
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 16
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 16]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 16]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 16]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 16]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
322
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 322
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
208
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 208
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 208]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 208]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 208]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 208]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
322
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 322
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
400
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 400
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 400]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 400]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 400]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 400]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
322
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 322
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
592
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 592
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 592]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 592]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 592]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 592]
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
385
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 385
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
19
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 19
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 19]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 19]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 19]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 19]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
385
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 385
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
211
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 211
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 211]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 211]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 211]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 211]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
385
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 385
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
403
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 403
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 403]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 403]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 403]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 403]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
385
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 385
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
595
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 595
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 595]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 595]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 595]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 595]
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
448
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 448
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
22
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 22
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 22]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 22]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 22]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 22]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
448
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 448
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
214
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 214
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 214]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 214]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 214]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 214]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
448
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 448
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
406
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 406
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 406]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 406]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 406]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 406]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
448
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 448
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
598
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 598
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 598]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 598]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 598]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 598]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 7
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
769
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 769
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 769]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 769]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 769]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 769]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 7
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
961
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 961
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 961]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 961]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 961]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 961]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 7
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1153
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1153
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1153]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 1153]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 1153]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 1153]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 7
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1345
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1345
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1345]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 1345]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 1345]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 1345]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
70
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 70
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
772
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 772
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 772]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 772]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 772]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 772]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
70
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 70
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
964
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 964
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 964]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 964]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 964]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 964]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
70
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 70
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1156
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1156
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1156]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 1156]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 1156]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 1156]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
70
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 70
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1348
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1348
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1348]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 1348]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 1348]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 1348]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
133
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 133
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
775
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 775
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 775]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 775]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 775]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 775]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
133
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 133
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
967
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 967
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 967]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 967]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 967]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 967]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
133
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 133
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1159
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1159
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1159]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 1159]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 1159]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 1159]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
133
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 133
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1351
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1351
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1351]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 1351]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 1351]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 1351]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
196
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 196
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
778
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 778
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 778]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 778]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 778]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 778]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
196
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 196
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
970
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 970
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 970]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 970]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 970]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 970]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
196
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 196
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1162
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1162
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1162]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 1162]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 1162]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 1162]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
196
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 196
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1354
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1354
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1354]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 1354]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 1354]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 1354]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
259
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 259
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
781
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 781
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 781]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 781]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 781]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 781]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
259
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 259
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
973
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 973
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 973]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 973]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 973]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 973]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
259
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 259
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1165
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1165
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1165]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 1165]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 1165]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 1165]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
259
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 259
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1357
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1357
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1357]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 1357]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 1357]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 1357]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
322
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 322
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
784
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 784
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 784]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 784]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 784]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 784]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
322
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 322
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
976
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 976
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 976]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 976]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 976]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 976]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
322
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 322
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1168
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1168
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1168]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 1168]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 1168]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 1168]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
322
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 322
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1360
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1360
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1360]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 1360]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 1360]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 1360]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
385
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 385
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
787
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 787
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 787]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 787]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 787]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 787]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
385
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 385
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
979
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 979
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 979]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 979]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 979]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 979]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
385
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 385
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1171
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1171
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1171]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 1171]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 1171]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 1171]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
385
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 385
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1363
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1363
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1363]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 1363]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 1363]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 1363]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
448
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 448
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
790
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 790
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 790]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 790]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 790]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 790]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
448
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 448
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
982
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 982
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 982]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 982]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 982]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 982]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
448
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 448
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1174
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1174
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1174]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 1174]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 1174]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 1174]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
448
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 448
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1366
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1366
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1366]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 1366]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 1366]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 1366]
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
14
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 14
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
2
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 2
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 2]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 2]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 2]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 2]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
14
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 14
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
194
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 194
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 194]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 194]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 194]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 194]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
14
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 14
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
386
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 386
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 386]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 386]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 386]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 386]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
14
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 14
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
578
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 578
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 578]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 578]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 578]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 578]
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
77
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 77
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
5
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 5
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 5]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 5]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 5]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 5]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
77
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 77
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
197
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 197
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 197]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 197]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 197]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 197]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
77
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 77
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
389
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 389
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 389]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 389]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 389]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 389]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
77
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 77
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
581
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 581
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 581]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 581]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 581]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 581]
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
140
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 140
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
8
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 8
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 8]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 8]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 8]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 8]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
140
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 140
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
200
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 200
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 200]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 200]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 200]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 200]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
140
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 140
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
392
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 392
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 392]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 392]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 392]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 392]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
140
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 140
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
584
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 584
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 584]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 584]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 584]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 584]
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
203
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 203
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
11
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 11
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 11]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 11]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 11]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 11]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
203
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 203
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
203
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 203
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 203]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 203]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 203]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 203]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
203
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 203
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
395
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 395
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 395]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 395]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 395]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 395]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
203
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 203
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
587
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 587
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 587]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 587]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 587]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 587]
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
266
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 266
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
14
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 14
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 14]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 14]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 14]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 14]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
266
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 266
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
206
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 206
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 206]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 206]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 206]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 206]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
266
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 266
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
398
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 398
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 398]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 398]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 398]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 398]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
266
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 266
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
590
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 590
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 590]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 590]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 590]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 590]
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
329
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 329
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
17
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 17
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 17]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 17]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 17]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 17]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
329
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 329
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
209
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 209
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 209]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 209]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 209]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 209]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
329
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 329
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
401
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 401
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 401]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 401]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 401]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 401]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
329
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 329
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
593
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 593
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 593]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 593]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 593]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 593]
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
392
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 392
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
20
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 20
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 20]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 20]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 20]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 20]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
392
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 392
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
212
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 212
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 212]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 212]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 212]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 212]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
392
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 392
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
404
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 404
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 404]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 404]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 404]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 404]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
392
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 392
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
596
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 596
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 596]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 596]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 596]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 596]
<class 'tvm.tir.stmt.BufferStore'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[0]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
455
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 455
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
23
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 23
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 23]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 23]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 23]
<class 'tvm.tir.expr.Add'>
0
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 23]
<class 'tvm.tir.stmt.BufferStore'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[1]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
455
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 455
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
215
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 215
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 215]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 215]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 215]
<class 'tvm.tir.expr.Add'>
1
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 215]
<class 'tvm.tir.stmt.BufferStore'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[2]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
455
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 455
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
407
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 407
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 407]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 407]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 407]
<class 'tvm.tir.expr.Add'>
2
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 407]
<class 'tvm.tir.stmt.BufferStore'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[3]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
455
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 455
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
599
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 599
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 599]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 599]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 599]
<class 'tvm.tir.expr.Add'>
3
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 599]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
14
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 14
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
770
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 770
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 770]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 770]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 770]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 770]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
14
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 14
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
962
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 962
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 962]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 962]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 962]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 962]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
14
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 14
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1154
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1154
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1154]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 1154]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 1154]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 1154]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
14
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 14
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1346
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1346
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1346]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 1346]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 1346]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 1346]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
77
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 77
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
773
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 773
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 773]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 773]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 773]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 773]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
77
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 77
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
965
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 965
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 965]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 965]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 965]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 965]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
77
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 77
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1157
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1157
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1157]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 1157]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 1157]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 1157]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
77
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 77
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1349
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1349
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1349]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 1349]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 1349]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 1349]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
140
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 140
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
776
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 776
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 776]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 776]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 776]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 776]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
140
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 140
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
968
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 968
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 968]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 968]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 968]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 968]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
140
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 140
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1160
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1160
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1160]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 1160]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 1160]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 1160]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
140
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 140
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1352
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1352
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1352]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 1352]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 1352]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 1352]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
203
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 203
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
779
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 779
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 779]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 779]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 779]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 779]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
203
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 203
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
971
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 971
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 971]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 971]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 971]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 971]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
203
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 203
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1163
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1163
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1163]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 1163]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 1163]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 1163]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
203
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 203
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1355
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1355
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1355]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 1355]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 1355]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 1355]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
266
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 266
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
782
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 782
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 782]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 782]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 782]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 782]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
266
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 266
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
974
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 974
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 974]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 974]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 974]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 974]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
266
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 266
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1166
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1166
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1166]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 1166]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 1166]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 1166]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
266
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 266
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1358
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1358
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1358]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 1358]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 1358]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 1358]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
329
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 329
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
785
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 785
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 785]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 785]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 785]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 785]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
329
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 329
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
977
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 977
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 977]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 977]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 977]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 977]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
329
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 329
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1169
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1169
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1169]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 1169]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 1169]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 1169]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
329
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 329
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1361
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1361
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1361]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 1361]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 1361]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 1361]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
392
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 392
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
788
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 788
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 788]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 788]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 788]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 788]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
392
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 392
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
980
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 980
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 980]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 980]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 980]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 980]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
392
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 392
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1172
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1172
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1172]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 1172]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 1172]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 1172]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
392
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 392
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1364
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1364
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1364]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 1364]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 1364]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 1364]
<class 'tvm.tir.stmt.BufferStore'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[4]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
455
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 455
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
791
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 791
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 791]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 791]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 791]
<class 'tvm.tir.expr.Add'>
4
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 791]
<class 'tvm.tir.stmt.BufferStore'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[5]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
455
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 455
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
983
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 983
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 983]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 983]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 983]
<class 'tvm.tir.expr.Add'>
5
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 983]
<class 'tvm.tir.stmt.BufferStore'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[6]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
455
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 455
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1175
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1175
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1175]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 1175]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 1175]
<class 'tvm.tir.expr.Add'>
6
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 1175]
<class 'tvm.tir.stmt.BufferStore'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw[7]
<class 'tvm.tir.expr.BufferLoad'>
504
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504
<class 'tvm.tir.expr.Mul'>
rc_outer_inner * 504 + threadIdx_x
<class 'tvm.tir.expr.Add'>
455
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 504 + threadIdx_x + 455
<class 'tvm.tir.expr.Add'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455]
<class 'tvm.tir.expr.BufferLoad'>
24
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24
<class 'tvm.tir.expr.Mul'>
1367
<class 'tvm.tir.expr.IntImm'>
rc_outer_inner * 24 + 1367
<class 'tvm.tir.expr.Add'>
kernel_shared[rc_outer_inner * 24 + 1367]
<class 'tvm.tir.expr.BufferLoad'>
pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 1367]
<class 'tvm.tir.expr.Mul'>
conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 1367]
<class 'tvm.tir.expr.Add'>
7
<class 'tvm.tir.expr.IntImm'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 1367]
<class 'tvm.tir.stmt.BufferStore'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
pad_temp_shared = T.Buffer((4032,), scope="shared")
rc_outer_inner = T.int32()
threadIdx_x = T.int32()
kernel_shared = T.Buffer((1536,), scope="shared")
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 192]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 384]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 576]
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 3]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 195]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 387]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 579]
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 6]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 198]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 390]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 582]
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 9]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 201]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 393]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 585]
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 12]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 204]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 396]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 588]
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 15]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 207]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 399]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 591]
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 18]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 210]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 402]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 594]
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 21]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 213]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 405]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 597]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 768]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 960]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 1152]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 1344]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 771]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 963]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 1155]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 1347]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 774]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 966]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 1158]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 1350]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 777]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 969]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 1161]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 1353]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 780]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 972]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 1164]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 1356]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 783]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 975]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 1167]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 1359]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 786]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 978]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 1170]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 1362]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 789]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 981]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 1173]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 1365]
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 1]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 193]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 385]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 577]
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 4]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 196]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 388]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 580]
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 7]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 199]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 391]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 583]
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 10]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 202]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 394]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 586]
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 13]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 205]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 397]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 589]
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 16]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 208]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 400]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 592]
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 19]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 211]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 403]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 595]
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 22]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 214]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 406]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 598]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 769]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 961]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 1153]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 1345]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 772]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 964]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 1156]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 1348]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 775]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 967]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 1159]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 1351]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 778]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 970]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 1162]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 1354]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 781]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 973]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 1165]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 1357]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 784]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 976]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 1168]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 1360]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 787]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 979]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 1171]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 1363]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 790]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 982]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 1174]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 1366]
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 2]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 194]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 386]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 578]
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 5]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 197]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 389]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 581]
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 8]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 200]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 392]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 584]
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 11]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 203]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 395]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 587]
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 14]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 206]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 398]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 590]
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 17]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 209]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 401]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 593]
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 20]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 212]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 404]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 596]
conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 23]
conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 215]
conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 407]
conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 599]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 770]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 962]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 1154]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 1346]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 773]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 965]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 1157]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 1349]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 776]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 968]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 1160]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 1352]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 779]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 971]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 1163]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 1355]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 782]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 974]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 1166]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 1358]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 785]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 977]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 1169]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 1361]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 788]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 980]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 1172]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 1364]
conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 791]
conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 983]
conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 1175]
conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 1367]
<class 'tvm.tir.stmt.SeqStmt'>
for rc_outer_inner in range(8):
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    threadIdx_x = T.int32()
    kernel_shared = T.Buffer((1536,), scope="shared")
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 192]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 384]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 576]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 3]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 195]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 387]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 579]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 6]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 198]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 390]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 582]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 9]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 201]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 393]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 585]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 12]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 204]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 396]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 588]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 15]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 207]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 399]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 591]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 18]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 210]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 402]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 594]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 21]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 213]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 405]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 597]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 768]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 960]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 1152]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 1344]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 771]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 963]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 1155]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 1347]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 774]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 966]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 1158]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 1350]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 777]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 969]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 1161]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 1353]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 780]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 972]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 1164]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 1356]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 783]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 975]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 1167]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 1359]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 786]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 978]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 1170]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 1362]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 789]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 981]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 1173]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 1365]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 1]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 193]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 385]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 577]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 4]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 196]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 388]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 580]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 7]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 199]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 391]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 583]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 10]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 202]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 394]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 586]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 13]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 205]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 397]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 589]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 16]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 208]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 400]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 592]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 19]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 211]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 403]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 595]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 22]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 214]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 406]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 598]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 769]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 961]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 1153]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 1345]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 772]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 964]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 1156]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 1348]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 775]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 967]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 1159]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 1351]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 778]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 970]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 1162]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 1354]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 781]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 973]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 1165]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 1357]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 784]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 976]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 1168]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 1360]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 787]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 979]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 1171]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 1363]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 790]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 982]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 1174]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 1366]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 2]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 194]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 386]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 578]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 5]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 197]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 389]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 581]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 8]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 200]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 392]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 584]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 11]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 203]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 395]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 587]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 14]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 206]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 398]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 590]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 17]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 209]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 401]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 593]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 20]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 212]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 404]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 596]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 23]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 215]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 407]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 599]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 770]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 962]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 1154]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 1346]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 773]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 965]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 1157]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 1349]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 776]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 968]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 1160]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 1352]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 779]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 971]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 1163]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 1355]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 782]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 974]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 1166]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 1358]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 785]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 977]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 1169]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 1361]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 788]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 980]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 1172]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 1364]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 791]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 983]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 1175]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 1367]
<class 'tvm.tir.stmt.For'>
threadIdx_x = T.env_thread("threadIdx.x")
pad_temp_shared = T.Buffer((4032,), scope="shared")
rx_outer_outer = T.int32()
data = T.Buffer((25088,))
rc_outer_outer = T.int32()
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 49] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 49) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 98] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 98) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 147] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 147) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 196] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 196) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 245] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 245) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 294] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 294) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 343] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 343) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 392] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 392) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 441] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 335], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 490] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 490) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 539] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 539) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 588] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 588) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 637] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 637) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 686] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 686) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 735] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 735) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 784] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 784) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 833] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 833) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 882] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 678], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 931] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 931) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 980] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 980) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 1029] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1029) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 1078] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1078) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 1127] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1127) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 1176] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1176) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 1225] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1225) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 1274] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1274) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 1323] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1021], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 1372] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1372) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 1421] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1421) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 1470] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1470) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 1519] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1519) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 1568] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1568) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 1617] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1617) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 1666] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1666) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 1715] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1715) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 1764] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1364], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 1813] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1813) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 1862] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1862) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 1911] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1911) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 1960] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1960) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 2009] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2009) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 2058] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2058) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 2107] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2107) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 2156] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2156) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 2205] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1707], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 2254] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2254) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 2303] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2303) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 2352] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2352) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 2401] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2401) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 2450] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2450) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 2499] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2499) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 2548] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2548) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 2597] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2597) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 2646] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2050], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 2695] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2695) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 2744] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2744) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 2793] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2793) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 2842] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2842) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 2891] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2891) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 2940] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2940) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 2989] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2989) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 3038] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3038) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 3087] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2393], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 3136] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3136) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 3185] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3185) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 3234] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3234) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 3283] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3283) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 3332] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3332) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 3381] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3381) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 3430] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3430) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 3479] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3479) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 3528] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2736], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 3577] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3577) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 3626] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3626) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 3675] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3675) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 3724] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3724) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 3773] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3773) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 3822] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3822) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 3871] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3871) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 3920] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3920) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    pad_temp_shared[threadIdx_x + 3969] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 3079], T.float32(0.0))
with T.launch_thread(threadIdx_x, 49):
    if threadIdx_x < 14:
        pad_temp_shared[threadIdx_x + 4018] = T.if_then_else(threadIdx_x < 7 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 4018) // 63 * 49 + rx_outer_outer + threadIdx_x + 41], T.float32(0.0))
threadIdx_x_1 = T.env_thread("threadIdx.x")
kernel_shared = T.Buffer((1536,), scope="shared")
kernel = T.Buffer((2359296,))
blockIdx_x = T.int32()
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 49] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 147]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 98] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 294]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 147] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 147) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 147) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 196] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 196) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 12]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 245] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 245) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 159]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 294] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 294) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 306]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 343] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 343) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 151) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 392] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 392) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 24]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 441] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 441) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 171]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 490] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 490) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 318]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 539] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 539) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 155) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 588] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 588) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 36]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 637] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 637) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 183]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 686] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 686) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 330]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 735] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 735) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 159) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 784] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 784) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 48]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 833] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 833) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 195]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 882] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 882) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 342]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 931] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 931) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 163) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 980] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 980) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 60]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 1029] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1029) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 207]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 1078] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1078) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 354]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 1127] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1127) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 167) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 1176] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1176) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 72]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 1225] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1225) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 219]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 1274] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1274) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 366]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 1323] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1323) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 171) % 192 * 3 + rx_outer_outer]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 1372] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1372) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 84]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 1421] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1421) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 231]
with T.launch_thread(threadIdx_x_1, 49):
    kernel_shared[threadIdx_x_1 + 1470] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1470) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 378]
with T.launch_thread(threadIdx_x_1, 49):
    if threadIdx_x_1 < 17:
        kernel_shared[threadIdx_x_1 + 1519] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1519) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 525]
for rc_outer_inner in range(8):
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    threadIdx_x_2 = T.int32()
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 192]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 384]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 576]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 3]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 195]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 387]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 579]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 6]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 198]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 390]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 582]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 9]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 201]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 393]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 585]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 12]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 204]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 396]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 588]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 15]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 207]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 399]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 591]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 18]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 210]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 402]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 594]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 21]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 213]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 405]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 597]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 768]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 960]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 1152]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 1344]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 771]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 963]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 1155]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 1347]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 774]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 966]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 1158]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 1350]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 777]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 969]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 1161]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 1353]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 780]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 972]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 1164]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 1356]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 783]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 975]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 1167]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 1359]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 786]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 978]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 1170]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 1362]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 789]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 981]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 1173]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 1365]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 1]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 193]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 385]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 577]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 4]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 196]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 388]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 580]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 7]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 199]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 391]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 583]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 10]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 202]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 394]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 586]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 13]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 205]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 397]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 589]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 16]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 208]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 400]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 592]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 19]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 211]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 403]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 595]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 22]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 214]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 406]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 598]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 769]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 961]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 1153]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 1345]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 772]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 964]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 1156]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 1348]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 775]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 967]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 1159]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 1351]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 778]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 970]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 1162]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 1354]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 781]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 973]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 1165]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 1357]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 784]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 976]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 1168]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 1360]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 787]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 979]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 1171]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 1363]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 790]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 982]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 1174]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 1366]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 2]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 194]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 386]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 578]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 5]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 197]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 389]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 581]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 8]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 200]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 392]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 584]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 11]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 203]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 395]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 587]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 14]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 206]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 398]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 590]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 17]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 209]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 401]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 593]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 20]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 212]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 404]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 596]
    conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 23]
    conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 215]
    conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 407]
    conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 599]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 770]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 962]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 1154]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 1346]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 773]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 965]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 1157]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 1349]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 776]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 968]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 1160]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 1352]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 779]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 971]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 1163]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 1355]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 782]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 974]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 1166]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 1358]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 785]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 977]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 1169]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 1361]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 788]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 980]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 1172]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 1364]
    conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 791]
    conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 983]
    conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 1175]
    conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 1367]
<class 'tvm.tir.stmt.SeqStmt'>
for rx_outer_outer in range(3):
    threadIdx_x = T.env_thread("threadIdx.x")
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    data = T.Buffer((25088,))
    rc_outer_outer = T.int32()
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 49] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 49) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 98] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 98) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 147] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 147) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 196] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 196) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 245] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 245) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 294] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 294) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 343] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 343) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 392] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 392) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 441] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 335], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 490] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 490) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 539] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 539) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 588] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 588) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 637] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 637) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 686] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 686) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 735] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 735) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 784] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 784) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 833] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 833) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 882] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 678], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 931] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 931) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 980] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 980) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1029] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1029) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1078] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1078) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1127] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1127) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1176] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1176) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1225] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1225) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1274] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1274) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1323] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1021], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1372] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1372) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1421] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1421) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1470] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1470) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1519] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1519) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1568] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1568) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1617] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1617) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1666] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1666) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1715] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1715) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1764] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1364], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1813] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1813) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1862] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1862) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1911] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1911) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1960] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1960) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2009] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2009) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2058] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2058) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2107] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2107) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2156] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2156) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2205] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1707], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2254] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2254) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2303] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2303) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2352] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2352) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2401] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2401) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2450] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2450) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2499] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2499) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2548] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2548) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2597] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2597) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2646] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2050], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2695] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2695) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2744] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2744) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2793] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2793) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2842] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2842) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2891] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2891) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2940] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2940) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2989] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2989) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3038] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3038) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3087] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2393], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3136] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3136) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3185] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3185) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3234] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3234) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3283] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3283) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3332] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3332) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3381] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3381) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3430] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3430) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3479] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3479) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3528] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2736], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3577] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3577) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3626] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3626) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3675] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3675) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3724] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3724) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3773] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3773) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3822] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3822) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3871] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3871) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3920] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3920) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3969] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 3079], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if threadIdx_x < 14:
            pad_temp_shared[threadIdx_x + 4018] = T.if_then_else(threadIdx_x < 7 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 4018) // 63 * 49 + rx_outer_outer + threadIdx_x + 41], T.float32(0.0))
    threadIdx_x_1 = T.env_thread("threadIdx.x")
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 49] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 147]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 98] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 294]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 147] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 147) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 147) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 196] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 196) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 12]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 245] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 245) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 159]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 294] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 294) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 306]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 343] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 343) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 151) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 392] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 392) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 24]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 441] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 441) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 171]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 490] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 490) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 318]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 539] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 539) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 155) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 588] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 588) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 36]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 637] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 637) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 183]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 686] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 686) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 330]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 735] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 735) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 159) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 784] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 784) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 48]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 833] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 833) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 195]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 882] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 882) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 342]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 931] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 931) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 163) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 980] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 980) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 60]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1029] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1029) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 207]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1078] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1078) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 354]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1127] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1127) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 167) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1176] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1176) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 72]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1225] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1225) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 219]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1274] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1274) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 366]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1323] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1323) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 171) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1372] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1372) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 84]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1421] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1421) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 231]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1470] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1470) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 378]
    with T.launch_thread(threadIdx_x_1, 49):
        if threadIdx_x_1 < 17:
            kernel_shared[threadIdx_x_1 + 1519] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1519) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 525]
    for rc_outer_inner in range(8):
        conv2d_nchw = T.Buffer((8,), scope="local", align=32)
        threadIdx_x_2 = T.int32()
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 192]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 384]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 576]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 3]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 195]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 387]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 579]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 6]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 198]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 390]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 582]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 9]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 201]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 393]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 585]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 12]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 204]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 396]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 588]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 15]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 207]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 399]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 591]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 18]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 210]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 402]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 594]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 21]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 213]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 405]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 597]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 768]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 960]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 1152]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 1344]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 771]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 963]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 1155]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 1347]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 774]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 966]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 1158]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 1350]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 777]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 969]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 1161]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 1353]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 780]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 972]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 1164]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 1356]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 783]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 975]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 1167]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 1359]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 786]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 978]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 1170]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 1362]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 789]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 981]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 1173]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 1365]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 1]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 193]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 385]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 577]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 4]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 196]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 388]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 580]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 7]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 199]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 391]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 583]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 10]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 202]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 394]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 586]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 13]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 205]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 397]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 589]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 16]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 208]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 400]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 592]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 19]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 211]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 403]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 595]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 22]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 214]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 406]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 598]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 769]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 961]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 1153]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 1345]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 772]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 964]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 1156]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 1348]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 775]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 967]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 1159]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 1351]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 778]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 970]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 1162]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 1354]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 781]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 973]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 1165]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 1357]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 784]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 976]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 1168]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 1360]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 787]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 979]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 1171]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 1363]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 790]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 982]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 1174]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 1366]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 2]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 194]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 386]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 578]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 5]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 197]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 389]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 581]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 8]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 200]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 392]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 584]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 11]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 203]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 395]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 587]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 14]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 206]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 398]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 590]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 17]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 209]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 401]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 593]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 20]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 212]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 404]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 596]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 23]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 215]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 407]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 599]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 770]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 962]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 1154]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 1346]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 773]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 965]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 1157]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 1349]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 776]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 968]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 1160]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 1352]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 779]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 971]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 1163]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 1355]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 782]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 974]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 1166]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 1358]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 785]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 977]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 1169]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 1361]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 788]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 980]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 1172]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 1364]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 791]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 983]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 1175]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 1367]
<class 'tvm.tir.stmt.For'>
for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
    threadIdx_x = T.env_thread("threadIdx.x")
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    data = T.Buffer((25088,))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 49] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 49) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 98] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 98) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 147] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 147) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 196] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 196) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 245] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 245) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 294] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 294) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 343] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 343) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 392] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 392) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 441] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 335], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 490] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 490) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 539] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 539) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 588] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 588) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 637] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 637) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 686] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 686) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 735] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 735) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 784] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 784) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 833] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 833) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 882] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 678], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 931] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 931) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 980] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 980) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1029] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1029) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1078] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1078) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1127] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1127) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1176] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1176) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1225] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1225) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1274] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1274) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1323] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1021], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1372] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1372) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1421] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1421) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1470] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1470) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1519] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1519) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1568] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1568) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1617] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1617) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1666] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1666) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1715] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1715) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1764] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1364], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1813] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1813) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1862] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1862) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1911] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1911) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1960] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1960) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2009] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2009) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2058] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2058) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2107] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2107) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2156] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2156) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2205] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1707], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2254] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2254) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2303] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2303) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2352] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2352) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2401] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2401) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2450] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2450) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2499] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2499) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2548] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2548) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2597] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2597) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2646] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2050], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2695] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2695) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2744] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2744) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2793] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2793) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2842] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2842) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2891] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2891) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2940] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2940) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2989] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2989) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3038] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3038) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3087] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2393], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3136] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3136) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3185] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3185) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3234] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3234) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3283] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3283) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3332] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3332) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3381] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3381) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3430] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3430) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3479] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3479) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3528] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2736], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3577] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3577) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3626] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3626) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3675] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3675) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3724] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3724) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3773] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3773) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3822] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3822) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3871] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3871) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3920] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3920) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3969] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 3079], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if threadIdx_x < 14:
            pad_temp_shared[threadIdx_x + 4018] = T.if_then_else(threadIdx_x < 7 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 4018) // 63 * 49 + rx_outer_outer + threadIdx_x + 41], T.float32(0.0))
    threadIdx_x_1 = T.env_thread("threadIdx.x")
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    blockIdx_x = T.int32()
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 49] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 147]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 98] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 294]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 147] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 147) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 147) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 196] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 196) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 12]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 245] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 245) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 159]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 294] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 294) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 306]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 343] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 343) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 151) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 392] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 392) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 24]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 441] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 441) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 171]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 490] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 490) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 318]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 539] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 539) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 155) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 588] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 588) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 36]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 637] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 637) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 183]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 686] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 686) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 330]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 735] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 735) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 159) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 784] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 784) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 48]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 833] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 833) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 195]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 882] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 882) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 342]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 931] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 931) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 163) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 980] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 980) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 60]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1029] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1029) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 207]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1078] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1078) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 354]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1127] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1127) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 167) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1176] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1176) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 72]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1225] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1225) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 219]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1274] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1274) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 366]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1323] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1323) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 171) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1372] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1372) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 84]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1421] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1421) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 231]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1470] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1470) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 378]
    with T.launch_thread(threadIdx_x_1, 49):
        if threadIdx_x_1 < 17:
            kernel_shared[threadIdx_x_1 + 1519] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1519) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 525]
    for rc_outer_inner in range(8):
        conv2d_nchw = T.Buffer((8,), scope="local", align=32)
        threadIdx_x_2 = T.int32()
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 192]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 384]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 576]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 3]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 195]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 387]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 579]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 6]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 198]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 390]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 582]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 9]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 201]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 393]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 585]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 12]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 204]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 396]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 588]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 15]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 207]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 399]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 591]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 18]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 210]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 402]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 594]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 21]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 213]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 405]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 597]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 768]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 960]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 1152]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 1344]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 771]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 963]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 1155]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 1347]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 774]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 966]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 1158]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 1350]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 777]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 969]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 1161]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 1353]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 780]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 972]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 1164]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 1356]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 783]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 975]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 1167]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 1359]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 786]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 978]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 1170]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 1362]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 789]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 981]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 1173]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 1365]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 1]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 193]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 385]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 577]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 4]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 196]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 388]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 580]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 7]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 199]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 391]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 583]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 10]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 202]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 394]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 586]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 13]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 205]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 397]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 589]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 16]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 208]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 400]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 592]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 19]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 211]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 403]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 595]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 22]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 214]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 406]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 598]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 769]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 961]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 1153]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 1345]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 772]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 964]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 1156]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 1348]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 775]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 967]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 1159]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 1351]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 778]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 970]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 1162]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 1354]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 781]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 973]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 1165]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 1357]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 784]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 976]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 1168]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 1360]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 787]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 979]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 1171]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 1363]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 790]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 982]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 1174]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 1366]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 2]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 194]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 386]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 578]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 5]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 197]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 389]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 581]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 8]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 200]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 392]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 584]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 11]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 203]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 395]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 587]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 14]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 206]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 398]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 590]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 17]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 209]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 401]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 593]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 20]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 212]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 404]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 596]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 23]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 215]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 407]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 599]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 770]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 962]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 1154]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 1346]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 773]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 965]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 1157]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 1349]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 776]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 968]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 1160]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 1352]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 779]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 971]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 1163]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 1355]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 782]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 974]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 1166]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 1358]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 785]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 977]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 1169]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 1361]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 788]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 980]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 1172]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 1364]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 791]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 983]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 1175]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 1367]
<class 'tvm.tir.stmt.For'>
0
<class 'tvm.tir.expr.IntImm'>
8
<class 'tvm.tir.expr.IntImm'>
i1_inner
<class 'tvm.tir.expr.Var'>
conv2d_nchw[i1_inner]
<class 'tvm.tir.expr.BufferLoad'>
8
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 8
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 8 + i1_inner
<class 'tvm.tir.expr.Add'>
bias[blockIdx_x * 8 + i1_inner]
<class 'tvm.tir.expr.BufferLoad'>
conv2d_nchw[i1_inner] + bias[blockIdx_x * 8 + i1_inner]
<class 'tvm.tir.expr.Add'>
T.float32(0.0)
<class 'tvm.tir.expr.FloatImm'>
T.max(conv2d_nchw[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.expr.Max'>
392
<class 'tvm.tir.expr.IntImm'>
blockIdx_x * 392
<class 'tvm.tir.expr.Mul'>
49
<class 'tvm.tir.expr.IntImm'>
i1_inner * 49
<class 'tvm.tir.expr.Mul'>
blockIdx_x * 392 + i1_inner * 49
<class 'tvm.tir.expr.Add'>
blockIdx_x * 392 + i1_inner * 49 + threadIdx_x
<class 'tvm.tir.expr.Add'>
compute = T.Buffer((25088,))
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
i1_inner = T.int32()
bias = T.Buffer((512,))
blockIdx_x = T.int32()
threadIdx_x = T.int32()
compute[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.stmt.BufferStore'>
for i1_inner in range(8):
    compute = T.Buffer((25088,))
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    bias = T.Buffer((512,))
    blockIdx_x = T.int32()
    threadIdx_x = T.int32()
    compute[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.stmt.For'>
conv2d_nchw = T.Buffer((8,), scope="local", align=32)
conv2d_nchw[0] = T.float32(0.0)
conv2d_nchw[1] = T.float32(0.0)
conv2d_nchw[2] = T.float32(0.0)
conv2d_nchw[3] = T.float32(0.0)
conv2d_nchw[4] = T.float32(0.0)
conv2d_nchw[5] = T.float32(0.0)
conv2d_nchw[6] = T.float32(0.0)
conv2d_nchw[7] = T.float32(0.0)
blockIdx_x = T.int32()
threadIdx_x_2 = T.int32()
for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
    threadIdx_x = T.env_thread("threadIdx.x")
    pad_temp_shared = T.Buffer((4032,), scope="shared")
    data = T.Buffer((25088,))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 49] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 49) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 98] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 98) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 147] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 147) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 196] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 196) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 245] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 245) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 294] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 294) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 343] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 343) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 392] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 392) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 441] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 335], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 490] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 490) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 539] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 539) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 588] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 588) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 637] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 637) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 686] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 686) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 735] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 735) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 784] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 784) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 833] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 833) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 882] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 678], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 931] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 931) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 980] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 980) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1029] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1029) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1078] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1078) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1127] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1127) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1176] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1176) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1225] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1225) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1274] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1274) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1323] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1021], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1372] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1372) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1421] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1421) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1470] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1470) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1519] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1519) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1568] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1568) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1617] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1617) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1666] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1666) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1715] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1715) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1764] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1364], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1813] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1813) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1862] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1862) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1911] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1911) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 1960] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 1960) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2009] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2009) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2058] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2058) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2107] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2107) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2156] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2156) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2205] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 1707], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2254] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2254) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2303] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2303) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2352] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2352) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2401] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2401) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2450] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2450) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2499] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2499) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2548] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2548) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2597] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2597) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2646] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2050], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2695] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2695) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2744] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2744) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2793] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2793) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2842] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2842) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2891] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2891) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2940] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2940) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 2989] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 2989) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3038] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3038) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3087] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2393], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3136] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3136) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3185] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3185) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3234] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3234) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3283] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3283) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3332] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3332) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3381] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3381) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3430] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3430) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3479] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3479) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3528] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 2736], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3577] = T.if_then_else(1 <= (threadIdx_x // 7 + 7) % 9 and (threadIdx_x // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3577) // 63 * 49 + (threadIdx_x // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3626] = T.if_then_else(1 <= (threadIdx_x // 7 + 5) % 9 and (threadIdx_x // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3626) // 63 * 49 + (threadIdx_x // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3675] = T.if_then_else(1 <= (threadIdx_x // 7 + 3) % 9 and (threadIdx_x // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3675) // 63 * 49 + (threadIdx_x // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3724] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3724) // 63 * 49 + threadIdx_x + rx_outer_outer - 1], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3773] = T.if_then_else(1 <= (threadIdx_x // 7 + 8) % 9 and (threadIdx_x // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3773) // 63 * 49 + (threadIdx_x // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3822] = T.if_then_else(1 <= (threadIdx_x // 7 + 6) % 9 and (threadIdx_x // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3822) // 63 * 49 + (threadIdx_x // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3871] = T.if_then_else(1 <= (threadIdx_x // 7 + 4) % 9 and (threadIdx_x // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3871) // 63 * 49 + (threadIdx_x // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x % 7 - 8], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3920] = T.if_then_else(threadIdx_x < 42 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 3920) // 63 * 49 + threadIdx_x + rx_outer_outer + 6], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        pad_temp_shared[threadIdx_x + 3969] = T.if_then_else(7 <= threadIdx_x and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x + rx_outer_outer + 3079], T.float32(0.0))
    with T.launch_thread(threadIdx_x, 49):
        if threadIdx_x < 14:
            pad_temp_shared[threadIdx_x + 4018] = T.if_then_else(threadIdx_x < 7 and 1 <= rx_outer_outer + threadIdx_x % 7 and rx_outer_outer + threadIdx_x % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x + 4018) // 63 * 49 + rx_outer_outer + threadIdx_x + 41], T.float32(0.0))
    threadIdx_x_1 = T.env_thread("threadIdx.x")
    kernel_shared = T.Buffer((1536,), scope="shared")
    kernel = T.Buffer((2359296,))
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 49] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 147]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 98] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 294]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 147] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 147) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 147) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 196] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 196) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 12]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 245] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 245) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 159]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 294] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 294) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 306]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 343] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 343) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 151) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 392] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 392) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 24]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 441] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 441) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 171]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 490] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 490) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 318]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 539] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 539) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 155) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 588] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 588) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 36]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 637] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 637) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 183]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 686] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 686) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 330]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 735] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 735) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 159) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 784] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 784) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 48]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 833] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 833) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 195]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 882] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 882) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 342]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 931] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 931) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 163) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 980] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 980) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 60]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1029] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1029) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 207]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1078] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1078) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 354]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1127] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1127) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 167) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1176] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1176) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 72]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1225] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1225) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 219]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1274] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1274) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 366]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1323] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1323) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_1 + 171) % 192 * 3 + rx_outer_outer]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1372] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1372) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 84]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1421] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1421) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 231]
    with T.launch_thread(threadIdx_x_1, 49):
        kernel_shared[threadIdx_x_1 + 1470] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1470) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 378]
    with T.launch_thread(threadIdx_x_1, 49):
        if threadIdx_x_1 < 17:
            kernel_shared[threadIdx_x_1 + 1519] = kernel[blockIdx_x * 36864 + (threadIdx_x_1 + 1519) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_1 * 3 + rx_outer_outer + 525]
    for rc_outer_inner in range(8):
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 192]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 384]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 576]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 3]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 195]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 387]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 579]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 6]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 198]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 390]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 582]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 9]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 201]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 393]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 585]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 12]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 204]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 396]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 588]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 15]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 207]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 399]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 591]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 18]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 210]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 402]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 594]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 21]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 213]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 405]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 597]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 768]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 960]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 1152]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2] * kernel_shared[rc_outer_inner * 24 + 1344]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 771]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 963]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 1155]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 63] * kernel_shared[rc_outer_inner * 24 + 1347]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 774]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 966]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 1158]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 126] * kernel_shared[rc_outer_inner * 24 + 1350]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 777]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 969]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 1161]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 189] * kernel_shared[rc_outer_inner * 24 + 1353]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 780]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 972]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 1164]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 252] * kernel_shared[rc_outer_inner * 24 + 1356]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 783]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 975]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 1167]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 315] * kernel_shared[rc_outer_inner * 24 + 1359]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 786]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 978]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 1170]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 378] * kernel_shared[rc_outer_inner * 24 + 1362]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 789]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 981]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 1173]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 441] * kernel_shared[rc_outer_inner * 24 + 1365]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 1]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 193]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 385]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 577]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 4]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 196]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 388]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 580]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 7]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 199]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 391]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 583]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 10]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 202]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 394]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 586]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 13]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 205]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 397]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 589]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 16]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 208]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 400]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 592]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 19]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 211]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 403]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 595]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 22]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 214]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 406]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 598]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 769]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 961]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 1153]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 7] * kernel_shared[rc_outer_inner * 24 + 1345]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 772]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 964]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 1156]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 70] * kernel_shared[rc_outer_inner * 24 + 1348]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 775]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 967]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 1159]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 133] * kernel_shared[rc_outer_inner * 24 + 1351]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 778]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 970]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 1162]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 196] * kernel_shared[rc_outer_inner * 24 + 1354]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 781]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 973]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 1165]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 259] * kernel_shared[rc_outer_inner * 24 + 1357]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 784]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 976]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 1168]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 322] * kernel_shared[rc_outer_inner * 24 + 1360]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 787]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 979]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 1171]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 385] * kernel_shared[rc_outer_inner * 24 + 1363]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 790]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 982]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 1174]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 448] * kernel_shared[rc_outer_inner * 24 + 1366]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 2]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 194]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 386]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 578]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 5]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 197]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 389]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 581]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 8]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 200]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 392]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 584]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 11]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 203]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 395]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 587]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 14]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 206]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 398]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 590]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 17]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 209]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 401]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 593]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 20]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 212]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 404]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 596]
        conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 23]
        conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 215]
        conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 407]
        conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 599]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 770]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 962]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 1154]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 14] * kernel_shared[rc_outer_inner * 24 + 1346]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 773]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 965]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 1157]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 77] * kernel_shared[rc_outer_inner * 24 + 1349]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 776]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 968]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 1160]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 140] * kernel_shared[rc_outer_inner * 24 + 1352]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 779]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 971]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 1163]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 203] * kernel_shared[rc_outer_inner * 24 + 1355]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 782]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 974]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 1166]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 266] * kernel_shared[rc_outer_inner * 24 + 1358]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 785]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 977]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 1169]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 329] * kernel_shared[rc_outer_inner * 24 + 1361]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 788]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 980]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 1172]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 392] * kernel_shared[rc_outer_inner * 24 + 1364]
        conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 791]
        conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 983]
        conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 1175]
        conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x_2 + 455] * kernel_shared[rc_outer_inner * 24 + 1367]
for i1_inner in range(8):
    compute = T.Buffer((25088,))
    bias = T.Buffer((512,))
    compute[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x_2] = T.max(conv2d_nchw[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.stmt.SeqStmt'>
with T.launch_thread("threadIdx.x", 49) as threadIdx_x:
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    conv2d_nchw[0] = T.float32(0.0)
    conv2d_nchw[1] = T.float32(0.0)
    conv2d_nchw[2] = T.float32(0.0)
    conv2d_nchw[3] = T.float32(0.0)
    conv2d_nchw[4] = T.float32(0.0)
    conv2d_nchw[5] = T.float32(0.0)
    conv2d_nchw[6] = T.float32(0.0)
    conv2d_nchw[7] = T.float32(0.0)
    blockIdx_x = T.int32()
    for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        data = T.Buffer((25088,))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 49] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 49) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 98] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 98) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 147] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 147) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 196] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 196) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 245] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 245) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 294] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 294) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 343] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 343) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 392] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 392) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 441] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 335], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 490] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 490) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 539] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 539) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 588] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 588) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 637] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 637) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 686] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 686) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 735] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 735) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 784] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 784) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 833] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 833) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 882] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 678], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 931] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 931) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 980] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 980) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1029] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1029) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1078] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1078) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1127] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1127) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1176] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1176) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1225] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1225) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1274] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1274) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1323] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 1021], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1372] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1372) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1421] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1421) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1470] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1470) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1519] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1519) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1568] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1568) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1617] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1617) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1666] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1666) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1715] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1715) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1764] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 1364], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1813] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1813) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1862] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1862) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1911] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1911) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1960] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1960) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2009] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2009) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2058] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2058) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2107] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2107) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2156] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2156) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2205] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 1707], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2254] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2254) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2303] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2303) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2352] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2352) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2401] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2401) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2450] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2450) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2499] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2499) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2548] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2548) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2597] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2597) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2646] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 2050], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2695] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2695) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2744] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2744) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2793] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2793) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2842] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2842) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2891] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2891) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2940] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2940) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2989] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2989) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3038] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3038) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3087] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 2393], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3136] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3136) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3185] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3185) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3234] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3234) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3283] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3283) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3332] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3332) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3381] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3381) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3430] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3430) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3479] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3479) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3528] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 2736], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3577] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3577) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3626] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3626) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3675] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3675) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3724] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3724) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3773] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3773) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3822] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3822) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3871] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3871) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3920] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3920) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3969] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 3079], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if threadIdx_x_1 < 14:
                pad_temp_shared[threadIdx_x_1 + 4018] = T.if_then_else(threadIdx_x_1 < 7 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 4018) // 63 * 49 + rx_outer_outer + threadIdx_x_1 + 41], T.float32(0.0))
        threadIdx_x_2 = T.env_thread("threadIdx.x")
        kernel_shared = T.Buffer((1536,), scope="shared")
        kernel = T.Buffer((2359296,))
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 49] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 147]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 98] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 294]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 147] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 147) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 147) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 196] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 196) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 12]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 245] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 245) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 159]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 294] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 294) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 306]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 343] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 343) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 151) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 392] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 392) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 24]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 441] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 441) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 171]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 490] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 490) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 318]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 539] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 539) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 155) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 588] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 588) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 36]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 637] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 637) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 183]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 686] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 686) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 330]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 735] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 735) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 159) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 784] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 784) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 48]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 833] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 833) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 195]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 882] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 882) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 342]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 931] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 931) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 163) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 980] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 980) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 60]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 1029] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1029) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 207]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 1078] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1078) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 354]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 1127] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1127) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 167) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 1176] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1176) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 72]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 1225] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1225) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 219]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 1274] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1274) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 366]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 1323] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1323) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 171) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 1372] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1372) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 84]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 1421] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1421) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 231]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared[threadIdx_x_2 + 1470] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1470) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 378]
        with T.launch_thread(threadIdx_x_2, 49):
            if threadIdx_x_2 < 17:
                kernel_shared[threadIdx_x_2 + 1519] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1519) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 525]
        for rc_outer_inner in range(8):
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 192]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 384]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 576]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 3]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 195]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 387]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 579]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 6]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 198]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 390]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 582]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 9]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 201]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 393]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 585]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 12]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 204]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 396]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 588]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 15]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 207]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 399]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 591]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 18]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 210]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 402]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 594]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 21]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 213]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 405]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 597]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 768]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 960]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 1152]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared[rc_outer_inner * 24 + 1344]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 771]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 963]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 1155]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared[rc_outer_inner * 24 + 1347]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 774]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 966]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 1158]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared[rc_outer_inner * 24 + 1350]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 777]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 969]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 1161]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared[rc_outer_inner * 24 + 1353]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 780]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 972]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 1164]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared[rc_outer_inner * 24 + 1356]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 783]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 975]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 1167]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared[rc_outer_inner * 24 + 1359]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 786]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 978]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 1170]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared[rc_outer_inner * 24 + 1362]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 789]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 981]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 1173]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared[rc_outer_inner * 24 + 1365]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 1]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 193]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 385]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 577]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 4]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 196]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 388]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 580]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 7]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 199]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 391]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 583]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 10]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 202]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 394]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 586]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 13]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 205]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 397]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 589]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 16]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 208]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 400]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 592]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 19]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 211]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 403]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 595]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 22]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 214]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 406]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 598]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 769]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 961]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 1153]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared[rc_outer_inner * 24 + 1345]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 772]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 964]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 1156]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared[rc_outer_inner * 24 + 1348]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 775]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 967]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 1159]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared[rc_outer_inner * 24 + 1351]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 778]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 970]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 1162]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared[rc_outer_inner * 24 + 1354]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 781]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 973]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 1165]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared[rc_outer_inner * 24 + 1357]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 784]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 976]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 1168]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared[rc_outer_inner * 24 + 1360]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 787]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 979]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 1171]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared[rc_outer_inner * 24 + 1363]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 790]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 982]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 1174]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared[rc_outer_inner * 24 + 1366]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 2]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 194]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 386]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 578]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 5]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 197]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 389]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 581]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 8]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 200]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 392]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 584]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 11]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 203]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 395]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 587]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 14]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 206]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 398]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 590]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 17]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 209]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 401]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 593]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 20]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 212]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 404]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 596]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 23]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 215]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 407]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 599]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 770]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 962]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 1154]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared[rc_outer_inner * 24 + 1346]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 773]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 965]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 1157]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared[rc_outer_inner * 24 + 1349]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 776]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 968]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 1160]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared[rc_outer_inner * 24 + 1352]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 779]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 971]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 1163]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared[rc_outer_inner * 24 + 1355]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 782]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 974]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 1166]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared[rc_outer_inner * 24 + 1358]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 785]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 977]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 1169]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared[rc_outer_inner * 24 + 1361]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 788]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 980]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 1172]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared[rc_outer_inner * 24 + 1364]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 791]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 983]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 1175]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared[rc_outer_inner * 24 + 1367]
    for i1_inner in range(8):
        compute = T.Buffer((25088,))
        bias = T.Buffer((512,))
        compute[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
T.bool(True)
<class 'tvm.tir.expr.IntImm'>
with T.allocate([1536], "float32", "shared") as kernel_shared:
    threadIdx_x = T.launch_thread("threadIdx.x", 49)
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    conv2d_nchw[0] = T.float32(0.0)
    conv2d_nchw[1] = T.float32(0.0)
    conv2d_nchw[2] = T.float32(0.0)
    conv2d_nchw[3] = T.float32(0.0)
    conv2d_nchw[4] = T.float32(0.0)
    conv2d_nchw[5] = T.float32(0.0)
    conv2d_nchw[6] = T.float32(0.0)
    conv2d_nchw[7] = T.float32(0.0)
    blockIdx_x = T.int32()
    for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        pad_temp_shared = T.Buffer((4032,), scope="shared")
        data = T.Buffer((25088,))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 49] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 49) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 98] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 98) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 147] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 147) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 196] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 196) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 245] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 245) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 294] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 294) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 343] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 343) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 392] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 392) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 441] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 335], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 490] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 490) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 539] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 539) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 588] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 588) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 637] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 637) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 686] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 686) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 735] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 735) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 784] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 784) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 833] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 833) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 882] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 678], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 931] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 931) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 980] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 980) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1029] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1029) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1078] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1078) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1127] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1127) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1176] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1176) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1225] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1225) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1274] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1274) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1323] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 1021], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1372] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1372) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1421] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1421) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1470] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1470) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1519] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1519) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1568] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1568) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1617] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1617) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1666] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1666) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1715] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1715) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1764] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 1364], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1813] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1813) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1862] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1862) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1911] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1911) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 1960] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1960) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2009] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2009) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2058] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2058) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2107] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2107) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2156] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2156) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2205] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 1707], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2254] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2254) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2303] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2303) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2352] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2352) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2401] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2401) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2450] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2450) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2499] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2499) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2548] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2548) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2597] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2597) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2646] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 2050], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2695] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2695) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2744] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2744) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2793] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2793) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2842] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2842) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2891] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2891) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2940] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2940) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 2989] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2989) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3038] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3038) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3087] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 2393], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3136] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3136) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3185] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3185) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3234] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3234) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3283] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3283) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3332] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3332) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3381] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3381) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3430] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3430) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3479] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3479) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3528] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 2736], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3577] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3577) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3626] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3626) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3675] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3675) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3724] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3724) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3773] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3773) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3822] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3822) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3871] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3871) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3920] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3920) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared[threadIdx_x_1 + 3969] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 3079], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if threadIdx_x_1 < 14:
                pad_temp_shared[threadIdx_x_1 + 4018] = T.if_then_else(threadIdx_x_1 < 7 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 4018) // 63 * 49 + rx_outer_outer + threadIdx_x_1 + 41], T.float32(0.0))
        threadIdx_x_2 = T.env_thread("threadIdx.x")
        kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
        kernel = T.Buffer((2359296,))
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 49] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 147]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 98] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 294]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 147] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 147) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 147) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 196] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 196) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 12]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 245] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 245) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 159]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 294] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 294) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 306]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 343] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 343) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 151) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 392] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 392) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 24]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 441] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 441) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 171]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 490] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 490) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 318]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 539] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 539) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 155) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 588] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 588) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 36]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 637] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 637) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 183]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 686] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 686) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 330]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 735] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 735) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 159) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 784] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 784) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 48]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 833] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 833) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 195]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 882] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 882) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 342]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 931] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 931) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 163) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 980] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 980) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 60]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1029] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1029) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 207]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1078] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1078) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 354]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1127] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1127) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 167) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1176] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1176) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 72]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1225] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1225) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 219]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1274] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1274) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 366]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1323] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1323) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 171) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1372] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1372) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 84]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1421] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1421) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 231]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1470] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1470) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 378]
        with T.launch_thread(threadIdx_x_2, 49):
            if threadIdx_x_2 < 17:
                kernel_shared_1[threadIdx_x_2 + 1519] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1519) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 525]
        for rc_outer_inner in range(8):
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 192]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 384]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 576]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 3]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 195]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 387]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 579]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 6]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 198]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 390]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 582]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 9]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 201]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 393]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 585]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 12]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 204]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 396]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 588]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 15]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 207]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 399]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 591]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 18]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 210]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 402]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 594]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 21]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 213]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 405]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 597]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 768]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 960]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 1152]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 1344]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 771]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 963]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 1155]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 1347]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 774]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 966]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 1158]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 1350]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 777]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 969]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 1161]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 1353]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 780]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 972]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 1164]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 1356]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 783]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 975]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 1167]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 1359]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 786]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 978]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 1170]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 1362]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 789]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 981]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 1173]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 1365]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 1]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 193]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 385]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 577]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 4]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 196]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 388]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 580]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 7]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 199]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 391]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 583]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 10]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 202]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 394]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 586]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 13]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 205]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 397]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 589]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 16]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 208]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 400]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 592]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 19]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 211]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 403]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 595]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 22]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 214]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 406]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 598]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 769]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 961]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 1153]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 1345]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 772]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 964]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 1156]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 1348]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 775]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 967]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 1159]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 1351]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 778]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 970]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 1162]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 1354]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 781]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 973]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 1165]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 1357]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 784]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 976]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 1168]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 1360]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 787]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 979]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 1171]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 1363]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 790]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 982]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 1174]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 1366]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 2]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 194]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 386]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 578]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 5]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 197]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 389]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 581]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 8]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 200]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 392]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 584]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 11]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 203]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 395]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 587]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 14]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 206]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 398]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 590]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 17]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 209]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 401]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 593]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 20]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 212]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 404]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 596]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 23]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 215]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 407]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 599]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 770]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 962]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 1154]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 1346]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 773]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 965]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 1157]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 1349]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 776]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 968]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 1160]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 1352]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 779]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 971]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 1163]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 1355]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 782]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 974]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 1166]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 1358]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 785]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 977]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 1169]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 1361]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 788]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 980]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 1172]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 1364]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 791]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 983]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 1175]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 1367]
    for i1_inner in range(8):
        compute = T.Buffer((25088,))
        bias = T.Buffer((512,))
        compute[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.stmt.Allocate'>
T.bool(True)
<class 'tvm.tir.expr.IntImm'>
with T.allocate([4032], "float32", "shared") as pad_temp_shared:
    kernel_shared = T.allocate([1536], "float32", "shared")
    threadIdx_x = T.launch_thread("threadIdx.x", 49)
    conv2d_nchw = T.Buffer((8,), scope="local", align=32)
    conv2d_nchw[0] = T.float32(0.0)
    conv2d_nchw[1] = T.float32(0.0)
    conv2d_nchw[2] = T.float32(0.0)
    conv2d_nchw[3] = T.float32(0.0)
    conv2d_nchw[4] = T.float32(0.0)
    conv2d_nchw[5] = T.float32(0.0)
    conv2d_nchw[6] = T.float32(0.0)
    conv2d_nchw[7] = T.float32(0.0)
    blockIdx_x = T.int32()
    for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        pad_temp_shared_1 = T.Buffer((4032,), data=pad_temp_shared, scope="shared")
        data = T.Buffer((25088,))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 49] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 49) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 98] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 98) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 147] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 147) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 196] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 196) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 245] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 245) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 294] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 294) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 343] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 343) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 392] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 392) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 441] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 335], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 490] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 490) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 539] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 539) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 588] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 588) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 637] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 637) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 686] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 686) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 735] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 735) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 784] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 784) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 833] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 833) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 882] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 678], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 931] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 931) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 980] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 980) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1029] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1029) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1078] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1078) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1127] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1127) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1176] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1176) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1225] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1225) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1274] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1274) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1323] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 1021], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1372] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1372) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1421] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1421) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1470] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1470) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1519] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1519) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1568] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1568) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1617] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1617) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1666] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1666) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1715] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1715) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1764] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 1364], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1813] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1813) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1862] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1862) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1911] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1911) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1960] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1960) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2009] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2009) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2058] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2058) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2107] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2107) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2156] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2156) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2205] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 1707], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2254] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2254) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2303] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2303) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2352] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2352) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2401] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2401) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2450] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2450) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2499] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2499) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2548] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2548) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2597] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2597) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2646] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 2050], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2695] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2695) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2744] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2744) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2793] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2793) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2842] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2842) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2891] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2891) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2940] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2940) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2989] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2989) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3038] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3038) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3087] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 2393], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3136] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3136) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3185] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3185) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3234] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3234) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3283] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3283) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3332] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3332) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3381] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3381) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3430] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3430) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3479] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3479) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3528] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 2736], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3577] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3577) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3626] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3626) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3675] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3675) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3724] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3724) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3773] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3773) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3822] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3822) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3871] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3871) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3920] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3920) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3969] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 3079], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if threadIdx_x_1 < 14:
                pad_temp_shared_1[threadIdx_x_1 + 4018] = T.if_then_else(threadIdx_x_1 < 7 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 4018) // 63 * 49 + rx_outer_outer + threadIdx_x_1 + 41], T.float32(0.0))
        threadIdx_x_2 = T.env_thread("threadIdx.x")
        kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
        kernel = T.Buffer((2359296,))
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 49] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 147]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 98] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 294]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 147] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 147) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 147) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 196] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 196) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 12]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 245] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 245) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 159]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 294] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 294) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 306]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 343] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 343) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 151) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 392] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 392) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 24]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 441] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 441) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 171]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 490] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 490) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 318]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 539] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 539) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 155) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 588] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 588) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 36]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 637] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 637) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 183]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 686] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 686) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 330]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 735] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 735) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 159) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 784] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 784) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 48]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 833] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 833) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 195]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 882] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 882) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 342]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 931] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 931) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 163) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 980] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 980) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 60]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1029] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1029) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 207]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1078] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1078) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 354]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1127] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1127) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 167) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1176] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1176) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 72]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1225] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1225) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 219]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1274] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1274) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 366]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1323] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1323) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 171) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1372] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1372) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 84]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1421] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1421) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 231]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1470] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1470) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 378]
        with T.launch_thread(threadIdx_x_2, 49):
            if threadIdx_x_2 < 17:
                kernel_shared_1[threadIdx_x_2 + 1519] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1519) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 525]
        for rc_outer_inner in range(8):
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 192]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 384]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 576]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 3]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 195]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 387]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 579]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 6]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 198]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 390]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 582]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 9]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 201]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 393]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 585]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 12]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 204]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 396]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 588]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 15]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 207]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 399]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 591]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 18]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 210]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 402]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 594]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 21]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 213]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 405]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 597]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 768]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 960]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 1152]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 1344]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 771]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 963]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 1155]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 1347]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 774]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 966]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 1158]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 1350]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 777]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 969]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 1161]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 1353]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 780]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 972]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 1164]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 1356]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 783]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 975]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 1167]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 1359]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 786]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 978]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 1170]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 1362]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 789]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 981]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 1173]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 1365]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 1]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 193]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 385]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 577]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 4]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 196]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 388]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 580]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 7]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 199]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 391]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 583]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 10]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 202]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 394]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 586]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 13]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 205]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 397]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 589]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 16]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 208]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 400]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 592]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 19]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 211]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 403]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 595]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 22]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 214]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 406]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 598]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 769]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 961]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 1153]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 1345]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 772]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 964]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 1156]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 1348]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 775]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 967]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 1159]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 1351]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 778]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 970]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 1162]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 1354]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 781]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 973]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 1165]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 1357]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 784]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 976]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 1168]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 1360]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 787]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 979]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 1171]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 1363]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 790]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 982]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 1174]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 1366]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 2]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 194]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 386]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 578]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 5]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 197]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 389]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 581]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 8]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 200]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 392]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 584]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 11]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 203]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 395]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 587]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 14]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 206]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 398]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 590]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 17]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 209]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 401]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 593]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 20]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 212]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 404]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 596]
            conv2d_nchw[0] = conv2d_nchw[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 23]
            conv2d_nchw[1] = conv2d_nchw[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 215]
            conv2d_nchw[2] = conv2d_nchw[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 407]
            conv2d_nchw[3] = conv2d_nchw[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 599]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 770]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 962]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 1154]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 1346]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 773]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 965]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 1157]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 1349]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 776]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 968]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 1160]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 1352]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 779]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 971]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 1163]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 1355]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 782]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 974]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 1166]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 1358]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 785]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 977]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 1169]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 1361]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 788]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 980]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 1172]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 1364]
            conv2d_nchw[4] = conv2d_nchw[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 791]
            conv2d_nchw[5] = conv2d_nchw[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 983]
            conv2d_nchw[6] = conv2d_nchw[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 1175]
            conv2d_nchw[7] = conv2d_nchw[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 1367]
    for i1_inner in range(8):
        compute = T.Buffer((25088,))
        bias = T.Buffer((512,))
        compute[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.stmt.Allocate'>
T.bool(True)
<class 'tvm.tir.expr.IntImm'>
with T.allocate([8], "float32", "local") as conv2d_nchw:
    pad_temp_shared = T.allocate([4032], "float32", "shared")
    kernel_shared = T.allocate([1536], "float32", "shared")
    threadIdx_x = T.launch_thread("threadIdx.x", 49)
    conv2d_nchw_1 = T.Buffer((8,), data=conv2d_nchw, scope="local", align=32)
    conv2d_nchw_1[0] = T.float32(0.0)
    conv2d_nchw_1[1] = T.float32(0.0)
    conv2d_nchw_1[2] = T.float32(0.0)
    conv2d_nchw_1[3] = T.float32(0.0)
    conv2d_nchw_1[4] = T.float32(0.0)
    conv2d_nchw_1[5] = T.float32(0.0)
    conv2d_nchw_1[6] = T.float32(0.0)
    conv2d_nchw_1[7] = T.float32(0.0)
    blockIdx_x = T.int32()
    for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        pad_temp_shared_1 = T.Buffer((4032,), data=pad_temp_shared, scope="shared")
        data = T.Buffer((25088,))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 49] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 49) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 98] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 98) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 147] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 147) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 196] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 196) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 245] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 245) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 294] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 294) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 343] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 343) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 392] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 392) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 441] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 335], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 490] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 490) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 539] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 539) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 588] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 588) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 637] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 637) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 686] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 686) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 735] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 735) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 784] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 784) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 833] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 833) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 882] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 678], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 931] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 931) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 980] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 980) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1029] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1029) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1078] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1078) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1127] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1127) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1176] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1176) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1225] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1225) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1274] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1274) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1323] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 1021], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1372] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1372) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1421] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1421) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1470] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1470) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1519] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1519) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1568] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1568) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1617] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1617) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1666] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1666) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1715] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1715) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1764] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 1364], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1813] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1813) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1862] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1862) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1911] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1911) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1960] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1960) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2009] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2009) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2058] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2058) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2107] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2107) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2156] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2156) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2205] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 1707], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2254] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2254) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2303] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2303) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2352] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2352) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2401] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2401) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2450] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2450) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2499] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2499) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2548] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2548) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2597] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2597) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2646] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 2050], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2695] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2695) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2744] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2744) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2793] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2793) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2842] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2842) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2891] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2891) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2940] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2940) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2989] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2989) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3038] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3038) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3087] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 2393], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3136] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3136) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3185] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3185) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3234] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3234) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3283] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3283) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3332] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3332) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3381] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3381) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3430] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3430) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3479] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3479) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3528] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 2736], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3577] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3577) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3626] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3626) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3675] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3675) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3724] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3724) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3773] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3773) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3822] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3822) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3871] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3871) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3920] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3920) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3969] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 3079], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if threadIdx_x_1 < 14:
                pad_temp_shared_1[threadIdx_x_1 + 4018] = T.if_then_else(threadIdx_x_1 < 7 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 4018) // 63 * 49 + rx_outer_outer + threadIdx_x_1 + 41], T.float32(0.0))
        threadIdx_x_2 = T.env_thread("threadIdx.x")
        kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
        kernel = T.Buffer((2359296,))
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 49] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 147]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 98] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 294]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 147] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 147) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 147) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 196] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 196) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 12]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 245] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 245) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 159]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 294] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 294) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 306]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 343] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 343) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 151) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 392] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 392) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 24]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 441] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 441) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 171]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 490] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 490) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 318]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 539] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 539) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 155) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 588] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 588) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 36]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 637] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 637) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 183]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 686] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 686) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 330]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 735] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 735) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 159) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 784] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 784) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 48]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 833] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 833) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 195]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 882] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 882) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 342]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 931] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 931) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 163) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 980] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 980) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 60]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1029] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1029) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 207]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1078] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1078) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 354]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1127] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1127) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 167) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1176] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1176) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 72]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1225] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1225) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 219]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1274] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1274) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 366]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1323] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1323) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 171) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1372] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1372) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 84]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1421] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1421) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 231]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1470] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1470) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 378]
        with T.launch_thread(threadIdx_x_2, 49):
            if threadIdx_x_2 < 17:
                kernel_shared_1[threadIdx_x_2 + 1519] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1519) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 525]
        for rc_outer_inner in range(8):
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 192]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 384]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 576]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 3]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 195]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 387]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 579]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 6]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 198]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 390]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 582]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 9]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 201]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 393]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 585]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 12]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 204]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 396]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 588]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 15]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 207]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 399]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 591]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 18]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 210]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 402]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 594]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 21]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 213]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 405]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 597]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 768]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 960]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 1152]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 1344]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 771]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 963]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 1155]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 1347]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 774]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 966]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 1158]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 1350]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 777]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 969]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 1161]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 1353]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 780]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 972]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 1164]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 1356]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 783]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 975]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 1167]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 1359]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 786]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 978]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 1170]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 1362]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 789]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 981]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 1173]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 1365]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 1]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 193]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 385]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 577]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 4]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 196]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 388]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 580]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 7]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 199]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 391]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 583]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 10]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 202]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 394]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 586]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 13]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 205]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 397]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 589]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 16]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 208]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 400]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 592]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 19]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 211]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 403]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 595]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 22]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 214]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 406]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 598]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 769]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 961]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 1153]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 1345]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 772]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 964]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 1156]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 1348]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 775]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 967]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 1159]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 1351]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 778]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 970]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 1162]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 1354]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 781]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 973]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 1165]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 1357]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 784]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 976]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 1168]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 1360]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 787]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 979]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 1171]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 1363]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 790]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 982]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 1174]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 1366]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 2]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 194]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 386]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 578]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 5]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 197]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 389]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 581]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 8]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 200]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 392]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 584]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 11]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 203]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 395]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 587]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 14]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 206]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 398]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 590]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 17]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 209]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 401]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 593]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 20]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 212]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 404]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 596]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 23]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 215]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 407]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 599]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 770]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 962]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 1154]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 1346]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 773]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 965]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 1157]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 1349]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 776]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 968]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 1160]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 1352]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 779]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 971]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 1163]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 1355]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 782]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 974]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 1166]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 1358]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 785]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 977]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 1169]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 1361]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 788]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 980]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 1172]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 1364]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 791]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 983]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 1175]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 1367]
    for i1_inner in range(8):
        compute = T.Buffer((25088,))
        bias = T.Buffer((512,))
        compute[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw_1[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.stmt.Allocate'>
with T.launch_thread("blockIdx.x", 64) as blockIdx_x:
    conv2d_nchw = T.allocate([8], "float32", "local")
    pad_temp_shared = T.allocate([4032], "float32", "shared")
    kernel_shared = T.allocate([1536], "float32", "shared")
    threadIdx_x = T.launch_thread("threadIdx.x", 49)
    conv2d_nchw_1 = T.Buffer((8,), data=conv2d_nchw, scope="local", align=32)
    conv2d_nchw_1[0] = T.float32(0.0)
    conv2d_nchw_1[1] = T.float32(0.0)
    conv2d_nchw_1[2] = T.float32(0.0)
    conv2d_nchw_1[3] = T.float32(0.0)
    conv2d_nchw_1[4] = T.float32(0.0)
    conv2d_nchw_1[5] = T.float32(0.0)
    conv2d_nchw_1[6] = T.float32(0.0)
    conv2d_nchw_1[7] = T.float32(0.0)
    for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        pad_temp_shared_1 = T.Buffer((4032,), data=pad_temp_shared, scope="shared")
        data = T.Buffer((25088,))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 49] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 49) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 98] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 98) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 147] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 147) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 196] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 196) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 245] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 245) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 294] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 294) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 343] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 343) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 392] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 392) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 441] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 335], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 490] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 490) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 539] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 539) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 588] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 588) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 637] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 637) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 686] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 686) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 735] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 735) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 784] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 784) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 833] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 833) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 882] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 678], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 931] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 931) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 980] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 980) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1029] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1029) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1078] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1078) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1127] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1127) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1176] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1176) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1225] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1225) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1274] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1274) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1323] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 1021], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1372] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1372) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1421] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1421) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1470] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1470) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1519] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1519) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1568] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1568) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1617] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1617) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1666] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1666) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1715] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1715) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1764] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 1364], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1813] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1813) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1862] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1862) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1911] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1911) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 1960] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 1960) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2009] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2009) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2058] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2058) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2107] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2107) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2156] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2156) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2205] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 1707], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2254] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2254) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2303] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2303) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2352] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2352) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2401] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2401) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2450] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2450) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2499] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2499) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2548] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2548) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2597] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2597) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2646] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 2050], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2695] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2695) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2744] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2744) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2793] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2793) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2842] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2842) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2891] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2891) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2940] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2940) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 2989] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 2989) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3038] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3038) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3087] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 2393], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3136] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3136) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3185] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3185) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3234] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3234) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3283] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3283) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3332] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3332) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3381] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3381) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3430] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3430) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3479] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3479) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3528] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 2736], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3577] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3577) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3626] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3626) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3675] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3675) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3724] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3724) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3773] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3773) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3822] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3822) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3871] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3871) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3920] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 3920) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            pad_temp_shared_1[threadIdx_x_1 + 3969] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + threadIdx_x_1 + rx_outer_outer + 3079], T.float32(0.0))
        with T.launch_thread(threadIdx_x_1, 49):
            if threadIdx_x_1 < 14:
                pad_temp_shared_1[threadIdx_x_1 + 4018] = T.if_then_else(threadIdx_x_1 < 7 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data[rc_outer_outer * 3136 + (threadIdx_x_1 + 4018) // 63 * 49 + rx_outer_outer + threadIdx_x_1 + 41], T.float32(0.0))
        threadIdx_x_2 = T.env_thread("threadIdx.x")
        kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
        kernel = T.Buffer((2359296,))
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 49] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 147]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 98] = kernel[blockIdx_x * 36864 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 294]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 147] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 147) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 147) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 196] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 196) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 12]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 245] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 245) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 159]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 294] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 294) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 306]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 343] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 343) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 151) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 392] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 392) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 24]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 441] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 441) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 171]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 490] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 490) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 318]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 539] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 539) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 155) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 588] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 588) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 36]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 637] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 637) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 183]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 686] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 686) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 330]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 735] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 735) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 159) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 784] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 784) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 48]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 833] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 833) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 195]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 882] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 882) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 342]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 931] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 931) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 163) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 980] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 980) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 60]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1029] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1029) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 207]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1078] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1078) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 354]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1127] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1127) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 167) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1176] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1176) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 72]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1225] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1225) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 219]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1274] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1274) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 366]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1323] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1323) // 192 * 4608 + rc_outer_outer * 576 + (threadIdx_x_2 + 171) % 192 * 3 + rx_outer_outer]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1372] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1372) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 84]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1421] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1421) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 231]
        with T.launch_thread(threadIdx_x_2, 49):
            kernel_shared_1[threadIdx_x_2 + 1470] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1470) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 378]
        with T.launch_thread(threadIdx_x_2, 49):
            if threadIdx_x_2 < 17:
                kernel_shared_1[threadIdx_x_2 + 1519] = kernel[blockIdx_x * 36864 + (threadIdx_x_2 + 1519) // 192 * 4608 + rc_outer_outer * 576 + threadIdx_x_2 * 3 + rx_outer_outer + 525]
        for rc_outer_inner in range(8):
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 192]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 384]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 576]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 3]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 195]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 387]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 579]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 6]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 198]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 390]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 582]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 9]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 201]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 393]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 585]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 12]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 204]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 396]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 588]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 15]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 207]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 399]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 591]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 18]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 210]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 402]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 594]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 21]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 213]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 405]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 597]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 768]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 960]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 1152]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[rc_outer_inner * 24 + 1344]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 771]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 963]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 1155]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[rc_outer_inner * 24 + 1347]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 774]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 966]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 1158]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[rc_outer_inner * 24 + 1350]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 777]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 969]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 1161]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[rc_outer_inner * 24 + 1353]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 780]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 972]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 1164]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[rc_outer_inner * 24 + 1356]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 783]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 975]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 1167]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[rc_outer_inner * 24 + 1359]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 786]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 978]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 1170]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[rc_outer_inner * 24 + 1362]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 789]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 981]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 1173]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[rc_outer_inner * 24 + 1365]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 1]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 193]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 385]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 577]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 4]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 196]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 388]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 580]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 7]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 199]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 391]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 583]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 10]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 202]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 394]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 586]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 13]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 205]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 397]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 589]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 16]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 208]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 400]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 592]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 19]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 211]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 403]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 595]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 22]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 214]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 406]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 598]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 769]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 961]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 1153]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[rc_outer_inner * 24 + 1345]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 772]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 964]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 1156]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[rc_outer_inner * 24 + 1348]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 775]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 967]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 1159]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[rc_outer_inner * 24 + 1351]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 778]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 970]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 1162]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[rc_outer_inner * 24 + 1354]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 781]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 973]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 1165]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[rc_outer_inner * 24 + 1357]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 784]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 976]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 1168]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[rc_outer_inner * 24 + 1360]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 787]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 979]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 1171]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[rc_outer_inner * 24 + 1363]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 790]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 982]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 1174]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[rc_outer_inner * 24 + 1366]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 2]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 194]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 386]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 578]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 5]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 197]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 389]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 581]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 8]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 200]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 392]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 584]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 11]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 203]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 395]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 587]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 14]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 206]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 398]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 590]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 17]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 209]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 401]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 593]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 20]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 212]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 404]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 596]
            conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 23]
            conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 215]
            conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 407]
            conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 599]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 770]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 962]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 1154]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[rc_outer_inner * 24 + 1346]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 773]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 965]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 1157]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[rc_outer_inner * 24 + 1349]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 776]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 968]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 1160]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[rc_outer_inner * 24 + 1352]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 779]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 971]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 1163]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[rc_outer_inner * 24 + 1355]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 782]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 974]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 1166]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[rc_outer_inner * 24 + 1358]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 785]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 977]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 1169]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[rc_outer_inner * 24 + 1361]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 788]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 980]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 1172]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[rc_outer_inner * 24 + 1364]
            conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 791]
            conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 983]
            conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 1175]
            conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[rc_outer_inner * 24 + 1367]
    for i1_inner in range(8):
        compute = T.Buffer((25088,))
        bias = T.Buffer((512,))
        compute[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw_1[i1_inner] + bias[blockIdx_x * 8 + i1_inner], T.float32(0.0))
<class 'tvm.tir.stmt.AttrStmt'>
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((1, 512, 7, 7), "float32"), kernel: T.Buffer((512, 512, 3, 3), "float32"), bias: T.Buffer((1, 512, 1, 1), "float32"), compute: T.Buffer((1, 512, 7, 7), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        blockIdx_x = T.launch_thread("blockIdx.x", 64)
        conv2d_nchw = T.allocate([8], "float32", "local")
        pad_temp_shared = T.allocate([4032], "float32", "shared")
        kernel_shared = T.allocate([1536], "float32", "shared")
        threadIdx_x = T.launch_thread("threadIdx.x", 49)
        conv2d_nchw_1 = T.Buffer((8,), data=conv2d_nchw, scope="local", align=32)
        conv2d_nchw_1[0] = T.float32(0.0)
        conv2d_nchw_1[1] = T.float32(0.0)
        conv2d_nchw_1[2] = T.float32(0.0)
        conv2d_nchw_1[3] = T.float32(0.0)
        conv2d_nchw_1[4] = T.float32(0.0)
        conv2d_nchw_1[5] = T.float32(0.0)
        conv2d_nchw_1[6] = T.float32(0.0)
        conv2d_nchw_1[7] = T.float32(0.0)
        for rc_outer_outer, rx_outer_outer in T.grid(8, 3):
            cse_var_2: T.int32 = rc_outer_outer * 3136
            cse_var_1: T.int32 = rc_outer_outer * 576
            threadIdx_x_1 = T.env_thread("threadIdx.x")
            pad_temp_shared_1 = T.Buffer((4032,), data=pad_temp_shared, scope="shared")
            data_1 = T.Buffer((25088,), data=data.data)
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 49] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 49) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 98] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 98) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 147] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 147) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 196] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 196) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 245] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 245) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 294] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 294) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 343] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 343) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 392] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 392) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 441] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 335], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 490] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 490) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 539] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 539) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 588] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 588) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 637] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 637) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 686] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 686) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 735] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 735) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 784] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 784) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 833] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 833) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 882] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 678], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 931] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 931) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 980] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 980) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1029] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1029) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1078] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1078) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1127] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1127) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1176] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1176) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1225] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1225) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1274] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1274) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1323] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 1021], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1372] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1372) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1421] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1421) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1470] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1470) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1519] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1519) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1568] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1568) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1617] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1617) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1666] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1666) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1715] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1715) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1764] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 1364], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1813] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1813) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1862] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1862) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1911] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1911) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 1960] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 1960) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2009] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2009) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2058] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2058) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2107] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2107) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2156] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2156) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2205] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 1707], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2254] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2254) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2303] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2303) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2352] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2352) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2401] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2401) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2450] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2450) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2499] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2499) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2548] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2548) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2597] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2597) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2646] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 2050], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2695] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2695) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2744] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2744) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2793] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2793) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2842] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2842) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2891] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2891) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2940] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2940) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 2989] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 2989) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3038] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3038) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3087] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 2393], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3136] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3136) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3185] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3185) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3234] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3234) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3283] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3283) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3332] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3332) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3381] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3381) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3430] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3430) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3479] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3479) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3528] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 2736], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3577] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 7) % 9 and (threadIdx_x_1 // 7 + 7) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3577) // 63 * 49 + (threadIdx_x_1 // 7 + 7) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3626] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 5) % 9 and (threadIdx_x_1 // 7 + 5) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3626) // 63 * 49 + (threadIdx_x_1 // 7 + 5) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3675] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 3) % 9 and (threadIdx_x_1 // 7 + 3) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3675) // 63 * 49 + (threadIdx_x_1 // 7 + 3) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3724] = T.if_then_else(1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3724) // 63 * 49 + threadIdx_x_1 + rx_outer_outer - 1], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3773] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 8) % 9 and (threadIdx_x_1 // 7 + 8) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3773) // 63 * 49 + (threadIdx_x_1 // 7 + 8) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3822] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 6) % 9 and (threadIdx_x_1 // 7 + 6) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3822) // 63 * 49 + (threadIdx_x_1 // 7 + 6) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3871] = T.if_then_else(1 <= (threadIdx_x_1 // 7 + 4) % 9 and (threadIdx_x_1 // 7 + 4) % 9 < 8 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3871) // 63 * 49 + (threadIdx_x_1 // 7 + 4) % 9 * 7 + rx_outer_outer + threadIdx_x_1 % 7 - 8], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3920] = T.if_then_else(threadIdx_x_1 < 42 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 3920) // 63 * 49 + threadIdx_x_1 + rx_outer_outer + 6], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                pad_temp_shared_1[threadIdx_x_1 + 3969] = T.if_then_else(7 <= threadIdx_x_1 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + threadIdx_x_1 + rx_outer_outer + 3079], T.float32(0.0))
            with T.launch_thread(threadIdx_x_1, 49):
                if threadIdx_x_1 < 14:
                    pad_temp_shared_1[threadIdx_x_1 + 4018] = T.if_then_else(threadIdx_x_1 < 7 and 1 <= rx_outer_outer + threadIdx_x_1 % 7 and rx_outer_outer + threadIdx_x_1 % 7 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 4018) // 63 * 49 + rx_outer_outer + threadIdx_x_1 + 41], T.float32(0.0))
            threadIdx_x_2 = T.env_thread("threadIdx.x")
            kernel_shared_1 = T.Buffer((1536,), data=kernel_shared, scope="shared")
            kernel_1 = T.Buffer((2359296,), data=kernel.data)
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2] = kernel_1[blockIdx_x * 36864 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 49] = kernel_1[blockIdx_x * 36864 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 147]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 98] = kernel_1[blockIdx_x * 36864 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 294]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 147] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 147) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 147) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 196] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 196) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 12]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 245] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 245) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 159]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 294] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 294) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 306]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 343] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 343) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 151) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 392] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 392) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 24]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 441] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 441) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 171]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 490] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 490) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 318]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 539] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 539) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 155) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 588] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 588) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 36]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 637] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 637) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 183]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 686] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 686) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 330]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 735] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 735) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 159) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 784] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 784) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 48]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 833] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 833) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 195]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 882] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 882) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 342]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 931] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 931) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 163) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 980] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 980) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 60]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1029] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1029) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 207]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1078] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1078) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 354]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1127] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1127) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 167) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1176] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1176) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 72]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1225] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1225) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 219]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1274] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1274) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 366]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1323] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1323) // 192 * 4608 + cse_var_1 + (threadIdx_x_2 + 171) % 192 * 3 + rx_outer_outer]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1372] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1372) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 84]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1421] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1421) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 231]
            with T.launch_thread(threadIdx_x_2, 49):
                kernel_shared_1[threadIdx_x_2 + 1470] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1470) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 378]
            with T.launch_thread(threadIdx_x_2, 49):
                if threadIdx_x_2 < 17:
                    kernel_shared_1[threadIdx_x_2 + 1519] = kernel_1[blockIdx_x * 36864 + (threadIdx_x_2 + 1519) // 192 * 4608 + cse_var_1 + threadIdx_x_2 * 3 + rx_outer_outer + 525]
            for rc_outer_inner in range(8):
                cse_var_3: T.int32 = rc_outer_inner * 24
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 192]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 384]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 576]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 3]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 195]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 387]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 579]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 6]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 198]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 390]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 582]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 9]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 201]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 393]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 585]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 12]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 204]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 396]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 588]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 15]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 207]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 399]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 591]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 18]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 210]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 402]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 594]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 21]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 213]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 405]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 597]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 768]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 960]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 1152]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x] * kernel_shared_1[cse_var_3 + 1344]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 771]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 963]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 1155]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 63] * kernel_shared_1[cse_var_3 + 1347]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 774]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 966]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 1158]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 126] * kernel_shared_1[cse_var_3 + 1350]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 777]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 969]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 1161]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 189] * kernel_shared_1[cse_var_3 + 1353]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 780]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 972]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 1164]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 252] * kernel_shared_1[cse_var_3 + 1356]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 783]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 975]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 1167]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 315] * kernel_shared_1[cse_var_3 + 1359]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 786]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 978]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 1170]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 378] * kernel_shared_1[cse_var_3 + 1362]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 789]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 981]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 1173]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 441] * kernel_shared_1[cse_var_3 + 1365]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 1]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 193]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 385]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 577]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 4]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 196]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 388]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 580]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 7]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 199]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 391]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 583]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 10]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 202]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 394]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 586]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 13]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 205]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 397]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 589]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 16]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 208]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 400]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 592]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 19]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 211]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 403]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 595]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 22]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 214]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 406]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 598]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 769]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 961]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 1153]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 7] * kernel_shared_1[cse_var_3 + 1345]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 772]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 964]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 1156]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 70] * kernel_shared_1[cse_var_3 + 1348]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 775]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 967]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 1159]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 133] * kernel_shared_1[cse_var_3 + 1351]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 778]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 970]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 1162]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 196] * kernel_shared_1[cse_var_3 + 1354]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 781]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 973]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 1165]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 259] * kernel_shared_1[cse_var_3 + 1357]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 784]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 976]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 1168]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 322] * kernel_shared_1[cse_var_3 + 1360]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 787]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 979]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 1171]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 385] * kernel_shared_1[cse_var_3 + 1363]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 790]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 982]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 1174]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 448] * kernel_shared_1[cse_var_3 + 1366]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 2]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 194]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 386]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 578]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 5]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 197]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 389]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 581]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 8]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 200]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 392]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 584]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 11]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 203]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 395]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 587]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 14]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 206]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 398]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 590]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 17]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 209]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 401]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 593]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 20]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 212]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 404]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 596]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 23]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 215]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 407]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 599]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 770]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 962]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 1154]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 14] * kernel_shared_1[cse_var_3 + 1346]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 773]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 965]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 1157]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 77] * kernel_shared_1[cse_var_3 + 1349]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 776]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 968]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 1160]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 140] * kernel_shared_1[cse_var_3 + 1352]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 779]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 971]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 1163]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 203] * kernel_shared_1[cse_var_3 + 1355]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 782]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 974]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 1166]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 266] * kernel_shared_1[cse_var_3 + 1358]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 785]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 977]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 1169]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 329] * kernel_shared_1[cse_var_3 + 1361]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 788]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 980]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 1172]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 392] * kernel_shared_1[cse_var_3 + 1364]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 791]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 983]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 1175]
                conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 504 + threadIdx_x + 455] * kernel_shared_1[cse_var_3 + 1367]
        for i1_inner in range(8):
            compute_1 = T.Buffer((25088,), data=compute.data)
            bias_1 = T.Buffer((512,), data=bias.data)
            compute_1[blockIdx_x * 392 + i1_inner * 49 + threadIdx_x] = T.max(conv2d_nchw_1[i1_inner] + bias_1[blockIdx_x * 8 + i1_inner], T.float32(0.0))
Execution time of this operator: 0.101 ms
Equivalent python schedule:
pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
s[T_add].compute_inline()
conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=4)
conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=2)
conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=1)
conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=1)
conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=7)
conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=7)
conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=8)
conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=8)
conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=1)
conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=3)
conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=1)
conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=1)
s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=8)
compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=1)
compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=7)
compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=7)
compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
s[pad_temp].compute_inline()
compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=49)
s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=49)
s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 1024)
s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

