# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# GH actions.
# We use it to cover windows and mac builds
# Jenkins is still the primary CI

name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: CI-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  MacOS:
    if: ${{ github.repository == 'apache/tvm' }}
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Set up
        run: |
          set -x
          brew update
          brew install sccache
          mkdir -p ~/.sccache
          ln -s "$(which sccache)" ~/.sccache/cc
          ln -s "$(which sccache)" ~/.sccache/c++
          brew install --cask micromamba
          eval "$(micromamba shell hook --shell=bash)"
          micromamba create -f ci/micro.yaml
          micromamba activate tvm-build
          llvm-config --version
          python3 --version
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3
      - name: Build library
        env:
          target_platform: osx-64
          PREFIX: /usr/local
          SRC_DIR: '..'
          CPU_COUNT: 2
          AWS_ACCESS_KEY_ID: ${{ secrets.MACOS_SCCACHE_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.MACOS_SCCACHE_AWS_SECRET_ACCESS_KEY }}
        shell: bash
        run: |
          eval "$(micromamba shell hook --shell=bash)"
          micromamba activate tvm-build
          set -eux
          mkdir -p build
          cp ci/macos_config.cmake build/config.cmake
          python3 tests/scripts/task_build.py \
            --cc ~/.sccache/cc \
            --c++ ~/.sccache/c++ \
            --sccache-bucket tvm-sccache-macos
      - name: Install library
        shell: bash
        env:
          SRC_DIR: '.'
          PYTHON: python3
        run: |
          eval "$(micromamba shell hook --shell=bash)"
          micromamba activate tvm-build
          set -eux
          bash ./conda/recipe/install_libtvm.sh
          bash ./conda/recipe/install_tvm_python.sh
      - name: Build iOS RPC
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.MACOS_SCCACHE_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.MACOS_SCCACHE_AWS_SECRET_ACCESS_KEY }}
        run: |
          eval "$(micromamba shell hook --shell=bash)"
          micromamba activate tvm-build
          set -eux
          IOS_VERSION="14.0"
          mkdir build-ios-simulator
          python3 tests/scripts/task_build.py \
            --build-dir build-ios-simulator \
            --cmake-target ios_rpc \
            --cc ~/.sccache/cc \
            --c++ ~/.sccache/c++ \
            --sccache-bucket tvm-sccache-macos \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_SYSTEM_NAME=iOS \
            -DCMAKE_SYSTEM_VERSION=${IOS_VERSION} \
            -DCMAKE_OSX_SYSROOT=iphonesimulator \
            -DCMAKE_OSX_ARCHITECTURES=x86_64 \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=14.0 \
            -DCMAKE_BUILD_WITH_INSTALL_NAME_DIR=ON \
            -DUSE_IOS_RPC=ON
      - name: Test
        shell: bash
        run: |
          eval "$(micromamba shell hook --shell=bash)"
          micromamba activate tvm-build
          set -eux
          python -m pytest -v tests/python/all-platform-minimal-test
      - name: Test iOS RPC
        shell: bash
        run: |
          eval "$(micromamba shell hook --shell=bash)"
          micromamba activate tvm-build
          set -eux
          python -m pip install tornado psutil cloudpickle
          export PYTHONPATH=tests/python/contrib
          export BUNDLE_ID=org.apache.tvmrpc
          export BUNDLE_PATH=build-ios-simulator/apps/ios_rpc/ios_rpc/src/ios_rpc-build/Release-iphonesimulator/tvmrpc.app
          python -m pytest -v tests/python/contrib/test_rpc_server_device.py

  Windows:
    if: ${{ github.repository == 'apache/tvm' }}
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Set up environment
        uses: ./.github/actions/setup
      - name: Conda Build
        shell: cmd /C call {0}
        run: >-
          conda build --output-folder=conda/pkg conda/recipe &&
          conda install tvm -c ./conda/pkg
      - name: Test
        shell: cmd /C call {0}
        run: >-
          python -m pytest -v tests/python/all-platform-minimal-test

  Android:
    if: ${{ github.repository == 'apache/tvm' }}
    runs-on: Ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Setup dependencies
        run: |
          set -x
          mkdir ~/.sccache
          pushd ~/.sccache
          curl -L -o sccache.tar.gz https://github.com/mozilla/sccache/releases/download/v0.2.15/sccache-v0.2.15-x86_64-unknown-linux-musl.tar.gz
          tar -xzvf sccache.tar.gz
          chmod +x sccache-v0.2.15-x86_64-unknown-linux-musl/sccache
          ln -s "$(pwd)/sccache-v0.2.15-x86_64-unknown-linux-musl/sccache" /usr/local/bin/sccache
          ln -s "$(pwd)/sccache-v0.2.15-x86_64-unknown-linux-musl/sccache" ~/.sccache/gcc
          ln -s "$(pwd)/sccache-v0.2.15-x86_64-unknown-linux-musl/sccache" ~/.sccache/g++
          popd
          curl -L -o micromamba.tar.bz2 https://micro.mamba.pm/api/micromamba/linux-64/latest
          tar -xvjf micromamba.tar.bz2
          export PATH=$(pwd)/bin:$PATH
          eval "$(micromamba shell hook --shell=bash)"
          micromamba create -f ci/micro.yaml
          micromamba activate tvm-build
          llvm-config --version
          python3 --version
      - name: Set up java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: Build TVM
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.MACOS_SCCACHE_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.MACOS_SCCACHE_AWS_SECRET_ACCESS_KEY }}
        run: |
          export PATH=$(pwd)/bin:$PATH
          eval "$(micromamba shell hook --shell=bash)"
          micromamba activate tvm-build
          set -eux
          bash ./tests/scripts/task_config_build_jvm.sh build
          python3 tests/scripts/task_build.py \
            --sccache-bucket tvm-sccache-macos \
            --no-cc \
            -DCMAKE_C_COMPILER_LAUNCHER=sccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
      - name: Build TVM4J
        run: |
          make jvmpkg
      - name: Build android_rpc
        working-directory: apps/android_rpc
        run: |
          set -eux
          export PATH="${ANDROID_NDK_LATEST_HOME}:$PATH"
          gradle clean build
      - name: Upload android_rpc APK
        uses: actions/upload-artifact@v2
        with:
          name: android_rpc-debug.apk
          path: ./apps/android_rpc/app/build/outputs/apk/debug/app-debug.apk
      - name: Build android_deploy
        working-directory: apps/android_deploy
        run: |
          set -eux
          export PATH="${ANDROID_NDK_LATEST_HOME}:$PATH"
          gradle clean build
      - name: Upload android_deploy APK
        uses: actions/upload-artifact@v2
        with:
          name: android_deploy-debug.apk
          path: ./apps/android_deploy/app/build/outputs/apk/debug/app-debug.apk
      - name: Build android_camera
        working-directory: apps/android_camera
        run: |
          export TVM_HOME=~/work/tvm/tvm
          export PYTHONPATH=$TVM_HOME/python:${PYTHONPATH}
          set -eux
          mkdir -p app/src/main/assets/models/
          export TVM_NDK_CC=${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android30-clang++
          python3 ${TVM_HOME}/python/gen_requirements.py
          pip3 install -r ${TVM_HOME}/python/requirements/core.txt
          cd models
          pip3 install -r requirements.txt
          python3 prepare_model.py
          cd ..
          export PATH="${ANDROID_NDK_LATEST_HOME}:$PATH"
          gradle clean build
      - name: Upload android_camera APK
        uses: actions/upload-artifact@v2
        with:
          name: android_camera-debug.apk
          path: ./apps/android_camera/app/build/outputs/apk/debug/app-debug.apk
