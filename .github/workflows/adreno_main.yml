# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# GH actions.

name: Adreno CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: CI-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  Lint:
    if: ${{ github.repository == 'gpgpu/apache-tvm' }}
    runs-on: tvm-linux-ci
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Run Lint
        shell: bash -l {0}
        run: |
          SCCACHE_SERVER_PORT=8767 ./tests/scripts/ci.py lint -d tvm.ci_lint
  Adreno-Tests-V3:
    needs: [Lint]
    if: ${{ github.repository == 'gpgpu/apache-tvm' }}
    runs-on: adreno-runner
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Build and run tests
        shell: bash -l {0}
        run: |
           set -e
           if ! git remote -v | grep ^gpgpu ; then git remote add gpgpu git@github.qualcomm.com:gpgpu/apache-tvm.git ; fi
           git fetch gpgpu
           git checkout gpgpu/adreno_ci -- pytest_deselect_ids.txt
           git restore --staged pytest_deselect_ids.txt
           # Test V4 device with V3 CLML SDK
           ADRENO_OPENCL=${ADRENO_OPENCL_V3} \
           SCCACHE_SERVER_PORT=8767 \
           ANDROID_SERIAL=`cat /etc/tvm-ci-device-v4` \
           python ./tests/scripts/ci.py adreno -d tvm.ci_adreno --test
           # Test V3 device with V3 CLML SDK
           ADRENO_OPENCL=${ADRENO_OPENCL_V3} \
           SCCACHE_SERVER_PORT=8767 \
           ANDROID_SERIAL=`cat /etc/tvm-ci-device` \
           python ./tests/scripts/ci.py adreno -d tvm.ci_adreno --test

  Adreno-Tests-V4:
    needs: [Lint]
    if: ${{ github.repository == 'gpgpu/apache-tvm' }}
    runs-on: adreno-runner
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Build and run tests
        shell: bash -l {0}
        run: |
           set -e
           if ! git remote -v | grep ^gpgpu ; then git remote add gpgpu git@github.qualcomm.com:gpgpu/apache-tvm.git ; fi
           git fetch gpgpu
           git checkout gpgpu/adreno_ci -- pytest_deselect_ids.txt
           git restore --staged pytest_deselect_ids.txt
           # Test V4 device with V4 CLML SDK
           ADRENO_OPENCL=${ADRENO_OPENCL_V4} \
           SCCACHE_SERVER_PORT=8767 \
           ANDROID_SERIAL=`cat /etc/tvm-ci-device-v4` \
           python ./tests/scripts/ci.py adreno -d tvm.ci_adreno --test
           # Test V3 device with V4 CLML SDK
           ADRENO_OPENCL=${ADRENO_OPENCL_V4} \
           SCCACHE_SERVER_PORT=8767 \
           ANDROID_SERIAL=`cat /etc/tvm-ci-device` \
           python ./tests/scripts/ci.py adreno -d tvm.ci_adreno --test
  GPU-Tests:
    needs: [Lint, Adreno-Tests-V3, Adreno-Tests-V4]
    if: ${{ github.repository == 'gpgpu/apache-tvm' }}
    runs-on: gpu-runner
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Build and run topi tests
        shell: bash -l {0}
        run: |
           set -e
           if ! git remote -v | grep ^gpgpu ; then git remote add gpgpu git@github.qualcomm.com:gpgpu/apache-tvm.git ; fi
           git fetch gpgpu
           git checkout gpgpu/adreno_ci -- pytest_deselect_ids.txt
           git restore --staged pytest_deselect_ids.txt
           SCCACHE_SERVER_PORT=8767 python ./tests/scripts/ci.py gpu -d adreno_ci_gpu --topi
      - name: Build cpptest
        shell: bash -l {0}
        run: |
           ./docker/bash.sh adreno_ci_gpu --env SCCACHE_SERVER_PORT=8767 python3 ./tests/scripts/task_build.py --cmake-target cpptest --build-dir build-gpu
      - name: Run cpp unit tests
        shell: bash -l {0}
        run: |
           SCCACHE_SERVER_PORT=8767 ./tests/scripts/ci.py gpu -d adreno_ci_gpu -c
      - name: Run unit tests
        shell: bash -l {0}
        run: |
           SCCACHE_SERVER_PORT=8767 ./tests/scripts/ci.py gpu -d adreno_ci_gpu -u
      - name: Run front end tests
        shell: bash -l {0}
        run: |
           SCCACHE_SERVER_PORT=8767 ./tests/scripts/ci.py gpu -d adreno_ci_gpu -f
  Windows-Build:
    if: ${{ github.repository == 'gpgpu/apache-tvm' }}
    runs-on: tvm-windows
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          ref: ''
      - name: Compile x86
        shell: powershell
        run: |
           Push-Location
           New-Item -ItemType Directory -Force -Path "./build"
           cd build
           cp ../cmake/config.cmake .
           Add-Content config.cmake "set(USE_OPENCL $ENV:OPENCL_SDK_ADRENO_X86)"
           Add-Content config.cmake "set(USE_LLVM $ENV:LLVM_CONFIG)"
           Add-Content config.cmake "set(USE_ADRENO_ACCL $ENV:ADRENOACCL_SDK_X86)"
           Add-Content config.cmake "set(USE_ADRENO_ACCL_GRAPH_EXECUTOR $ENV:ADRENOACCL_SDK_X86)"
           #Add-Content config.cmake "set(USE_CLML $ENV:OPENCL_SDK_ADRENO_X86)"
           #Add-Content config.cmake "set(USE_CLML_GRAPH_EXECUTOR $ENV:OPENCL_SDK_ADRENO_X86)"
           Add-Content config.cmake "set(USE_CPP_RTVM ON)"
           Add-Content config.cmake "set(USE_RPC ON)"
           Add-Content config.cmake "set(USE_CPP_RPC ON)"
           Add-Content config.cmake "set(USE_GRAPH_EXECUTOR ON)"
           Add-Content config.cmake "set(USE_KALLOC_ALIGNMENT 32)"
           Add-Content config.cmake "set(USE_OPENCL_EXTN_QCOM ON)"
           cmake .. -G "Visual Studio 17 2022" -A x64
           cmake --build . --config Release --parallel $env:NUMBER_OF_PROCESSORS
           Pop-Location
      - name: Check x86 Build Status
        shell: powershell
        run: |
           $env:PYTHONPATH = "$pwd\python"
           python -c "import tvm; print(tvm.__path__)"
      - name: Compile Arm64
        shell: powershell
        run: |
           Push-Location
           New-Item -ItemType Directory -Force -Path "./build-arm64"
           cd build-arm64
           cp ../cmake/config.cmake .
           Add-Content config.cmake "set(USE_OPENCL $ENV:OPENCL_SDK_ADRENO_ARM64)"
           Add-Content config.cmake "set(USE_ADRENO_ACCL $ENV:ADRENOACCL_SDK_ARM64)"
           Add-Content config.cmake "set(USE_ADRENO_ACCL_GRAPH_EXECUTOR $ENV:ADRENOACCL_SDK_ARM64)"
           #Add-Content config.cmake "set(USE_CLML $ENV:OPENCL_SDK_ADRENO_ARM64)"
           #Add-Content config.cmake "set(USE_CLML_GRAPH_EXECUTOR $ENV:OPENCL_SDK_ADRENO_ARM64)"
           Add-Content config.cmake "set(USE_CPP_RTVM ON)"
           Add-Content config.cmake "set(USE_RPC ON)"
           Add-Content config.cmake "set(USE_CPP_RPC ON)"
           Add-Content config.cmake "set(USE_GRAPH_EXECUTOR ON)"
           Add-Content config.cmake "set(USE_KALLOC_ALIGNMENT 32)"
           Add-Content config.cmake "set(USE_OPENCL_EXTN_QCOM ON)"
           cmake .. -G "Visual Studio 17 2022" -A ARM64
           cmake --build . --config Release --parallel $env:NUMBER_OF_PROCESSORS --target rtvm tvm_rpc
           Pop-Location
