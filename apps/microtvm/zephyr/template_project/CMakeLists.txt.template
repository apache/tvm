# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# SPDX-License-Identifier: Apache-2.0

cmake_minimum_required(VERSION 3.13.1)

set(ENV{QEMU_BIN_PATH} "${CMAKE_SOURCE_DIR}/qemu-hack")

set(QEMU_PIPE <QEMU_PIPE> CACHE PATH "Path to QEMU pipe")

option(ENERGY_MODE "Enable energy mode for MLPerfTiny tests." 0)

<CMAKE_ARGS>

find_package(Zephyr HINTS $ENV{ZEPHYR_BASE})
project(microtvm_autogenerated_project)

if(DEFINED CMSIS_PATH)
  file(GLOB_RECURSE cmsis_lib_srcs
    ${CMSIS_PATH}/CMSIS-NN/Source/ActivationFunctions/*.c
    ${CMSIS_PATH}/CMSIS-NN/Source/BasicMathFunctions/*.c
    ${CMSIS_PATH}/CMSIS-NN/Source/ConcatenationFunctions/*.c
    ${CMSIS_PATH}/CMSIS-NN/Source/ConvolutionFunctions/*.c
    ${CMSIS_PATH}/CMSIS-NN/Source/FullyConnectedFunctions/*.c
    ${CMSIS_PATH}/CMSIS-NN/Source/NNSupportFunctions/*.c
    ${CMSIS_PATH}/CMSIS-NN/Source/PoolingFunctions/*.c
    ${CMSIS_PATH}/CMSIS-NN/Source/ReshapeFunctions/*.c
    ${CMSIS_PATH}/CMSIS-NN/Source/SoftmaxFunctions/*.c
  )

  set(cmsis_includes
    ${CMSIS_PATH}/CMSIS/Core/Include
    ${CMSIS_PATH}/CMSIS-NN/Include
    ${CMSIS_PATH}/CMSIS/DSP/Include
    ${CMSIS_PATH}/CMSIS/DSP/Include/dsp
  )
else()
  set(cmsis_lib_srcs "")
  set(cmsis_includes "")
endif()

# Add CRT libraries
set(CRT_LIBS <API_SERVER_CRT_LIBS>)
set(CRT_CONFIG_PATH ${CMAKE_SOURCE_DIR}/crt_config)
add_subdirectory(crt)
foreach(crt_lib_name ${CRT_LIBS})
  target_link_libraries(${crt_lib_name} PUBLIC zephyr_interface)
  target_link_libraries(app PRIVATE ${crt_lib_name})
endforeach(crt_lib_name ${CRT_LIBS})

# define a library for the model sources.
zephyr_library_named(tvm_model)
file(GLOB_RECURSE tvm_model_srcs model/codegen/host/src/*.c model/codegen/host/lib/*.o)
target_sources(tvm_model PRIVATE ${tvm_model_srcs})
target_include_directories(tvm_model PRIVATE ${CMAKE_SOURCE_DIR}/include crt_config crt/include model/codegen/host/include ${cmsis_includes})
target_compile_options(tvm_model PRIVATE -Wno-unused-variable)  # TVM-generated code tends to include lots of these.
target_link_libraries(app PRIVATE tvm_model)

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/src/api)
  zephyr_library_named(tinymlperf_api)
  file(GLOB_RECURSE tiny_internal_srcs src/api/*.cpp)
  target_sources(tinymlperf_api PRIVATE ${tiny_internal_srcs})
  target_compile_options(tinymlperf_api PRIVATE -Wno-unused-variable)  # TVM-generated code tends to include lots of these.
  target_link_libraries(app PRIVATE tinymlperf_api)
  target_compile_definitions(tinymlperf_api PUBLIC -DEE_CFG_ENERGY_MODE=${ENERGY_MODE})
endif()

file(GLOB_RECURSE app_srcs src/**.c src/**.cc)
target_sources(app PRIVATE ${app_srcs} ${cmsis_lib_srcs})
target_include_directories(app PRIVATE crt_config include ${CMAKE_SOURCE_DIR}/include crt/include model/codegen/host/include ${cmsis_includes})
