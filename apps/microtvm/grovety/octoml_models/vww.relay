def @main(%input_1_int8: Tensor[(1, 96, 96, 3), int8], %v_param_1: Tensor[(3, 3, 3, 8), int8], %v_param_2: Tensor[(8), int32], %v_param_3: Tensor[(3, 3, 8, 1), int8], %v_param_4: Tensor[(8), int32], %v_param_5: Tensor[(1, 1, 8, 16), int8], %v_param_6: Tensor[(16), int32], %v_param_7: Tensor[(3, 3, 16, 1), int8], %v_param_8: Tensor[(16), int32], %v_param_9: Tensor[(1, 1, 16, 32), int8], %v_param_10: Tensor[(32), int32], %v_param_11: Tensor[(3, 3, 32, 1), int8], %v_param_12: Tensor[(32), int32], %v_param_13: Tensor[(1, 1, 32, 32), int8], %v_param_14: Tensor[(32), int32], %v_param_15: Tensor[(3, 3, 32, 1), int8], %v_param_16: Tensor[(32), int32], %v_param_17: Tensor[(1, 1, 32, 64), int8], %v_param_18: Tensor[(64), int32], %v_param_19: Tensor[(3, 3, 64, 1), int8], %v_param_20: Tensor[(64), int32], %v_param_21: Tensor[(1, 1, 64, 64), int8], %v_param_22: Tensor[(64), int32], %v_param_23: Tensor[(3, 3, 64, 1), int8], %v_param_24: Tensor[(64), int32], %v_param_25: Tensor[(1, 1, 64, 128), int8], %v_param_26: Tensor[(128), int32], %v_param_27: Tensor[(3, 3, 128, 1), int8], %v_param_28: Tensor[(128), int32], %v_param_29: Tensor[(1, 1, 128, 128), int8], %v_param_30: Tensor[(128), int32], %v_param_31: Tensor[(3, 3, 128, 1), int8], %v_param_32: Tensor[(128), int32], %v_param_33: Tensor[(1, 1, 128, 128), int8], %v_param_34: Tensor[(128), int32], %v_param_35: Tensor[(3, 3, 128, 1), int8], %v_param_36: Tensor[(128), int32], %v_param_37: Tensor[(1, 1, 128, 128), int8], %v_param_38: Tensor[(128), int32], %v_param_39: Tensor[(3, 3, 128, 1), int8], %v_param_40: Tensor[(128), int32], %v_param_41: Tensor[(1, 1, 128, 128), int8], %v_param_42: Tensor[(128), int32], %v_param_43: Tensor[(3, 3, 128, 1), int8], %v_param_44: Tensor[(128), int32], %v_param_45: Tensor[(1, 1, 128, 128), int8], %v_param_46: Tensor[(128), int32], %v_param_47: Tensor[(3, 3, 128, 1), int8], %v_param_48: Tensor[(128), int32], %v_param_49: Tensor[(1, 1, 128, 256), int8], %v_param_50: Tensor[(256), int32], %v_param_51: Tensor[(3, 3, 256, 1), int8], %v_param_52: Tensor[(256), int32], %v_param_53: Tensor[(1, 1, 256, 256), int8], %v_param_54: Tensor[(256), int32], %v_param_55: Tensor[(2, 256), int8], %v_param_56: Tensor[(2), int32]) {
  %0 = qnn.conv2d(%input_1_int8, %v_param_1, -128, 0, 0.00392157f, meta[relay.Constant][0], strides=[2, 2], padding=[0, 0, 1, 1], channels=8, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %1 = nn.bias_add(%0, %v_param_2, axis=3);
  %2 = qnn.requantize(%1, meta[relay.Constant][1], 0, 0.01497f, -128, axis=3, out_dtype="int8");
  %3 = clip(%2, a_min=-128f, a_max=127f);
  %4 = qnn.conv2d(%3, %v_param_3, -128, 0, 0.01497f, meta[relay.Constant][2], padding=[1, 1, 1, 1], groups=8, channels=8, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %5 = nn.bias_add(%4, %v_param_4, axis=3);
  %6 = qnn.requantize(%5, meta[relay.Constant][3], 0, 0.0483876f, -128, axis=3, out_dtype="int8");
  %7 = clip(%6, a_min=-128f, a_max=127f);
  %8 = qnn.conv2d(%7, %v_param_5, -128, 0, 0.0483876f, meta[relay.Constant][4], padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %9 = nn.bias_add(%8, %v_param_6, axis=3);
  %10 = qnn.requantize(%9, meta[relay.Constant][5], 0, 0.0341311f, -128, axis=3, out_dtype="int8");
  %11 = clip(%10, a_min=-128f, a_max=127f);
  %12 = qnn.conv2d(%11, %v_param_7, -128, 0, 0.0341311f, meta[relay.Constant][6], strides=[2, 2], padding=[0, 0, 1, 1], groups=16, channels=16, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %13 = nn.bias_add(%12, %v_param_8, axis=3);
  %14 = qnn.requantize(%13, meta[relay.Constant][7], 0, 0.0304951f, -128, axis=3, out_dtype="int8");
  %15 = clip(%14, a_min=-128f, a_max=127f);
  %16 = qnn.conv2d(%15, %v_param_9, -128, 0, 0.0304951f, meta[relay.Constant][8], padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %17 = nn.bias_add(%16, %v_param_10, axis=3);
  %18 = qnn.requantize(%17, meta[relay.Constant][9], 0, 0.0323921f, -128, axis=3, out_dtype="int8");
  %19 = clip(%18, a_min=-128f, a_max=127f);
  %20 = qnn.conv2d(%19, %v_param_11, -128, 0, 0.0323921f, meta[relay.Constant][10], padding=[1, 1, 1, 1], groups=32, channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %21 = nn.bias_add(%20, %v_param_12, axis=3);
  %22 = qnn.requantize(%21, meta[relay.Constant][11], 0, 0.0403331f, -128, axis=3, out_dtype="int8");
  %23 = clip(%22, a_min=-128f, a_max=127f);
  %24 = qnn.conv2d(%23, %v_param_13, -128, 0, 0.0403331f, meta[relay.Constant][12], padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %25 = nn.bias_add(%24, %v_param_14, axis=3);
  %26 = qnn.requantize(%25, meta[relay.Constant][13], 0, 0.0409983f, -128, axis=3, out_dtype="int8");
  %27 = clip(%26, a_min=-128f, a_max=127f);
  %28 = qnn.conv2d(%27, %v_param_15, -128, 0, 0.0409983f, meta[relay.Constant][14], strides=[2, 2], padding=[0, 0, 1, 1], groups=32, channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %29 = nn.bias_add(%28, %v_param_16, axis=3);
  %30 = qnn.requantize(%29, meta[relay.Constant][15], 0, 0.028606f, -128, axis=3, out_dtype="int8");
  %31 = clip(%30, a_min=-128f, a_max=127f);
  %32 = qnn.conv2d(%31, %v_param_17, -128, 0, 0.028606f, meta[relay.Constant][16], padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %33 = nn.bias_add(%32, %v_param_18, axis=3);
  %34 = qnn.requantize(%33, meta[relay.Constant][17], 0, 0.0312282f, -128, axis=3, out_dtype="int8");
  %35 = clip(%34, a_min=-128f, a_max=127f);
  %36 = qnn.conv2d(%35, %v_param_19, -128, 0, 0.0312282f, meta[relay.Constant][18], padding=[1, 1, 1, 1], groups=64, channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %37 = nn.bias_add(%36, %v_param_20, axis=3);
  %38 = qnn.requantize(%37, meta[relay.Constant][19], 0, 0.0315622f, -128, axis=3, out_dtype="int8");
  %39 = clip(%38, a_min=-128f, a_max=127f);
  %40 = qnn.conv2d(%39, %v_param_21, -128, 0, 0.0315622f, meta[relay.Constant][20], padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %41 = nn.bias_add(%40, %v_param_22, axis=3);
  %42 = qnn.requantize(%41, meta[relay.Constant][21], 0, 0.0296601f, -128, axis=3, out_dtype="int8");
  %43 = clip(%42, a_min=-128f, a_max=127f);
  %44 = qnn.conv2d(%43, %v_param_23, -128, 0, 0.0296601f, meta[relay.Constant][22], strides=[2, 2], padding=[0, 0, 1, 1], groups=64, channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %45 = nn.bias_add(%44, %v_param_24, axis=3);
  %46 = qnn.requantize(%45, meta[relay.Constant][23], 0, 0.0324266f, -128, axis=3, out_dtype="int8");
  %47 = clip(%46, a_min=-128f, a_max=127f);
  %48 = qnn.conv2d(%47, %v_param_25, -128, 0, 0.0324266f, meta[relay.Constant][24], padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %49 = nn.bias_add(%48, %v_param_26, axis=3);
  %50 = qnn.requantize(%49, meta[relay.Constant][25], 0, 0.030614f, -128, axis=3, out_dtype="int8");
  %51 = clip(%50, a_min=-128f, a_max=127f);
  %52 = qnn.conv2d(%51, %v_param_27, -128, 0, 0.030614f, meta[relay.Constant][26], padding=[1, 1, 1, 1], groups=128, channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %53 = nn.bias_add(%52, %v_param_28, axis=3);
  %54 = qnn.requantize(%53, meta[relay.Constant][27], 0, 0.0296805f, -128, axis=3, out_dtype="int8");
  %55 = clip(%54, a_min=-128f, a_max=127f);
  %56 = qnn.conv2d(%55, %v_param_29, -128, 0, 0.0296805f, meta[relay.Constant][28], padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %57 = nn.bias_add(%56, %v_param_30, axis=3);
  %58 = qnn.requantize(%57, meta[relay.Constant][29], 0, 0.0238827f, -128, axis=3, out_dtype="int8");
  %59 = clip(%58, a_min=-128f, a_max=127f);
  %60 = qnn.conv2d(%59, %v_param_31, -128, 0, 0.0238827f, meta[relay.Constant][30], padding=[1, 1, 1, 1], groups=128, channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %61 = nn.bias_add(%60, %v_param_32, axis=3);
  %62 = qnn.requantize(%61, meta[relay.Constant][31], 0, 0.0365413f, -128, axis=3, out_dtype="int8");
  %63 = clip(%62, a_min=-128f, a_max=127f);
  %64 = qnn.conv2d(%63, %v_param_33, -128, 0, 0.0365413f, meta[relay.Constant][32], padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %65 = nn.bias_add(%64, %v_param_34, axis=3);
  %66 = qnn.requantize(%65, meta[relay.Constant][33], 0, 0.0365f, -128, axis=3, out_dtype="int8");
  %67 = clip(%66, a_min=-128f, a_max=127f);
  %68 = qnn.conv2d(%67, %v_param_35, -128, 0, 0.0365f, meta[relay.Constant][34], padding=[1, 1, 1, 1], groups=128, channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %69 = nn.bias_add(%68, %v_param_36, axis=3);
  %70 = qnn.requantize(%69, meta[relay.Constant][35], 0, 0.0378104f, -128, axis=3, out_dtype="int8");
  %71 = clip(%70, a_min=-128f, a_max=127f);
  %72 = qnn.conv2d(%71, %v_param_37, -128, 0, 0.0378104f, meta[relay.Constant][36], padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %73 = nn.bias_add(%72, %v_param_38, axis=3);
  %74 = qnn.requantize(%73, meta[relay.Constant][37], 0, 0.0206044f, -128, axis=3, out_dtype="int8");
  %75 = clip(%74, a_min=-128f, a_max=127f);
  %76 = qnn.conv2d(%75, %v_param_39, -128, 0, 0.0206044f, meta[relay.Constant][38], padding=[1, 1, 1, 1], groups=128, channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %77 = nn.bias_add(%76, %v_param_40, axis=3);
  %78 = qnn.requantize(%77, meta[relay.Constant][39], 0, 0.0332261f, -128, axis=3, out_dtype="int8");
  %79 = clip(%78, a_min=-128f, a_max=127f);
  %80 = qnn.conv2d(%79, %v_param_41, -128, 0, 0.0332261f, meta[relay.Constant][40], padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %81 = nn.bias_add(%80, %v_param_42, axis=3);
  %82 = qnn.requantize(%81, meta[relay.Constant][41], 0, 0.018733f, -128, axis=3, out_dtype="int8");
  %83 = clip(%82, a_min=-128f, a_max=127f);
  %84 = qnn.conv2d(%83, %v_param_43, -128, 0, 0.018733f, meta[relay.Constant][42], padding=[1, 1, 1, 1], groups=128, channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %85 = nn.bias_add(%84, %v_param_44, axis=3);
  %86 = qnn.requantize(%85, meta[relay.Constant][43], 0, 0.0341283f, -128, axis=3, out_dtype="int8");
  %87 = clip(%86, a_min=-128f, a_max=127f);
  %88 = qnn.conv2d(%87, %v_param_45, -128, 0, 0.0341283f, meta[relay.Constant][44], padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %89 = nn.bias_add(%88, %v_param_46, axis=3);
  %90 = qnn.requantize(%89, meta[relay.Constant][45], 0, 0.0188816f, -128, axis=3, out_dtype="int8");
  %91 = clip(%90, a_min=-128f, a_max=127f);
  %92 = qnn.conv2d(%91, %v_param_47, -128, 0, 0.0188816f, meta[relay.Constant][46], strides=[2, 2], padding=[0, 0, 1, 1], groups=128, channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %93 = nn.bias_add(%92, %v_param_48, axis=3);
  %94 = qnn.requantize(%93, meta[relay.Constant][47], 0, 0.0252806f, -128, axis=3, out_dtype="int8");
  %95 = clip(%94, a_min=-128f, a_max=127f);
  %96 = qnn.conv2d(%95, %v_param_49, -128, 0, 0.0252806f, meta[relay.Constant][48], padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %97 = nn.bias_add(%96, %v_param_50, axis=3);
  %98 = qnn.requantize(%97, meta[relay.Constant][49], 0, 0.021838f, -128, axis=3, out_dtype="int8");
  %99 = clip(%98, a_min=-128f, a_max=127f);
  %100 = qnn.conv2d(%99, %v_param_51, -128, 0, 0.021838f, meta[relay.Constant][50], padding=[1, 1, 1, 1], groups=256, channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %101 = nn.bias_add(%100, %v_param_52, axis=3);
  %102 = qnn.requantize(%101, meta[relay.Constant][51], 0, 0.0296261f, -128, axis=3, out_dtype="int8");
  %103 = clip(%102, a_min=-128f, a_max=127f);
  %104 = qnn.conv2d(%103, %v_param_53, -128, 0, 0.0296261f, meta[relay.Constant][52], padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %105 = nn.bias_add(%104, %v_param_54, axis=3);
  %106 = qnn.requantize(%105, meta[relay.Constant][53], 0, 0.0156569f, -128, axis=3, out_dtype="int8");
  %107 = clip(%106, a_min=-128f, a_max=127f);
  %108 = cast(%107, dtype="int32");
  %109 = nn.avg_pool2d(%108, pool_size=[3, 3], strides=[3, 3], padding=[0, 0, 0, 0], layout="NHWC");
  %110 = cast(%109, dtype="int8");
  %111 = reshape(%110, newshape=[-1, 256]);
  %112 = reshape(%111, newshape=[-1, 256]);
  %113 = qnn.dense(%112, %v_param_55, -128, 0, 0.0156569f, 0.00472029f, units=2, out_dtype="int32");
  %114 = nn.bias_add(%113, %v_param_56);
  %115 = qnn.requantize(%114, 7.39052e-05f, 0, 0.0146362f, -5, out_dtype="int8");
  %116 = qnn.dequantize(%115, 0.0146362f, -5);
  %117 = nn.softmax(%116, axis=1);
  qnn.quantize(%117, 0.00390625f, -128, out_dtype="int8")
}

