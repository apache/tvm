/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#[version = "0.0.5"]

/* Defines a Peano (unary) natural number ADT.
    Zero is represented by z(). s(n) adds 1 to a nat n.
    Adds the fields nat, z, and s to the prelude, representing
    (respectively) the nat ADT and the z and s constructors.
*/
type nat {
    zero,
    succ(nat),
}

/*
  Defines a function that doubles a nat. Adds a field called
  'double' to the prelude, giving the GlobalVar pointing to
  the function.
*/
def @nat_double(%x: nat) -> nat {
    match %x {
        zero => zero,
        succ(%y) => succ(succ(@nat_double(%y)))
    }
}

def @nat_add(%x: nat, %y: nat) -> nat {
    match %x {
        zero => %y,
        succ(%z) => succ(@nat_add(%z, %y))
    }
}

/* Defines a function to get the nth eleemnt of a list using
   a nat to index into the list.
*/
def @nat_nth[A](%l: List[A], %n: nat) -> A {
    match %n {
        zero => @hd(%l),
        succ(%y) => @nat_nth(@tl(%l), %y)
    }
}

/* Defines a function to update the nth element of a list and return the updated list. */
def @nat_update[A](%list: List[A], %index: nat, %value: A) -> List[A] {
    match %index {
        zero => Cons(%value, @tl(%list)),
        succ(%index_pred) => @nat_update(@tl(%list), %index_pred, %value)
    }
}

/* Defines a function that takes a number n and a function f;
    returns a closure that takes an argument and applies f
    n times to its argument.
*/
def @nat_iterate[A](%f: fn(A) -> A, %num: nat) -> fn(A) -> A {
    match %num {
        zero => fn(%x: A) -> A { %x },
        succ(%y) => fn (%i: A) { %f(@nat_iterate(%f, %y)(%i)) }
    }
}
