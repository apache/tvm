/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#[version = "0.0.5"]

/*
 * Store the Gradient Value of a Tensor of type T.
 * Note that Gradient of T is stored inside a Ref(GradCell[T]) instead of GradCell[T].
 */
type GradCell[T] {
  Raw(T),
  One(fn() -> T),
  Zero(fn() -> T)
}

def @FromGradCell[T](%g: GradCell[T]) -> T {
  match (%g) {
    Raw(%x) => %x,
    One(%x) => %x(),
    Zero(%x) => %x()
  }
}

def @MultiplyGradCell[T](%multiply: fn(T, T) -> T, %l: GradCell[T], %r: GradCell[T]) -> GradCell[T] {
  match((%l, %r)) {
    (Zero(_), _) => %l,
    (_, Zero(_)) => %r,
    (One(_), _) => %r,
    (_, One(_)) => %l,
    _ => Raw(%multiply(@FromGradCell(%l), @FromGradCell(%r)))
  }
}

def @AddGradCell[T](%add: fn(T, T) -> T, %l: GradCell[T], %r: GradCell[T]) -> GradCell[T] {
  match ((%l, %r)) {
    (Zero(_), _) => %r,
    (_, Zero(_)) => %l,
    _ => Raw(%add(@FromGradCell(%l), @FromGradCell(%r)))
  }
}
