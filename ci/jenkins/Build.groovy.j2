def ci_setup(image) {
  sh (
    script: "${docker_run} ${image} ./tests/scripts/task_clear_pytest.sh",
    label: 'Clean up old workspace',
  )
}

def python_unittest(image) {
  sh (
    script: "${docker_run} ${image} ./tests/scripts/task_python_unittest.sh",
    label: 'Run Python unit tests',
  )
}

def fsim_test(image) {
  sh (
    script: "${docker_run} ${image} ./tests/scripts/task_python_vta_fsim.sh",
    label: 'Run VTA tests in FSIM',
  )
}

def make_standalone_crt(image, build_dir) {
  sh (
    script: """
      set -eux
      ${docker_run} ${image} python3 ./tests/scripts/task_build.py \
        --sccache-bucket tvm-sccache-prod \
        --cmake-target standalone_crt \
        --build-dir build
      ${docker_run} ${image} python3 ./tests/scripts/task_build.py \
        --sccache-bucket tvm-sccache-prod \
        --cmake-target crttest \
        --build-dir build
      """,
    label: 'Make standalone CRT',
  )
}

def make_cpp_tests(image, build_dir) {
  sh (
    script: """
      set -eux
      ${docker_run} ${image} python3 ./tests/scripts/task_build.py \
        --sccache-bucket tvm-sccache-prod \
        --cmake-target cpptest \
        --build-dir ${build_dir}
      """,
    label: 'Make C++ tests',
  )
}

def cmake_build(image, path, make_flag) {
  sh (
    script: "${docker_run} --env CI_NUM_EXECUTORS ${image} ./tests/scripts/task_build.py --sccache-bucket tvm-sccache-prod",
    label: 'Run cmake build',
  )
}

def build() {
stage('Build') {
  environment {
    SKIP_SLOW_TESTS = "${skip_slow_tests}"
  }
  parallel(

  {% call m.build_step(
      name='BUILD: GPU',
      node='CPU-SMALL',
      condition='!skip_ci',
      ws='tvm/build-gpu',
      docker_image='ci_gpu',
    ) %}
    sh "${docker_run} --no-gpu ${ci_gpu} ./tests/scripts/task_config_build_gpu.sh build"
    cmake_build("${ci_gpu} --no-gpu", 'build', '-j2')
    make_standalone_crt("${ci_gpu} --no-gpu", 'build')
    {{ m.upload_artifacts(tag='gpu', filenames=tvm_multilib + tvm_allvisible + microtvm_template_projects + crttest + standalone_crt) }}

    // compiler test
    sh "rm -rf build"
    sh "${docker_run} --no-gpu ${ci_gpu} ./tests/scripts/task_config_build_gpu_other.sh build"
    cmake_build("${ci_gpu} --no-gpu", 'build', '-j2')
    make_standalone_crt("${ci_gpu} --no-gpu", 'build')
    {{ m.upload_artifacts(tag='gpu2', filenames=tvm_lib + crttest + standalone_crt) }}
  {% endcall %}

  {% call m.build_step(
      name='BUILD: CPU',
      node='CPU-SMALL',
      condition='!skip_ci && is_docs_only_build != 1',
      ws='tvm/build-cpu',
      docker_image='ci_cpu',
    ) %}
    sh (
      script: "${docker_run} ${ci_cpu} ./tests/scripts/task_config_build_cpu.sh build",
      label: 'Create CPU cmake config',
    )
    cmake_build(ci_cpu, 'build', '-j2')
    make_standalone_crt(ci_cpu, 'build')
    make_cpp_tests(ci_cpu, 'build')
    {{ m.upload_artifacts(tag='cpu', filenames=tvm_multilib_tsim + tvm_allvisible + crttest + cpptest + standalone_crt) }}
    ci_setup(ci_cpu)
    // sh "${docker_run} ${ci_cpu} ./tests/scripts/task_golang.sh"
    // TODO(@jroesch): need to resolve CI issue will turn back on in follow up patch
    sh (script: "${docker_run} ${ci_cpu} ./tests/scripts/task_rust.sh", label: 'Rust build and test')
  {% endcall %}

  {% call m.build_step(
      name='BUILD: CPU MINIMAL',
      node='CPU-SMALL',
      condition='!skip_ci && is_docs_only_build != 1',
      ws='tvm/build-cpu-minimal',
      docker_image='ci_minimal',
    ) %}
    sh (
      script: "${docker_run} ${ci_minimal} ./tests/scripts/task_config_build_minimal.sh build",
      label: 'Create CPU minimal cmake config',
    )
    cmake_build(ci_minimal, 'build', '-j2')
    make_standalone_crt(ci_minimal, 'build')
    make_cpp_tests(ci_minimal, 'build')
    {{ m.upload_artifacts(tag='cpu-minimal', filenames=tvm_lib + tvm_allvisible + crttest + cpptest + standalone_crt) }}
  {% endcall %}

  {% call m.build_step(
      name='BUILD: WASM',
      node='CPU-SMALL',
      condition='!skip_ci && is_docs_only_build != 1',
      ws='tvm/build-wasm',
      docker_image='ci_wasm',
    ) %}
    sh (
      script: "${docker_run} ${ci_wasm} ./tests/scripts/task_config_build_wasm.sh build",
      label: 'Create WASM cmake config',
    )
    cmake_build(ci_wasm, 'build', '-j2')
    make_standalone_crt(ci_wasm, 'build')
    make_cpp_tests(ci_wasm, 'build')
    cpp_unittest(ci_wasm)
    ci_setup(ci_wasm)
    sh (
      script: "${docker_run} ${ci_wasm} ./tests/scripts/task_web_wasm.sh",
      label: 'Run WASM lint and tests',
    )
  {% endcall %}

  {% call m.build_step(
      name='BUILD: i386',
      node='CPU-SMALL',
      condition='!skip_ci && is_docs_only_build != 1',
      ws='tvm/build-i386',
      docker_image='ci_i386',
    ) %}
    sh (
      script: "${docker_run} ${ci_i386} ./tests/scripts/task_config_build_i386.sh build",
      label: 'Create i386 cmake config',
    )
    cmake_build(ci_i386, 'build', '-j2')
    make_standalone_crt(ci_i386, 'build')
    make_cpp_tests(ci_i386, 'build')
    {{ m.upload_artifacts(tag='i386', filenames=tvm_multilib_tsim + standalone_crt + crttest + cpptest) }}
  {% endcall %}

  {% call m.build_step(
      name='BUILD: arm',
      node='ARM-SMALL',
      condition='!skip_ci && is_docs_only_build != 1',
      ws='tvm/build-arm',
      docker_image='ci_arm',
    ) %}
    sh (
      script: "${docker_run} ${ci_arm} ./tests/scripts/task_config_build_arm.sh build",
      label: 'Create ARM cmake config',
    )
    cmake_build(ci_arm, 'build', '-j4')
    make_standalone_crt(ci_arm, 'build')
    make_cpp_tests(ci_arm, 'build')
    {{ m.upload_artifacts(tag='arm', filenames=tvm_multilib + cpptest + crttest + standalone_crt) }}
  {% endcall %}

  {% call m.build_step(
      name='BUILD: Cortex-M',
      node='CPU-SMALL',
      condition='!skip_ci && is_docs_only_build != 1',
      ws='tvm/build-cortexm',
      docker_image='ci_cortexm',
    ) %}
    sh (
      script: "${docker_run} ${ci_cortexm} ./tests/scripts/task_config_build_cortexm.sh build",
      label: 'Create Cortex-M cmake config',
    )
    cmake_build(ci_cortexm, 'build', '-j2')
    make_standalone_crt(ci_cortexm, 'build')
    make_cpp_tests(ci_cortexm, 'build')
    {{ m.upload_artifacts(tag='cortexm', filenames=tvm_lib + tvm_allvisible + crttest + standalone_crt + cpptest + microtvm_template_projects) }}
  {% endcall %}

  {% call m.build_step(
      name='BUILD: Hexagon',
      node='CPU-SMALL',
      condition='!skip_ci && is_docs_only_build != 1',
      ws='tvm/build-hexagon',
      docker_image='ci_hexagon',
    ) %}
    sh (
      script: "${docker_run} ${ci_hexagon} ./tests/scripts/task_config_build_hexagon.sh build",
      label: 'Create Hexagon cmake config',
    )
    cmake_build(ci_hexagon, 'build', '-j2')
    make_cpp_tests(ci_hexagon, 'build')
    sh (
      script: "${docker_run} ${ci_hexagon} ./tests/scripts/task_build_hexagon_api.sh",
      label: 'Build Hexagon API',
    )
    {{ m.upload_artifacts(tag='hexagon', filenames=tvm_lib + cpptest + hexagon_api) }}
  {% endcall %}

  {% call m.build_step(
      name='BUILD: RISC-V',
      node='CPU-SMALL',
      condition='!skip_ci && is_docs_only_build != 1',
      ws='tvm/build-riscv',
      docker_image='ci_riscv',
    ) %}
    sh (
      script: "${docker_run} ${ci_riscv} ./tests/scripts/task_config_build_riscv.sh build",
      label: 'Create RISC-V cmake config',
    )
    cmake_build(ci_riscv, 'build', '-j2')
    make_standalone_crt(ci_riscv, 'build')
    make_cpp_tests(ci_riscv, 'build')
    {{ m.upload_artifacts(tag='riscv', filenames=tvm_lib + tvm_allvisible + standalone_crt + crttest + cpptest + microtvm_template_projects) }}
  {% endcall %}

  )
}
}
