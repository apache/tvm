// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

{% macro per_exec_ws(folder) -%}
  "workspace/exec_${env.EXECUTOR_NUMBER}/{{ folder }}"
{%- endmacro -%}

{% macro junit_to_s3(test_dir_name) %}
sh(
            script: """
              set -eux
              aws s3 cp --no-progress build/pytest-results s3://${s3_prefix}/pytest-results/{{ test_dir_name }} --recursive
            """,
            label: 'Upload JUnits to S3',
          )
{% endmacro %}

{% macro sharded_test_step(name, num_shards, node, ws, docker_image, platform, test_method_names) %}

{% for shard_index in range(1, num_shards + 1) %}
{% set method_name = "shard_run_" + name.replace(":", "").replace(" ", "-").replace("-", "_") + "_" + shard_index|string + "_of_" + num_shards|string %}
{% set test_dir_name = name.replace(":", "").replace(" ", "-").replace("-", "_")|string %}
def {{ method_name }}() {
  if (!skip_ci && is_docs_only_build != 1) {
    node('{{ node }}') {
      ws({{ per_exec_ws(ws) }}) {
        try {
          docker_init({{ docker_image }})
          init_git()
          timeout(time: max_time, unit: 'MINUTES') {
            withEnv([
              'PLATFORM={{ platform }}',
              'TVM_NUM_SHARDS={{ num_shards }}',
              'TVM_SHARD_INDEX={{ shard_index - 1 }}',
              "SKIP_SLOW_TESTS=${skip_slow_tests}"], {
              {{ caller(shard_index, num_shards) | trim | indent(width=12) }}
            })
          }
        } finally {
          {{ junit_to_s3(test_dir_name) }}
          junit 'build/pytest-results/*.xml'
        }
      }
    }
  } else {
    Utils.markStageSkippedForConditional('{{ name }} {{ shard_index }} of {{ num_shards }}')
  }
}
{% set _ = test_method_names.append((name + " " + shard_index|string + " of " + num_shards|string, method_name)) %}

{% endfor %}
{% endmacro %}

{% macro sharded_lint_step(name, num_shards, docker_image, node, ws) %}
{% for shard_index in range(1, num_shards + 1) %}
  '{{ name }} {{ shard_index }} of {{ num_shards }}': {
    node('{{ node }}') {
      ws({{ per_exec_ws(ws) }}) {
        docker_init({{ docker_image }})
        init_git()
        timeout(time: max_time, unit: 'MINUTES') {
          withEnv([
            'TVM_NUM_SHARDS={{ num_shards }}',
            'TVM_SHARD_INDEX={{ shard_index - 1 }}',
            "SKIP_SLOW_TESTS=${skip_slow_tests}"], {
            {{ caller() | trim | indent(width=6) }}
          })
        }
      }
    }
  },
{% endfor %}
{% endmacro %}

{% macro test_step_body(name, node, ws, docker_image, platform) %}
{% set test_dir_name = name.replace(":", "").replace(" ", "-").replace("-", "_")|string %}
  if (!skip_ci && is_docs_only_build != 1) {
    node('{{ node }}') {
      ws({{ per_exec_ws(ws) }}) {
        timeout(time: max_time, unit: 'MINUTES') {
          try {
            docker_init({{ docker_image }})
            init_git()
            withEnv(['PLATFORM={{ platform }}'], {
              {{ caller() | indent(width=8) | trim }}
            })
          } finally {
            {{ junit_to_s3(test_dir_name) | indent(width=0) }}
            junit 'build/pytest-results/*.xml'
          }
        }
      }
    }
  } else {
    Utils.markStageSkippedForConditional('{{ name }}')
  }
{% endmacro %}

{% macro test_step(name, node, ws, docker_image, platform) %}
{% set test_dir_name = name.replace(":", "").replace(" ", "-").replace("-", "_")|string %}
  '{{ name }}': {
    if (!skip_ci && is_docs_only_build != 1) {
      node('{{ node }}') {
        ws({{ per_exec_ws(ws) }}) {
          timeout(time: max_time, unit: 'MINUTES') {
            try {
              docker_init({{ docker_image }})
              init_git()
              withEnv(['PLATFORM={{ platform }}',
              "SKIP_SLOW_TESTS=${skip_slow_tests}"], {
                {{ caller() | indent(width=12) | trim }}
              })
            } finally {
              {{ junit_to_s3(test_dir_name) | indent(width=4) }}
              junit 'build/pytest-results/*.xml'
            }
          }
        }
      }
    } else {
      Utils.markStageSkippedForConditional('{{ name }}')
    }
  },
{% endmacro %}

{% macro bash_retry() %}
retry() {
  local max_retries=\$1
  shift
  local n=0
  local backoff_max=30
  until [ "\$n" -ge \$max_retries ]
  do
      "\$@" && break
      n=\$((n+1))
      if [ "\$n" -eq \$max_retries ]; then
          echo "failed to update after attempt \$n / \$max_retries, giving up"
          exit 1
      fi

      WAIT=\$(python3 -c 'import random; print(random.randint(10, 30))')
      echo "failed to update \$n / \$max_retries, waiting \$WAIT to try again"
      sleep \$WAIT
  done
}
{% endmacro %}

{% macro deploy_step(name, feature_flag, ws) %}
  '{{ name }}': {
    if ({{ feature_flag }}) {
      node('CPU') {
        ws({{ per_exec_ws(ws) }}) {
          timeout(time: max_time, unit: 'MINUTES') {
            {{ caller() | indent(width=10) | trim }}
          }
        }
      }
    } else {
      Utils.markStageSkippedForConditional('{{ name }}')
    }
  },
{% endmacro %}

{% macro upload_artifacts(tag, filenames, folders=None) %}
sh(
            script: """
              set -eux
              {{ bash_retry() | indent(width=14) }}
              {% for filename in filenames %}
              md5sum {{ filename }}
              retry 3 aws s3 cp --no-progress {{ filename }} s3://${s3_prefix}/{{ tag }}/{{ filename }}
              {% endfor %}
              {% for folder in (folders or []) %}
              retry 3 aws s3 cp --no-progress {{ folder }} s3://${s3_prefix}/{{ tag }}/{{ folder }} --recursive
              {% endfor %}
            """,
            label: 'Upload artifacts to S3',
          )
{% endmacro %}

{% macro download_artifacts(tag, filenames, folders=None) %}
sh(
            script: """
              set -eux
              {{ bash_retry() | indent(width=14) }}
              {% for filename in filenames %}
              retry 3 aws s3 cp --no-progress s3://${s3_prefix}/{{ tag }}/{{ filename }} {{ filename }}
              md5sum {{ filename }}
              {% endfor %}
              {% for folder in (folders or []) %}
              retry 3 aws s3 cp --no-progress s3://${s3_prefix}/{{ tag }}/{{ folder }} {{ folder }} --recursive
              {% endfor %}
            """,
            label: 'Download artifacts from S3',
          )
{% endmacro %}
