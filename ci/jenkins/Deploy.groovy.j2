/*
stage('Build packages') {
  parallel 'conda CPU': {
    node('CPU') {
      sh "${docker_run} tlcpack/conda-cpu ./conda/build_cpu.sh
    }
  },
  'conda cuda': {
    node('CPU') {
      sh "${docker_run} tlcpack/conda-cuda90 ./conda/build_cuda.sh
      sh "${docker_run} tlcpack/conda-cuda100 ./conda/build_cuda.sh
    }
  }
// Here we could upload the packages to anaconda for releases
// and/or the main branch
}
*/


def update_docker(ecr_image, hub_image) {
  if (ecr_image == null) {
    sh("image was not rebuilt, skipping")
    return
  }
  if (!ecr_image.contains("amazonaws.com")) {
    sh("echo \"Skipping '${ecr_image}' -> '${hub_image}' since it doesn\'t look like an ECR image\"")
    return
  }
  docker_init(ecr_image)
  sh(
    script: """
    set -eux
    . ci/scripts/retry.sh
    docker tag \
      ${ecr_image} \
      ${hub_image}
    retry 5 docker push ${hub_image}
    """,
    label: "Update ${hub_image} on Docker Hub",
  )
}

def deploy_docs() {
  // Note: This code must stay in the Jenkinsfile to ensure that it runs
  // from a trusted context only
  sh(
    script: '''
      set -eux
      rm -rf tvm-site
      git clone -b $DOCS_DEPLOY_BRANCH --depth=1 https://github.com/apache/tvm-site
      cd tvm-site
      git status
      git checkout -B $DOCS_DEPLOY_BRANCH

      git ls-tree HEAD docs/ --name-only | grep -vP '^docs/v\\d' | xargs rm -rf
      mkdir -p docs
      tar xf ../docs.tgz -C docs
      COMMIT=$(cat docs/commit_hash)
      git add .
      git config user.name tvm-bot
      git config user.email 95660001+tvm-bot@users.noreply.github.com
      git commit -m"deploying docs (apache/tvm@$COMMIT)"
      git status
    ''',
    label: 'Unpack docs and update tvm-site'
  )

  withCredentials([string(
    credentialsId: 'docs-push-token',
    variable: 'GITHUB_TOKEN',
    )]) {
    sh(
      script: '''
        cd tvm-site
        git remote add deploy https://$GITHUB_TOKEN:x-oauth-basic@github.com/apache/tvm-site.git
        git push deploy $DOCS_DEPLOY_BRANCH || true
      ''',
      label: 'Upload docs to apache/tvm-site'
    )
  }
}


def deploy() {
  stage('Deploy') {
    if (env.BRANCH_NAME == 'main') {
      parallel(
        {% call m.deploy_step(
          name="Deploy Docs",
          feature_flag="env.DOCS_DEPLOY_ENABLED == 'yes'",
          ws="tvm/deploy-docs",
        ) %}
          init_git()
          {{ m.download_artifacts(tag='docs', filenames=["docs.tgz"]) }}
          deploy_docs()
        {% endcall %}
        {% call m.deploy_step(
          name="Upload built Docker images",
          feature_flag="env.DEPLOY_DOCKER_IMAGES == 'yes' && rebuild_docker_images && upstream_revision != null",
          ws="tvm/deploy-docker",
        ) %}
          init_git()
          try {
            withCredentials([string(
              credentialsId: 'dockerhub-tlcpackstaging-key',
              variable: 'DOCKERHUB_KEY',
            )]) {
              sh(
                script: 'docker login -u tlcpackstaging -p ${DOCKERHUB_KEY}',
                label: 'Log in to Docker Hub',
              )
            }
            def date_Ymd_HMS = sh(
              script: 'python3 -c \'import datetime; print(datetime.datetime.now().strftime("%Y%m%d-%H%M%S"))\'',
              label: 'Determine date',
              returnStdout: true,
            ).trim()
            def tag = "${date_Ymd_HMS}-${upstream_revision.substring(0, 8)}"
            {% for image in images %}
            update_docker(built_{{ image.name }}, "tlcpackstaging/{{ image.name }}:${tag}")
            {% endfor %}
          } finally {
            sh(
              script: 'docker logout',
              label: 'Clean up login credentials'
            )
          }
        {% endcall %}
        {% call m.deploy_step(
          name="Tag tlcpackstaging to tlcpack",
          feature_flag="env.DOCS_DEPLOY_ENABLED == 'yes'",
          ws="tvm/tag-images",
        ) %}
          init_git()
          withCredentials([string(
            credentialsId: 'dockerhub-tlcpack-key',
            variable: 'TLCPACK_TOKEN',
          )]) {
            try {
              sh(
                script: 'echo $TLCPACK_TOKEN | docker login --username octomldriazati --password-stdin',
                label: 'Log in to Docker Hub'
              )
              {% for image in images %}
              if ({{ image.name }}.contains("tlcpackstaging")) {
                // Push image to tlcpack
                def tag = {{ image.name }}.split(":")[1]
                sh(
                  script: """
                    set -eux
                    . ci/scripts/retry.sh
                    docker pull tlcpackstaging/{{ image.name }}:${tag}
                    docker tag tlcpackstaging/{{ image.name }}:${tag} tlcpack/{{ image.name.replace("_", "-") }}:${tag}
                    retry 5 docker push tlcpack/{{ image.name.replace("_", "-") }}:${tag}
                  """,
                  label: 'Tag tlcpackstaging/{{ image.name }} image to tlcpack',
                )
              }
              {% endfor %}
            } finally {
              sh(
                script: 'docker logout',
                label: 'Clean up login credentials'
              )
            }
          }
        {% endcall %}
      )
    }
  }
}
