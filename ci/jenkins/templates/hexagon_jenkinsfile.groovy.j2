{% include "utils/base.groovy.j2" with context %}
{% import 'utils/macros.j2' as m with context -%}

{% call m.invoke_build(
  name='BUILD: Hexagon',
  node='CPU-SMALL',
  condition='!skip_ci && is_docs_only_build != 1',
  ws='tvm/build-hexagon',
  docker_image='ci_hexagon',
) %}
  sh (
    script: "${docker_run} ${ci_hexagon} ./tests/scripts/task_config_build_hexagon.sh build",
    label: 'Create Hexagon cmake config',
  )
  cmake_build(ci_hexagon, 'build', '-j2')
  make_cpp_tests(ci_hexagon, 'build')
  sh (
    script: "${docker_run} ${ci_hexagon} ./tests/scripts/task_build_hexagon_api.sh",
    label: 'Build Hexagon API',
  )
  {{ m.upload_artifacts(tag='hexagon', filenames=tvm_lib + cpptest + hexagon_api) }}
{% endcall %}


{% set test_method_names = [] %}

{% call(shard_index, num_shards) m.sharded_test_step(
  name="test: Hexagon",
  node="CPU-SMALL",
  ws="tvm/test-hexagon",
  platform="hexagon",
  docker_image="ci_hexagon",
  test_method_names=test_method_names,
  num_shards=8,
) %}
  {{ m.download_artifacts(tag='hexagon') }}
  ci_setup(ci_hexagon)
  {% if shard_index == 1 %}
  cpp_unittest(ci_hexagon)
  {% endif %}
  sh (
    script: "${docker_run} ${ci_hexagon} ./tests/scripts/task_python_hexagon.sh",
    label: 'Run Hexagon tests',
  )
{% endcall %}

{{ m.invoke_tests(test_method_names) -}}
