#include "tvm/runtime/c_runtime_api.h"
#include "tvm/runtime/c_backend_api.h"
#include "tvm/runtime/micro/utvm_device_lib.h"
extern void* __tvm_module_ctx = NULL;
#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_nn_conv2d_3( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 3))) {
    TVMAPISetLastError("fused_nn_conv2d_3: num_args should be 3");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (8 == ((int32_t)arg0_strides[2]))) && (64 == ((int32_t)arg0_strides[1]))) && (16384 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg1_strides[3])) && (1 == ((int32_t)arg1_strides[2]))) && (1 == ((int32_t)arg1_strides[1]))) && (256 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* output_unpack = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg2_strides[3])) && (4 == ((int32_t)arg2_strides[2]))) && (16 == ((int32_t)arg2_strides[1]))) && (8192 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_3: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_3: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_3: Expect arg[2] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 256))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 8))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 8))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 512))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 256))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[3]) == 1))) {
    TVMAPISetLastError("Argument arg1.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 512))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 4))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[3]) == 4))) {
    TVMAPISetLastError("Argument arg2.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  void* data_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)50176, 2, 32);
  if (data_vec == NULL) {
    return -1;
  }
  void* kernel_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)524288, 2, 32);
  if (kernel_vec == NULL) {
    return -1;
  }
  for (int32_t C_h_fused = 0; C_h_fused < 224; ++C_h_fused) {
    for (int32_t c = 0; c < 8; ++c) {
      for (int32_t w = 0; w < 7; ++w) {
        (( float*)data_vec)[((((C_h_fused * 8) + c) * 7) + w)] = placeholder[(((((((C_h_fused / 7) * 8) + c) * 8) + (C_h_fused % 7)) * 8) + w)];
      }
    }
  }
  for (int32_t CO_h_fused = 0; CO_h_fused < 64; ++CO_h_fused) {
    for (int32_t CI = 0; CI < 32; ++CI) {
      for (int32_t ci = 0; ci < 8; ++ci) {
        for (int32_t co = 0; co < 8; ++co) {
          (( float*)kernel_vec)[((((((CO_h_fused * 32) + CI) * 8) + ci) * 8) + co)] = placeholder1[((((((CO_h_fused * 8) + co) * 32) + CI) * 8) + ci)];
        }
      }
    }
  }
  for (int32_t c_outer_h_outer_fused = 0; c_outer_h_outer_fused < 64; ++c_outer_h_outer_fused) {
     float conv_global[128];
    for (int32_t oc_block_c_init = 0; oc_block_c_init < 8; ++oc_block_c_init) {
      conv_global[oc_block_c_init] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init1 = 0; oc_block_c_init1 < 8; ++oc_block_c_init1) {
      conv_global[(oc_block_c_init1 + 8)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init2 = 0; oc_block_c_init2 < 8; ++oc_block_c_init2) {
      conv_global[(oc_block_c_init2 + 16)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init3 = 0; oc_block_c_init3 < 8; ++oc_block_c_init3) {
      conv_global[(oc_block_c_init3 + 24)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init4 = 0; oc_block_c_init4 < 8; ++oc_block_c_init4) {
      conv_global[(oc_block_c_init4 + 32)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init5 = 0; oc_block_c_init5 < 8; ++oc_block_c_init5) {
      conv_global[(oc_block_c_init5 + 40)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init6 = 0; oc_block_c_init6 < 8; ++oc_block_c_init6) {
      conv_global[(oc_block_c_init6 + 48)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init7 = 0; oc_block_c_init7 < 8; ++oc_block_c_init7) {
      conv_global[(oc_block_c_init7 + 56)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init8 = 0; oc_block_c_init8 < 8; ++oc_block_c_init8) {
      conv_global[(oc_block_c_init8 + 64)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init9 = 0; oc_block_c_init9 < 8; ++oc_block_c_init9) {
      conv_global[(oc_block_c_init9 + 72)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init10 = 0; oc_block_c_init10 < 8; ++oc_block_c_init10) {
      conv_global[(oc_block_c_init10 + 80)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init11 = 0; oc_block_c_init11 < 8; ++oc_block_c_init11) {
      conv_global[(oc_block_c_init11 + 88)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init12 = 0; oc_block_c_init12 < 8; ++oc_block_c_init12) {
      conv_global[(oc_block_c_init12 + 96)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init13 = 0; oc_block_c_init13 < 8; ++oc_block_c_init13) {
      conv_global[(oc_block_c_init13 + 104)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init14 = 0; oc_block_c_init14 < 8; ++oc_block_c_init14) {
      conv_global[(oc_block_c_init14 + 112)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init15 = 0; oc_block_c_init15 < 8; ++oc_block_c_init15) {
      conv_global[(oc_block_c_init15 + 120)] = 0.000000e+00f;
    }
    for (int32_t ic_outer = 0; ic_outer < 32; ++ic_outer) {
      for (int32_t ic_inner = 0; ic_inner < 8; ++ic_inner) {
        for (int32_t oc_block_c = 0; oc_block_c < 8; ++oc_block_c) {
          conv_global[oc_block_c] = (conv_global[oc_block_c] + ((( float*)data_vec)[(((ic_outer * 56) + ic_inner) * 7)] * (( float*)kernel_vec)[((((((c_outer_h_outer_fused * 32) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c)]));
        }
        for (int32_t oc_block_c1 = 0; oc_block_c1 < 8; ++oc_block_c1) {
          conv_global[(oc_block_c1 + 8)] = (conv_global[(oc_block_c1 + 8)] + ((( float*)data_vec)[((((ic_outer * 56) + ic_inner) * 7) + 2)] * (( float*)kernel_vec)[((((((c_outer_h_outer_fused * 32) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c1)]));
        }
        for (int32_t oc_block_c2 = 0; oc_block_c2 < 8; ++oc_block_c2) {
          conv_global[(oc_block_c2 + 16)] = (conv_global[(oc_block_c2 + 16)] + ((( float*)data_vec)[((((ic_outer * 56) + ic_inner) * 7) + 4)] * (( float*)kernel_vec)[((((((c_outer_h_outer_fused * 32) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c2)]));
        }
        for (int32_t oc_block_c3 = 0; oc_block_c3 < 8; ++oc_block_c3) {
          conv_global[(oc_block_c3 + 24)] = (conv_global[(oc_block_c3 + 24)] + ((( float*)data_vec)[((((ic_outer * 56) + ic_inner) * 7) + 6)] * (( float*)kernel_vec)[((((((c_outer_h_outer_fused * 32) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c3)]));
        }
        for (int32_t oc_block_c4 = 0; oc_block_c4 < 8; ++oc_block_c4) {
          conv_global[(oc_block_c4 + 32)] = (conv_global[(oc_block_c4 + 32)] + ((( float*)data_vec)[((((ic_outer * 56) + ic_inner) * 7) + 112)] * (( float*)kernel_vec)[((((((c_outer_h_outer_fused * 32) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c4)]));
        }
        for (int32_t oc_block_c5 = 0; oc_block_c5 < 8; ++oc_block_c5) {
          conv_global[(oc_block_c5 + 40)] = (conv_global[(oc_block_c5 + 40)] + ((( float*)data_vec)[((((ic_outer * 56) + ic_inner) * 7) + 114)] * (( float*)kernel_vec)[((((((c_outer_h_outer_fused * 32) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c5)]));
        }
        for (int32_t oc_block_c6 = 0; oc_block_c6 < 8; ++oc_block_c6) {
          conv_global[(oc_block_c6 + 48)] = (conv_global[(oc_block_c6 + 48)] + ((( float*)data_vec)[((((ic_outer * 56) + ic_inner) * 7) + 116)] * (( float*)kernel_vec)[((((((c_outer_h_outer_fused * 32) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c6)]));
        }
        for (int32_t oc_block_c7 = 0; oc_block_c7 < 8; ++oc_block_c7) {
          conv_global[(oc_block_c7 + 56)] = (conv_global[(oc_block_c7 + 56)] + ((( float*)data_vec)[((((ic_outer * 56) + ic_inner) * 7) + 118)] * (( float*)kernel_vec)[((((((c_outer_h_outer_fused * 32) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c7)]));
        }
        for (int32_t oc_block_c8 = 0; oc_block_c8 < 8; ++oc_block_c8) {
          conv_global[(oc_block_c8 + 64)] = (conv_global[(oc_block_c8 + 64)] + ((( float*)data_vec)[((((ic_outer * 56) + ic_inner) * 7) + 224)] * (( float*)kernel_vec)[((((((c_outer_h_outer_fused * 32) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c8)]));
        }
        for (int32_t oc_block_c9 = 0; oc_block_c9 < 8; ++oc_block_c9) {
          conv_global[(oc_block_c9 + 72)] = (conv_global[(oc_block_c9 + 72)] + ((( float*)data_vec)[((((ic_outer * 56) + ic_inner) * 7) + 226)] * (( float*)kernel_vec)[((((((c_outer_h_outer_fused * 32) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c9)]));
        }
        for (int32_t oc_block_c10 = 0; oc_block_c10 < 8; ++oc_block_c10) {
          conv_global[(oc_block_c10 + 80)] = (conv_global[(oc_block_c10 + 80)] + ((( float*)data_vec)[((((ic_outer * 56) + ic_inner) * 7) + 228)] * (( float*)kernel_vec)[((((((c_outer_h_outer_fused * 32) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c10)]));
        }
        for (int32_t oc_block_c11 = 0; oc_block_c11 < 8; ++oc_block_c11) {
          conv_global[(oc_block_c11 + 88)] = (conv_global[(oc_block_c11 + 88)] + ((( float*)data_vec)[((((ic_outer * 56) + ic_inner) * 7) + 230)] * (( float*)kernel_vec)[((((((c_outer_h_outer_fused * 32) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c11)]));
        }
        for (int32_t oc_block_c12 = 0; oc_block_c12 < 8; ++oc_block_c12) {
          conv_global[(oc_block_c12 + 96)] = (conv_global[(oc_block_c12 + 96)] + ((( float*)data_vec)[((((ic_outer * 56) + ic_inner) * 7) + 336)] * (( float*)kernel_vec)[((((((c_outer_h_outer_fused * 32) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c12)]));
        }
        for (int32_t oc_block_c13 = 0; oc_block_c13 < 8; ++oc_block_c13) {
          conv_global[(oc_block_c13 + 104)] = (conv_global[(oc_block_c13 + 104)] + ((( float*)data_vec)[((((ic_outer * 56) + ic_inner) * 7) + 338)] * (( float*)kernel_vec)[((((((c_outer_h_outer_fused * 32) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c13)]));
        }
        for (int32_t oc_block_c14 = 0; oc_block_c14 < 8; ++oc_block_c14) {
          conv_global[(oc_block_c14 + 112)] = (conv_global[(oc_block_c14 + 112)] + ((( float*)data_vec)[((((ic_outer * 56) + ic_inner) * 7) + 340)] * (( float*)kernel_vec)[((((((c_outer_h_outer_fused * 32) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c14)]));
        }
        for (int32_t oc_block_c15 = 0; oc_block_c15 < 8; ++oc_block_c15) {
          conv_global[(oc_block_c15 + 120)] = (conv_global[(oc_block_c15 + 120)] + ((( float*)data_vec)[((((ic_outer * 56) + ic_inner) * 7) + 342)] * (( float*)kernel_vec)[((((((c_outer_h_outer_fused * 32) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c15)]));
        }
      }
    }
    for (int32_t h_inner = 0; h_inner < 4; ++h_inner) {
      for (int32_t w_inner = 0; w_inner < 4; ++w_inner) {
        for (int32_t c_inner = 0; c_inner < 8; ++c_inner) {
          output_unpack[((((((c_outer_h_outer_fused * 8) + c_inner) * 4) + h_inner) * 4) + w_inner)] = conv_global[((((h_inner * 4) + w_inner) * 8) + c_inner)];
        }
      }
    }
  }
  if (TVMBackendFreeWorkspace(1, dev_id, kernel_vec) != 0) {
    return -1;
  }
  if (TVMBackendFreeWorkspace(1, dev_id, data_vec) != 0) {
    return -1;
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_nn_conv2d_2( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 3))) {
    TVMAPISetLastError("fused_nn_conv2d_2: num_args should be 3");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (16 == ((int32_t)arg0_strides[2]))) && (256 == ((int32_t)arg0_strides[1]))) && (32768 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg1_strides[3])) && (1 == ((int32_t)arg1_strides[2]))) && (1 == ((int32_t)arg1_strides[1]))) && (128 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* output_unpack = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg2_strides[3])) && (8 == ((int32_t)arg2_strides[2]))) && (64 == ((int32_t)arg2_strides[1]))) && (16384 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_2: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_2: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_2: Expect arg[2] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 128))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 16))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 16))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 256))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 128))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[3]) == 1))) {
    TVMAPISetLastError("Argument arg1.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 256))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 8))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[3]) == 8))) {
    TVMAPISetLastError("Argument arg2.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  void* data_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)115200, 2, 32);
  if (data_vec == NULL) {
    return -1;
  }
  void* kernel_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)131072, 2, 32);
  if (kernel_vec == NULL) {
    return -1;
  }
  for (int32_t C_h_fused = 0; C_h_fused < 240; ++C_h_fused) {
    for (int32_t c = 0; c < 8; ++c) {
      for (int32_t w = 0; w < 15; ++w) {
        (( float*)data_vec)[((((C_h_fused * 8) + c) * 15) + w)] = placeholder[(((((((C_h_fused / 15) * 8) + c) * 16) + (C_h_fused % 15)) * 16) + w)];
      }
    }
  }
  for (int32_t CO_h_fused = 0; CO_h_fused < 32; ++CO_h_fused) {
    for (int32_t CI = 0; CI < 16; ++CI) {
      for (int32_t ci = 0; ci < 8; ++ci) {
        for (int32_t co = 0; co < 8; ++co) {
          (( float*)kernel_vec)[((((((CO_h_fused * 16) + CI) * 8) + ci) * 8) + co)] = placeholder1[((((((CO_h_fused * 8) + co) * 16) + CI) * 8) + ci)];
        }
      }
    }
  }
  for (int32_t c_outer_h_outer_fused = 0; c_outer_h_outer_fused < 128; ++c_outer_h_outer_fused) {
     float conv_global[128];
    for (int32_t oc_block_c_init = 0; oc_block_c_init < 8; ++oc_block_c_init) {
      conv_global[oc_block_c_init] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init1 = 0; oc_block_c_init1 < 8; ++oc_block_c_init1) {
      conv_global[(oc_block_c_init1 + 8)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init2 = 0; oc_block_c_init2 < 8; ++oc_block_c_init2) {
      conv_global[(oc_block_c_init2 + 16)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init3 = 0; oc_block_c_init3 < 8; ++oc_block_c_init3) {
      conv_global[(oc_block_c_init3 + 24)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init4 = 0; oc_block_c_init4 < 8; ++oc_block_c_init4) {
      conv_global[(oc_block_c_init4 + 32)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init5 = 0; oc_block_c_init5 < 8; ++oc_block_c_init5) {
      conv_global[(oc_block_c_init5 + 40)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init6 = 0; oc_block_c_init6 < 8; ++oc_block_c_init6) {
      conv_global[(oc_block_c_init6 + 48)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init7 = 0; oc_block_c_init7 < 8; ++oc_block_c_init7) {
      conv_global[(oc_block_c_init7 + 56)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init8 = 0; oc_block_c_init8 < 8; ++oc_block_c_init8) {
      conv_global[(oc_block_c_init8 + 64)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init9 = 0; oc_block_c_init9 < 8; ++oc_block_c_init9) {
      conv_global[(oc_block_c_init9 + 72)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init10 = 0; oc_block_c_init10 < 8; ++oc_block_c_init10) {
      conv_global[(oc_block_c_init10 + 80)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init11 = 0; oc_block_c_init11 < 8; ++oc_block_c_init11) {
      conv_global[(oc_block_c_init11 + 88)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init12 = 0; oc_block_c_init12 < 8; ++oc_block_c_init12) {
      conv_global[(oc_block_c_init12 + 96)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init13 = 0; oc_block_c_init13 < 8; ++oc_block_c_init13) {
      conv_global[(oc_block_c_init13 + 104)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init14 = 0; oc_block_c_init14 < 8; ++oc_block_c_init14) {
      conv_global[(oc_block_c_init14 + 112)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init15 = 0; oc_block_c_init15 < 8; ++oc_block_c_init15) {
      conv_global[(oc_block_c_init15 + 120)] = 0.000000e+00f;
    }
    for (int32_t ic_outer = 0; ic_outer < 16; ++ic_outer) {
      for (int32_t ic_inner = 0; ic_inner < 8; ++ic_inner) {
        for (int32_t oc_block_c = 0; oc_block_c < 8; ++oc_block_c) {
          conv_global[oc_block_c] = (conv_global[oc_block_c] + ((( float*)data_vec)[(((ic_outer * 1800) + ((c_outer_h_outer_fused % 4) * 480)) + (ic_inner * 15))] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 4) * 16) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c)]));
        }
        for (int32_t oc_block_c1 = 0; oc_block_c1 < 8; ++oc_block_c1) {
          conv_global[(oc_block_c1 + 8)] = (conv_global[(oc_block_c1 + 8)] + ((( float*)data_vec)[((((ic_outer * 1800) + ((c_outer_h_outer_fused % 4) * 480)) + (ic_inner * 15)) + 2)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 4) * 16) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c1)]));
        }
        for (int32_t oc_block_c2 = 0; oc_block_c2 < 8; ++oc_block_c2) {
          conv_global[(oc_block_c2 + 16)] = (conv_global[(oc_block_c2 + 16)] + ((( float*)data_vec)[((((ic_outer * 1800) + ((c_outer_h_outer_fused % 4) * 480)) + (ic_inner * 15)) + 4)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 4) * 16) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c2)]));
        }
        for (int32_t oc_block_c3 = 0; oc_block_c3 < 8; ++oc_block_c3) {
          conv_global[(oc_block_c3 + 24)] = (conv_global[(oc_block_c3 + 24)] + ((( float*)data_vec)[((((ic_outer * 1800) + ((c_outer_h_outer_fused % 4) * 480)) + (ic_inner * 15)) + 6)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 4) * 16) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c3)]));
        }
        for (int32_t oc_block_c4 = 0; oc_block_c4 < 8; ++oc_block_c4) {
          conv_global[(oc_block_c4 + 32)] = (conv_global[(oc_block_c4 + 32)] + ((( float*)data_vec)[((((ic_outer * 1800) + ((c_outer_h_outer_fused % 4) * 480)) + (ic_inner * 15)) + 8)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 4) * 16) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c4)]));
        }
        for (int32_t oc_block_c5 = 0; oc_block_c5 < 8; ++oc_block_c5) {
          conv_global[(oc_block_c5 + 40)] = (conv_global[(oc_block_c5 + 40)] + ((( float*)data_vec)[((((ic_outer * 1800) + ((c_outer_h_outer_fused % 4) * 480)) + (ic_inner * 15)) + 10)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 4) * 16) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c5)]));
        }
        for (int32_t oc_block_c6 = 0; oc_block_c6 < 8; ++oc_block_c6) {
          conv_global[(oc_block_c6 + 48)] = (conv_global[(oc_block_c6 + 48)] + ((( float*)data_vec)[((((ic_outer * 1800) + ((c_outer_h_outer_fused % 4) * 480)) + (ic_inner * 15)) + 12)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 4) * 16) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c6)]));
        }
        for (int32_t oc_block_c7 = 0; oc_block_c7 < 8; ++oc_block_c7) {
          conv_global[(oc_block_c7 + 56)] = (conv_global[(oc_block_c7 + 56)] + ((( float*)data_vec)[((((ic_outer * 1800) + ((c_outer_h_outer_fused % 4) * 480)) + (ic_inner * 15)) + 14)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 4) * 16) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c7)]));
        }
        for (int32_t oc_block_c8 = 0; oc_block_c8 < 8; ++oc_block_c8) {
          conv_global[(oc_block_c8 + 64)] = (conv_global[(oc_block_c8 + 64)] + ((( float*)data_vec)[((((ic_outer * 1800) + ((c_outer_h_outer_fused % 4) * 480)) + (ic_inner * 15)) + 240)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 4) * 16) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c8)]));
        }
        for (int32_t oc_block_c9 = 0; oc_block_c9 < 8; ++oc_block_c9) {
          conv_global[(oc_block_c9 + 72)] = (conv_global[(oc_block_c9 + 72)] + ((( float*)data_vec)[((((ic_outer * 1800) + ((c_outer_h_outer_fused % 4) * 480)) + (ic_inner * 15)) + 242)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 4) * 16) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c9)]));
        }
        for (int32_t oc_block_c10 = 0; oc_block_c10 < 8; ++oc_block_c10) {
          conv_global[(oc_block_c10 + 80)] = (conv_global[(oc_block_c10 + 80)] + ((( float*)data_vec)[((((ic_outer * 1800) + ((c_outer_h_outer_fused % 4) * 480)) + (ic_inner * 15)) + 244)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 4) * 16) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c10)]));
        }
        for (int32_t oc_block_c11 = 0; oc_block_c11 < 8; ++oc_block_c11) {
          conv_global[(oc_block_c11 + 88)] = (conv_global[(oc_block_c11 + 88)] + ((( float*)data_vec)[((((ic_outer * 1800) + ((c_outer_h_outer_fused % 4) * 480)) + (ic_inner * 15)) + 246)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 4) * 16) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c11)]));
        }
        for (int32_t oc_block_c12 = 0; oc_block_c12 < 8; ++oc_block_c12) {
          conv_global[(oc_block_c12 + 96)] = (conv_global[(oc_block_c12 + 96)] + ((( float*)data_vec)[((((ic_outer * 1800) + ((c_outer_h_outer_fused % 4) * 480)) + (ic_inner * 15)) + 248)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 4) * 16) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c12)]));
        }
        for (int32_t oc_block_c13 = 0; oc_block_c13 < 8; ++oc_block_c13) {
          conv_global[(oc_block_c13 + 104)] = (conv_global[(oc_block_c13 + 104)] + ((( float*)data_vec)[((((ic_outer * 1800) + ((c_outer_h_outer_fused % 4) * 480)) + (ic_inner * 15)) + 250)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 4) * 16) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c13)]));
        }
        for (int32_t oc_block_c14 = 0; oc_block_c14 < 8; ++oc_block_c14) {
          conv_global[(oc_block_c14 + 112)] = (conv_global[(oc_block_c14 + 112)] + ((( float*)data_vec)[((((ic_outer * 1800) + ((c_outer_h_outer_fused % 4) * 480)) + (ic_inner * 15)) + 252)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 4) * 16) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c14)]));
        }
        for (int32_t oc_block_c15 = 0; oc_block_c15 < 8; ++oc_block_c15) {
          conv_global[(oc_block_c15 + 120)] = (conv_global[(oc_block_c15 + 120)] + ((( float*)data_vec)[((((ic_outer * 1800) + ((c_outer_h_outer_fused % 4) * 480)) + (ic_inner * 15)) + 254)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 4) * 16) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c15)]));
        }
      }
    }
    for (int32_t h_inner = 0; h_inner < 2; ++h_inner) {
      for (int32_t w_inner = 0; w_inner < 8; ++w_inner) {
        for (int32_t c_inner = 0; c_inner < 8; ++c_inner) {
          output_unpack[(((((((((c_outer_h_outer_fused / 4) * 8) + c_inner) * 4) + (c_outer_h_outer_fused % 4)) * 2) + h_inner) * 8) + w_inner)] = conv_global[((((h_inner * 8) + w_inner) * 8) + c_inner)];
        }
      }
    }
  }
  if (TVMBackendFreeWorkspace(1, dev_id, kernel_vec) != 0) {
    return -1;
  }
  if (TVMBackendFreeWorkspace(1, dev_id, data_vec) != 0) {
    return -1;
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_nn_conv2d_1( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 3))) {
    TVMAPISetLastError("fused_nn_conv2d_1: num_args should be 3");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (32 == ((int32_t)arg0_strides[2]))) && (1024 == ((int32_t)arg0_strides[1]))) && (65536 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg1_strides[3])) && (1 == ((int32_t)arg1_strides[2]))) && (1 == ((int32_t)arg1_strides[1]))) && (64 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* output_unpack = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg2_strides[3])) && (16 == ((int32_t)arg2_strides[2]))) && (256 == ((int32_t)arg2_strides[1]))) && (32768 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_1: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_1: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_1: Expect arg[2] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 64))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 32))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 32))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 128))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 64))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[3]) == 1))) {
    TVMAPISetLastError("Argument arg1.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 128))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 16))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[3]) == 16))) {
    TVMAPISetLastError("Argument arg2.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  void* data_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)246016, 2, 32);
  if (data_vec == NULL) {
    return -1;
  }
  void* kernel_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)32768, 2, 32);
  if (kernel_vec == NULL) {
    return -1;
  }
  for (int32_t C_h_fused = 0; C_h_fused < 248; ++C_h_fused) {
    for (int32_t c = 0; c < 8; ++c) {
      for (int32_t w = 0; w < 31; ++w) {
        (( float*)data_vec)[((((C_h_fused * 8) + c) * 31) + w)] = placeholder[(((((((C_h_fused / 31) * 8) + c) * 32) + (C_h_fused % 31)) * 32) + w)];
      }
    }
  }
  for (int32_t CO_h_fused = 0; CO_h_fused < 16; ++CO_h_fused) {
    for (int32_t CI = 0; CI < 8; ++CI) {
      for (int32_t ci = 0; ci < 8; ++ci) {
        for (int32_t co = 0; co < 8; ++co) {
          (( float*)kernel_vec)[((((((CO_h_fused * 8) + CI) * 8) + ci) * 8) + co)] = placeholder1[((((((CO_h_fused * 8) + co) * 8) + CI) * 8) + ci)];
        }
      }
    }
  }
  for (int32_t c_outer_h_outer_fused = 0; c_outer_h_outer_fused < 256; ++c_outer_h_outer_fused) {
     float conv_global[128];
    for (int32_t oc_block_c_init = 0; oc_block_c_init < 8; ++oc_block_c_init) {
      conv_global[oc_block_c_init] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init1 = 0; oc_block_c_init1 < 8; ++oc_block_c_init1) {
      conv_global[(oc_block_c_init1 + 8)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init2 = 0; oc_block_c_init2 < 8; ++oc_block_c_init2) {
      conv_global[(oc_block_c_init2 + 16)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init3 = 0; oc_block_c_init3 < 8; ++oc_block_c_init3) {
      conv_global[(oc_block_c_init3 + 24)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init4 = 0; oc_block_c_init4 < 8; ++oc_block_c_init4) {
      conv_global[(oc_block_c_init4 + 32)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init5 = 0; oc_block_c_init5 < 8; ++oc_block_c_init5) {
      conv_global[(oc_block_c_init5 + 40)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init6 = 0; oc_block_c_init6 < 8; ++oc_block_c_init6) {
      conv_global[(oc_block_c_init6 + 48)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init7 = 0; oc_block_c_init7 < 8; ++oc_block_c_init7) {
      conv_global[(oc_block_c_init7 + 56)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init8 = 0; oc_block_c_init8 < 8; ++oc_block_c_init8) {
      conv_global[(oc_block_c_init8 + 64)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init9 = 0; oc_block_c_init9 < 8; ++oc_block_c_init9) {
      conv_global[(oc_block_c_init9 + 72)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init10 = 0; oc_block_c_init10 < 8; ++oc_block_c_init10) {
      conv_global[(oc_block_c_init10 + 80)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init11 = 0; oc_block_c_init11 < 8; ++oc_block_c_init11) {
      conv_global[(oc_block_c_init11 + 88)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init12 = 0; oc_block_c_init12 < 8; ++oc_block_c_init12) {
      conv_global[(oc_block_c_init12 + 96)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init13 = 0; oc_block_c_init13 < 8; ++oc_block_c_init13) {
      conv_global[(oc_block_c_init13 + 104)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init14 = 0; oc_block_c_init14 < 8; ++oc_block_c_init14) {
      conv_global[(oc_block_c_init14 + 112)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init15 = 0; oc_block_c_init15 < 8; ++oc_block_c_init15) {
      conv_global[(oc_block_c_init15 + 120)] = 0.000000e+00f;
    }
    for (int32_t ic_outer = 0; ic_outer < 8; ++ic_outer) {
      for (int32_t ic_inner = 0; ic_inner < 8; ++ic_inner) {
        for (int32_t oc_block_c = 0; oc_block_c < 8; ++oc_block_c) {
          conv_global[oc_block_c] = (conv_global[oc_block_c] + ((( float*)data_vec)[(((ic_outer * 7688) + ((c_outer_h_outer_fused % 16) * 496)) + (ic_inner * 31))] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 16) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c)]));
        }
        for (int32_t oc_block_c1 = 0; oc_block_c1 < 8; ++oc_block_c1) {
          conv_global[(oc_block_c1 + 8)] = (conv_global[(oc_block_c1 + 8)] + ((( float*)data_vec)[((((ic_outer * 7688) + ((c_outer_h_outer_fused % 16) * 496)) + (ic_inner * 31)) + 2)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 16) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c1)]));
        }
        for (int32_t oc_block_c2 = 0; oc_block_c2 < 8; ++oc_block_c2) {
          conv_global[(oc_block_c2 + 16)] = (conv_global[(oc_block_c2 + 16)] + ((( float*)data_vec)[((((ic_outer * 7688) + ((c_outer_h_outer_fused % 16) * 496)) + (ic_inner * 31)) + 4)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 16) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c2)]));
        }
        for (int32_t oc_block_c3 = 0; oc_block_c3 < 8; ++oc_block_c3) {
          conv_global[(oc_block_c3 + 24)] = (conv_global[(oc_block_c3 + 24)] + ((( float*)data_vec)[((((ic_outer * 7688) + ((c_outer_h_outer_fused % 16) * 496)) + (ic_inner * 31)) + 6)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 16) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c3)]));
        }
        for (int32_t oc_block_c4 = 0; oc_block_c4 < 8; ++oc_block_c4) {
          conv_global[(oc_block_c4 + 32)] = (conv_global[(oc_block_c4 + 32)] + ((( float*)data_vec)[((((ic_outer * 7688) + ((c_outer_h_outer_fused % 16) * 496)) + (ic_inner * 31)) + 8)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 16) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c4)]));
        }
        for (int32_t oc_block_c5 = 0; oc_block_c5 < 8; ++oc_block_c5) {
          conv_global[(oc_block_c5 + 40)] = (conv_global[(oc_block_c5 + 40)] + ((( float*)data_vec)[((((ic_outer * 7688) + ((c_outer_h_outer_fused % 16) * 496)) + (ic_inner * 31)) + 10)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 16) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c5)]));
        }
        for (int32_t oc_block_c6 = 0; oc_block_c6 < 8; ++oc_block_c6) {
          conv_global[(oc_block_c6 + 48)] = (conv_global[(oc_block_c6 + 48)] + ((( float*)data_vec)[((((ic_outer * 7688) + ((c_outer_h_outer_fused % 16) * 496)) + (ic_inner * 31)) + 12)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 16) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c6)]));
        }
        for (int32_t oc_block_c7 = 0; oc_block_c7 < 8; ++oc_block_c7) {
          conv_global[(oc_block_c7 + 56)] = (conv_global[(oc_block_c7 + 56)] + ((( float*)data_vec)[((((ic_outer * 7688) + ((c_outer_h_outer_fused % 16) * 496)) + (ic_inner * 31)) + 14)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 16) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c7)]));
        }
        for (int32_t oc_block_c8 = 0; oc_block_c8 < 8; ++oc_block_c8) {
          conv_global[(oc_block_c8 + 64)] = (conv_global[(oc_block_c8 + 64)] + ((( float*)data_vec)[((((ic_outer * 7688) + ((c_outer_h_outer_fused % 16) * 496)) + (ic_inner * 31)) + 16)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 16) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c8)]));
        }
        for (int32_t oc_block_c9 = 0; oc_block_c9 < 8; ++oc_block_c9) {
          conv_global[(oc_block_c9 + 72)] = (conv_global[(oc_block_c9 + 72)] + ((( float*)data_vec)[((((ic_outer * 7688) + ((c_outer_h_outer_fused % 16) * 496)) + (ic_inner * 31)) + 18)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 16) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c9)]));
        }
        for (int32_t oc_block_c10 = 0; oc_block_c10 < 8; ++oc_block_c10) {
          conv_global[(oc_block_c10 + 80)] = (conv_global[(oc_block_c10 + 80)] + ((( float*)data_vec)[((((ic_outer * 7688) + ((c_outer_h_outer_fused % 16) * 496)) + (ic_inner * 31)) + 20)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 16) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c10)]));
        }
        for (int32_t oc_block_c11 = 0; oc_block_c11 < 8; ++oc_block_c11) {
          conv_global[(oc_block_c11 + 88)] = (conv_global[(oc_block_c11 + 88)] + ((( float*)data_vec)[((((ic_outer * 7688) + ((c_outer_h_outer_fused % 16) * 496)) + (ic_inner * 31)) + 22)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 16) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c11)]));
        }
        for (int32_t oc_block_c12 = 0; oc_block_c12 < 8; ++oc_block_c12) {
          conv_global[(oc_block_c12 + 96)] = (conv_global[(oc_block_c12 + 96)] + ((( float*)data_vec)[((((ic_outer * 7688) + ((c_outer_h_outer_fused % 16) * 496)) + (ic_inner * 31)) + 24)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 16) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c12)]));
        }
        for (int32_t oc_block_c13 = 0; oc_block_c13 < 8; ++oc_block_c13) {
          conv_global[(oc_block_c13 + 104)] = (conv_global[(oc_block_c13 + 104)] + ((( float*)data_vec)[((((ic_outer * 7688) + ((c_outer_h_outer_fused % 16) * 496)) + (ic_inner * 31)) + 26)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 16) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c13)]));
        }
        for (int32_t oc_block_c14 = 0; oc_block_c14 < 8; ++oc_block_c14) {
          conv_global[(oc_block_c14 + 112)] = (conv_global[(oc_block_c14 + 112)] + ((( float*)data_vec)[((((ic_outer * 7688) + ((c_outer_h_outer_fused % 16) * 496)) + (ic_inner * 31)) + 28)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 16) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c14)]));
        }
        for (int32_t oc_block_c15 = 0; oc_block_c15 < 8; ++oc_block_c15) {
          conv_global[(oc_block_c15 + 120)] = (conv_global[(oc_block_c15 + 120)] + ((( float*)data_vec)[((((ic_outer * 7688) + ((c_outer_h_outer_fused % 16) * 496)) + (ic_inner * 31)) + 30)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 16) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c15)]));
        }
      }
    }
    for (int32_t w_inner = 0; w_inner < 16; ++w_inner) {
      for (int32_t c_inner = 0; c_inner < 8; ++c_inner) {
        output_unpack[(((((((c_outer_h_outer_fused / 16) * 8) + c_inner) * 16) + (c_outer_h_outer_fused % 16)) * 16) + w_inner)] = conv_global[((w_inner * 8) + c_inner)];
      }
    }
  }
  if (TVMBackendFreeWorkspace(1, dev_id, kernel_vec) != 0) {
    return -1;
  }
  if (TVMBackendFreeWorkspace(1, dev_id, data_vec) != 0) {
    return -1;
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_nn_conv2d( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 3))) {
    TVMAPISetLastError("fused_nn_conv2d: num_args should be 3");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (32 == ((int32_t)arg0_strides[2]))) && (1024 == ((int32_t)arg0_strides[1]))) && (65536 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg1_strides[3])) && (1 == ((int32_t)arg1_strides[2]))) && (1 == ((int32_t)arg1_strides[1]))) && (64 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* output_unpack = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg2_strides[3])) && (32 == ((int32_t)arg2_strides[2]))) && (1024 == ((int32_t)arg2_strides[1]))) && (65536 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d: Expect arg[2] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 64))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 32))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 32))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 64))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 64))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[3]) == 1))) {
    TVMAPISetLastError("Argument arg1.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 64))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 32))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[3]) == 32))) {
    TVMAPISetLastError("Argument arg2.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  void* data_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)262144, 2, 32);
  if (data_vec == NULL) {
    return -1;
  }
  void* kernel_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)16384, 2, 32);
  if (kernel_vec == NULL) {
    return -1;
  }
  for (int32_t C_h_fused = 0; C_h_fused < 256; ++C_h_fused) {
    for (int32_t c = 0; c < 8; ++c) {
      for (int32_t w = 0; w < 32; ++w) {
        (( float*)data_vec)[((((C_h_fused * 8) + c) * 32) + w)] = placeholder[(((((((C_h_fused / 32) * 8) + c) * 32) + (C_h_fused % 32)) * 32) + w)];
      }
    }
  }
  for (int32_t CO_h_fused = 0; CO_h_fused < 8; ++CO_h_fused) {
    for (int32_t CI = 0; CI < 8; ++CI) {
      for (int32_t ci = 0; ci < 8; ++ci) {
        for (int32_t co = 0; co < 8; ++co) {
          (( float*)kernel_vec)[((((((CO_h_fused * 8) + CI) * 8) + ci) * 8) + co)] = placeholder1[((((((CO_h_fused * 8) + co) * 8) + CI) * 8) + ci)];
        }
      }
    }
  }
  for (int32_t c_outer_h_outer_fused = 0; c_outer_h_outer_fused < 256; ++c_outer_h_outer_fused) {
    void* conv_global = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)1024, 2, 32);
    if (conv_global == NULL) {
      return -1;
    }
    for (int32_t ow_c_outer = 0; ow_c_outer < 2; ++ow_c_outer) {
      for (int32_t oc_block_c_init = 0; oc_block_c_init < 8; ++oc_block_c_init) {
        (( float*)conv_global)[((ow_c_outer * 128) + oc_block_c_init)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init1 = 0; oc_block_c_init1 < 8; ++oc_block_c_init1) {
        (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c_init1) + 8)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init2 = 0; oc_block_c_init2 < 8; ++oc_block_c_init2) {
        (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c_init2) + 16)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init3 = 0; oc_block_c_init3 < 8; ++oc_block_c_init3) {
        (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c_init3) + 24)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init4 = 0; oc_block_c_init4 < 8; ++oc_block_c_init4) {
        (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c_init4) + 32)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init5 = 0; oc_block_c_init5 < 8; ++oc_block_c_init5) {
        (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c_init5) + 40)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init6 = 0; oc_block_c_init6 < 8; ++oc_block_c_init6) {
        (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c_init6) + 48)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init7 = 0; oc_block_c_init7 < 8; ++oc_block_c_init7) {
        (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c_init7) + 56)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init8 = 0; oc_block_c_init8 < 8; ++oc_block_c_init8) {
        (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c_init8) + 64)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init9 = 0; oc_block_c_init9 < 8; ++oc_block_c_init9) {
        (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c_init9) + 72)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init10 = 0; oc_block_c_init10 < 8; ++oc_block_c_init10) {
        (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c_init10) + 80)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init11 = 0; oc_block_c_init11 < 8; ++oc_block_c_init11) {
        (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c_init11) + 88)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init12 = 0; oc_block_c_init12 < 8; ++oc_block_c_init12) {
        (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c_init12) + 96)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init13 = 0; oc_block_c_init13 < 8; ++oc_block_c_init13) {
        (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c_init13) + 104)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init14 = 0; oc_block_c_init14 < 8; ++oc_block_c_init14) {
        (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c_init14) + 112)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init15 = 0; oc_block_c_init15 < 8; ++oc_block_c_init15) {
        (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c_init15) + 120)] = 0.000000e+00f;
      }
      for (int32_t ic_outer = 0; ic_outer < 8; ++ic_outer) {
        for (int32_t ic_inner = 0; ic_inner < 8; ++ic_inner) {
          for (int32_t oc_block_c = 0; oc_block_c < 8; ++oc_block_c) {
            (( float*)conv_global)[((ow_c_outer * 128) + oc_block_c)] = ((( float*)conv_global)[((ow_c_outer * 128) + oc_block_c)] + ((( float*)data_vec)[(((((((ic_outer * 32) + (c_outer_h_outer_fused % 32)) * 8) + ic_inner) * 2) + ow_c_outer) * 16)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 32) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c)]));
          }
          for (int32_t oc_block_c1 = 0; oc_block_c1 < 8; ++oc_block_c1) {
            (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c1) + 8)] = ((( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c1) + 8)] + ((( float*)data_vec)[((((((((ic_outer * 32) + (c_outer_h_outer_fused % 32)) * 8) + ic_inner) * 2) + ow_c_outer) * 16) + 1)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 32) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c1)]));
          }
          for (int32_t oc_block_c2 = 0; oc_block_c2 < 8; ++oc_block_c2) {
            (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c2) + 16)] = ((( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c2) + 16)] + ((( float*)data_vec)[((((((((ic_outer * 32) + (c_outer_h_outer_fused % 32)) * 8) + ic_inner) * 2) + ow_c_outer) * 16) + 2)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 32) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c2)]));
          }
          for (int32_t oc_block_c3 = 0; oc_block_c3 < 8; ++oc_block_c3) {
            (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c3) + 24)] = ((( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c3) + 24)] + ((( float*)data_vec)[((((((((ic_outer * 32) + (c_outer_h_outer_fused % 32)) * 8) + ic_inner) * 2) + ow_c_outer) * 16) + 3)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 32) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c3)]));
          }
          for (int32_t oc_block_c4 = 0; oc_block_c4 < 8; ++oc_block_c4) {
            (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c4) + 32)] = ((( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c4) + 32)] + ((( float*)data_vec)[((((((((ic_outer * 32) + (c_outer_h_outer_fused % 32)) * 8) + ic_inner) * 2) + ow_c_outer) * 16) + 4)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 32) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c4)]));
          }
          for (int32_t oc_block_c5 = 0; oc_block_c5 < 8; ++oc_block_c5) {
            (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c5) + 40)] = ((( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c5) + 40)] + ((( float*)data_vec)[((((((((ic_outer * 32) + (c_outer_h_outer_fused % 32)) * 8) + ic_inner) * 2) + ow_c_outer) * 16) + 5)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 32) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c5)]));
          }
          for (int32_t oc_block_c6 = 0; oc_block_c6 < 8; ++oc_block_c6) {
            (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c6) + 48)] = ((( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c6) + 48)] + ((( float*)data_vec)[((((((((ic_outer * 32) + (c_outer_h_outer_fused % 32)) * 8) + ic_inner) * 2) + ow_c_outer) * 16) + 6)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 32) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c6)]));
          }
          for (int32_t oc_block_c7 = 0; oc_block_c7 < 8; ++oc_block_c7) {
            (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c7) + 56)] = ((( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c7) + 56)] + ((( float*)data_vec)[((((((((ic_outer * 32) + (c_outer_h_outer_fused % 32)) * 8) + ic_inner) * 2) + ow_c_outer) * 16) + 7)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 32) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c7)]));
          }
          for (int32_t oc_block_c8 = 0; oc_block_c8 < 8; ++oc_block_c8) {
            (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c8) + 64)] = ((( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c8) + 64)] + ((( float*)data_vec)[((((((((ic_outer * 32) + (c_outer_h_outer_fused % 32)) * 8) + ic_inner) * 2) + ow_c_outer) * 16) + 8)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 32) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c8)]));
          }
          for (int32_t oc_block_c9 = 0; oc_block_c9 < 8; ++oc_block_c9) {
            (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c9) + 72)] = ((( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c9) + 72)] + ((( float*)data_vec)[((((((((ic_outer * 32) + (c_outer_h_outer_fused % 32)) * 8) + ic_inner) * 2) + ow_c_outer) * 16) + 9)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 32) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c9)]));
          }
          for (int32_t oc_block_c10 = 0; oc_block_c10 < 8; ++oc_block_c10) {
            (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c10) + 80)] = ((( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c10) + 80)] + ((( float*)data_vec)[((((((((ic_outer * 32) + (c_outer_h_outer_fused % 32)) * 8) + ic_inner) * 2) + ow_c_outer) * 16) + 10)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 32) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c10)]));
          }
          for (int32_t oc_block_c11 = 0; oc_block_c11 < 8; ++oc_block_c11) {
            (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c11) + 88)] = ((( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c11) + 88)] + ((( float*)data_vec)[((((((((ic_outer * 32) + (c_outer_h_outer_fused % 32)) * 8) + ic_inner) * 2) + ow_c_outer) * 16) + 11)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 32) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c11)]));
          }
          for (int32_t oc_block_c12 = 0; oc_block_c12 < 8; ++oc_block_c12) {
            (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c12) + 96)] = ((( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c12) + 96)] + ((( float*)data_vec)[((((((((ic_outer * 32) + (c_outer_h_outer_fused % 32)) * 8) + ic_inner) * 2) + ow_c_outer) * 16) + 12)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 32) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c12)]));
          }
          for (int32_t oc_block_c13 = 0; oc_block_c13 < 8; ++oc_block_c13) {
            (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c13) + 104)] = ((( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c13) + 104)] + ((( float*)data_vec)[((((((((ic_outer * 32) + (c_outer_h_outer_fused % 32)) * 8) + ic_inner) * 2) + ow_c_outer) * 16) + 13)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 32) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c13)]));
          }
          for (int32_t oc_block_c14 = 0; oc_block_c14 < 8; ++oc_block_c14) {
            (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c14) + 112)] = ((( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c14) + 112)] + ((( float*)data_vec)[((((((((ic_outer * 32) + (c_outer_h_outer_fused % 32)) * 8) + ic_inner) * 2) + ow_c_outer) * 16) + 14)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 32) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c14)]));
          }
          for (int32_t oc_block_c15 = 0; oc_block_c15 < 8; ++oc_block_c15) {
            (( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c15) + 120)] = ((( float*)conv_global)[(((ow_c_outer * 128) + oc_block_c15) + 120)] + ((( float*)data_vec)[((((((((ic_outer * 32) + (c_outer_h_outer_fused % 32)) * 8) + ic_inner) * 2) + ow_c_outer) * 16) + 15)] * (( float*)kernel_vec)[(((((((c_outer_h_outer_fused / 32) * 8) + ic_outer) * 8) + ic_inner) * 8) + oc_block_c15)]));
          }
        }
      }
    }
    for (int32_t w_outer = 0; w_outer < 2; ++w_outer) {
      for (int32_t w_inner = 0; w_inner < 16; ++w_inner) {
        for (int32_t c_inner = 0; c_inner < 8; ++c_inner) {
          output_unpack[(((((((((c_outer_h_outer_fused / 32) * 8) + c_inner) * 32) + (c_outer_h_outer_fused % 32)) * 2) + w_outer) * 16) + w_inner)] = (( float*)conv_global)[((((w_outer * 16) + w_inner) * 8) + c_inner)];
        }
      }
    }
    if (TVMBackendFreeWorkspace(1, dev_id, conv_global) != 0) {
      return -1;
    }
  }
  if (TVMBackendFreeWorkspace(1, dev_id, kernel_vec) != 0) {
    return -1;
  }
  if (TVMBackendFreeWorkspace(1, dev_id, data_vec) != 0) {
    return -1;
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_nn_conv2d_multiply_add_nn_relu_7( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 5))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_7: num_args should be 5");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  void* arg3 = (((TVMValue*)args)[3].v_handle);
  int32_t arg3_code = (( int32_t*)arg_type_ids)[3];
  void* arg4 = (((TVMValue*)args)[4].v_handle);
  int32_t arg4_code = (( int32_t*)arg_type_ids)[4];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (32 == ((int32_t)arg0_strides[2]))) && (1024 == ((int32_t)arg0_strides[1]))) && (3072 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg1_strides[3])) && (3 == ((int32_t)arg1_strides[2]))) && (9 == ((int32_t)arg1_strides[1]))) && (27 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder2 = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!((((1 == ((int32_t)arg2_strides[2])) && (1 == ((int32_t)arg2_strides[1]))) && (1 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder3 = (float*)(((TVMArray*)arg3)[0].data);
  int64_t* arg3_shape = (int64_t*)(((TVMArray*)arg3)[0].shape);
  int64_t* arg3_strides = (int64_t*)(((TVMArray*)arg3)[0].strides);
  if (!(arg3_strides == NULL)) {
    if (!((((1 == ((int32_t)arg3_strides[2])) && (1 == ((int32_t)arg3_strides[1]))) && (1 == ((int32_t)arg3_strides[0]))))) {
      TVMAPISetLastError("arg3.strides: expected to be compact array");
      return -1;
    }
  }
  float* T_relu = (float*)(((TVMArray*)arg4)[0].data);
  int64_t* arg4_shape = (int64_t*)(((TVMArray*)arg4)[0].shape);
  int64_t* arg4_strides = (int64_t*)(((TVMArray*)arg4)[0].strides);
  if (!(arg4_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg4_strides[3])) && (32 == ((int32_t)arg4_strides[2]))) && (1024 == ((int32_t)arg4_strides[1]))) && (65536 == ((int32_t)arg4_strides[0]))))) {
      TVMAPISetLastError("arg4.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_7: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_7: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_7: Expect arg[2] to be pointer");
    return -1;
  }
  if (!(((((arg3_code == 3) || (arg3_code == 13)) || (arg3_code == 7)) || (arg3_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_7: Expect arg[3] to be pointer");
    return -1;
  }
  if (!(((((arg4_code == 3) || (arg4_code == 13)) || (arg4_code == 7)) || (arg4_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_7: Expect arg[4] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 3))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 32))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 32))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 64))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[3]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 64))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg3)[0].ndim)))) {
    TVMAPISetLastError("arg3.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg3)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg3)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg3)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg3.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg3_shape[0]) == 64))) {
    TVMAPISetLastError("Argument arg3.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg3)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg3.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg3)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg3.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg3)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg3.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg4)[0].ndim)))) {
    TVMAPISetLastError("arg4.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg4)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg4)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg4)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg4.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg4_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg4.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[1]) == 64))) {
    TVMAPISetLastError("Argument arg4.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[2]) == 32))) {
    TVMAPISetLastError("Argument arg4.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[3]) == 32))) {
    TVMAPISetLastError("Argument arg4.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg4)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg4.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg4)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg4.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg4)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg4.device_id has an unsatisfied constraint");
    return -1;
  }
  void* data_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)13872, 2, 32);
  if (data_vec == NULL) {
    return -1;
  }
  void* kernel_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)6912, 2, 32);
  if (kernel_vec == NULL) {
    return -1;
  }
  for (int32_t C_h_fused = 0; C_h_fused < 34; ++C_h_fused) {
    for (int32_t c = 0; c < 3; ++c) {
      for (int32_t w = 0; w < 34; ++w) {
        (( float*)data_vec)[((((C_h_fused * 3) + c) * 34) + w)] = (((((1 <= C_h_fused) && (C_h_fused < 33)) && (1 <= w)) && (w < 33)) ? placeholder[(((((c * 32) + C_h_fused) * 32) + w) + -33)] : 0.000000e+00f);
      }
    }
  }
  for (int32_t CO_h_fused = 0; CO_h_fused < 24; ++CO_h_fused) {
    for (int32_t w1 = 0; w1 < 3; ++w1) {
      for (int32_t ci = 0; ci < 3; ++ci) {
        for (int32_t co = 0; co < 8; ++co) {
          (( float*)kernel_vec)[((((((CO_h_fused * 3) + w1) * 3) + ci) * 8) + co)] = placeholder1[(((((((((CO_h_fused / 3) * 8) + co) * 3) + ci) * 3) + (CO_h_fused % 3)) * 3) + w1)];
        }
      }
    }
  }
  for (int32_t ax1_outer_ax2_fused = 0; ax1_outer_ax2_fused < 256; ++ax1_outer_ax2_fused) {
    void* conv = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)1024, 2, 32);
    if (conv == NULL) {
      return -1;
    }
     float conv_global[128];
    for (int32_t ow_outer = 0; ow_outer < 2; ++ow_outer) {
      for (int32_t oc_block_c_init = 0; oc_block_c_init < 8; ++oc_block_c_init) {
        conv_global[oc_block_c_init] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init1 = 0; oc_block_c_init1 < 8; ++oc_block_c_init1) {
        conv_global[(oc_block_c_init1 + 8)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init2 = 0; oc_block_c_init2 < 8; ++oc_block_c_init2) {
        conv_global[(oc_block_c_init2 + 16)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init3 = 0; oc_block_c_init3 < 8; ++oc_block_c_init3) {
        conv_global[(oc_block_c_init3 + 24)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init4 = 0; oc_block_c_init4 < 8; ++oc_block_c_init4) {
        conv_global[(oc_block_c_init4 + 32)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init5 = 0; oc_block_c_init5 < 8; ++oc_block_c_init5) {
        conv_global[(oc_block_c_init5 + 40)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init6 = 0; oc_block_c_init6 < 8; ++oc_block_c_init6) {
        conv_global[(oc_block_c_init6 + 48)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init7 = 0; oc_block_c_init7 < 8; ++oc_block_c_init7) {
        conv_global[(oc_block_c_init7 + 56)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init8 = 0; oc_block_c_init8 < 8; ++oc_block_c_init8) {
        conv_global[(oc_block_c_init8 + 64)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init9 = 0; oc_block_c_init9 < 8; ++oc_block_c_init9) {
        conv_global[(oc_block_c_init9 + 72)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init10 = 0; oc_block_c_init10 < 8; ++oc_block_c_init10) {
        conv_global[(oc_block_c_init10 + 80)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init11 = 0; oc_block_c_init11 < 8; ++oc_block_c_init11) {
        conv_global[(oc_block_c_init11 + 88)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init12 = 0; oc_block_c_init12 < 8; ++oc_block_c_init12) {
        conv_global[(oc_block_c_init12 + 96)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init13 = 0; oc_block_c_init13 < 8; ++oc_block_c_init13) {
        conv_global[(oc_block_c_init13 + 104)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init14 = 0; oc_block_c_init14 < 8; ++oc_block_c_init14) {
        conv_global[(oc_block_c_init14 + 112)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init15 = 0; oc_block_c_init15 < 8; ++oc_block_c_init15) {
        conv_global[(oc_block_c_init15 + 120)] = 0.000000e+00f;
      }
      for (int32_t kh = 0; kh < 3; ++kh) {
        for (int32_t kw = 0; kw < 3; ++kw) {
          for (int32_t ic_inner = 0; ic_inner < 3; ++ic_inner) {
            for (int32_t oc_block_c = 0; oc_block_c < 8; ++oc_block_c) {
              conv_global[oc_block_c] = (conv_global[oc_block_c] + ((( float*)data_vec)[((((((kh + (ax1_outer_ax2_fused % 32)) * 3) + ic_inner) * 34) + (ow_outer * 16)) + kw)] * (( float*)kernel_vec)[(((((((((ax1_outer_ax2_fused / 32) * 3) + kh) * 3) + kw) * 3) + ic_inner) * 8) + oc_block_c)]));
            }
            for (int32_t oc_block_c1 = 0; oc_block_c1 < 8; ++oc_block_c1) {
              conv_global[(oc_block_c1 + 8)] = (conv_global[(oc_block_c1 + 8)] + ((( float*)data_vec)[(((((((kh + (ax1_outer_ax2_fused % 32)) * 3) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 1)] * (( float*)kernel_vec)[(((((((((ax1_outer_ax2_fused / 32) * 3) + kh) * 3) + kw) * 3) + ic_inner) * 8) + oc_block_c1)]));
            }
            for (int32_t oc_block_c2 = 0; oc_block_c2 < 8; ++oc_block_c2) {
              conv_global[(oc_block_c2 + 16)] = (conv_global[(oc_block_c2 + 16)] + ((( float*)data_vec)[(((((((kh + (ax1_outer_ax2_fused % 32)) * 3) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 2)] * (( float*)kernel_vec)[(((((((((ax1_outer_ax2_fused / 32) * 3) + kh) * 3) + kw) * 3) + ic_inner) * 8) + oc_block_c2)]));
            }
            for (int32_t oc_block_c3 = 0; oc_block_c3 < 8; ++oc_block_c3) {
              conv_global[(oc_block_c3 + 24)] = (conv_global[(oc_block_c3 + 24)] + ((( float*)data_vec)[(((((((kh + (ax1_outer_ax2_fused % 32)) * 3) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 3)] * (( float*)kernel_vec)[(((((((((ax1_outer_ax2_fused / 32) * 3) + kh) * 3) + kw) * 3) + ic_inner) * 8) + oc_block_c3)]));
            }
            for (int32_t oc_block_c4 = 0; oc_block_c4 < 8; ++oc_block_c4) {
              conv_global[(oc_block_c4 + 32)] = (conv_global[(oc_block_c4 + 32)] + ((( float*)data_vec)[(((((((kh + (ax1_outer_ax2_fused % 32)) * 3) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 4)] * (( float*)kernel_vec)[(((((((((ax1_outer_ax2_fused / 32) * 3) + kh) * 3) + kw) * 3) + ic_inner) * 8) + oc_block_c4)]));
            }
            for (int32_t oc_block_c5 = 0; oc_block_c5 < 8; ++oc_block_c5) {
              conv_global[(oc_block_c5 + 40)] = (conv_global[(oc_block_c5 + 40)] + ((( float*)data_vec)[(((((((kh + (ax1_outer_ax2_fused % 32)) * 3) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 5)] * (( float*)kernel_vec)[(((((((((ax1_outer_ax2_fused / 32) * 3) + kh) * 3) + kw) * 3) + ic_inner) * 8) + oc_block_c5)]));
            }
            for (int32_t oc_block_c6 = 0; oc_block_c6 < 8; ++oc_block_c6) {
              conv_global[(oc_block_c6 + 48)] = (conv_global[(oc_block_c6 + 48)] + ((( float*)data_vec)[(((((((kh + (ax1_outer_ax2_fused % 32)) * 3) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 6)] * (( float*)kernel_vec)[(((((((((ax1_outer_ax2_fused / 32) * 3) + kh) * 3) + kw) * 3) + ic_inner) * 8) + oc_block_c6)]));
            }
            for (int32_t oc_block_c7 = 0; oc_block_c7 < 8; ++oc_block_c7) {
              conv_global[(oc_block_c7 + 56)] = (conv_global[(oc_block_c7 + 56)] + ((( float*)data_vec)[(((((((kh + (ax1_outer_ax2_fused % 32)) * 3) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 7)] * (( float*)kernel_vec)[(((((((((ax1_outer_ax2_fused / 32) * 3) + kh) * 3) + kw) * 3) + ic_inner) * 8) + oc_block_c7)]));
            }
            for (int32_t oc_block_c8 = 0; oc_block_c8 < 8; ++oc_block_c8) {
              conv_global[(oc_block_c8 + 64)] = (conv_global[(oc_block_c8 + 64)] + ((( float*)data_vec)[(((((((kh + (ax1_outer_ax2_fused % 32)) * 3) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 8)] * (( float*)kernel_vec)[(((((((((ax1_outer_ax2_fused / 32) * 3) + kh) * 3) + kw) * 3) + ic_inner) * 8) + oc_block_c8)]));
            }
            for (int32_t oc_block_c9 = 0; oc_block_c9 < 8; ++oc_block_c9) {
              conv_global[(oc_block_c9 + 72)] = (conv_global[(oc_block_c9 + 72)] + ((( float*)data_vec)[(((((((kh + (ax1_outer_ax2_fused % 32)) * 3) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 9)] * (( float*)kernel_vec)[(((((((((ax1_outer_ax2_fused / 32) * 3) + kh) * 3) + kw) * 3) + ic_inner) * 8) + oc_block_c9)]));
            }
            for (int32_t oc_block_c10 = 0; oc_block_c10 < 8; ++oc_block_c10) {
              conv_global[(oc_block_c10 + 80)] = (conv_global[(oc_block_c10 + 80)] + ((( float*)data_vec)[(((((((kh + (ax1_outer_ax2_fused % 32)) * 3) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 10)] * (( float*)kernel_vec)[(((((((((ax1_outer_ax2_fused / 32) * 3) + kh) * 3) + kw) * 3) + ic_inner) * 8) + oc_block_c10)]));
            }
            for (int32_t oc_block_c11 = 0; oc_block_c11 < 8; ++oc_block_c11) {
              conv_global[(oc_block_c11 + 88)] = (conv_global[(oc_block_c11 + 88)] + ((( float*)data_vec)[(((((((kh + (ax1_outer_ax2_fused % 32)) * 3) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 11)] * (( float*)kernel_vec)[(((((((((ax1_outer_ax2_fused / 32) * 3) + kh) * 3) + kw) * 3) + ic_inner) * 8) + oc_block_c11)]));
            }
            for (int32_t oc_block_c12 = 0; oc_block_c12 < 8; ++oc_block_c12) {
              conv_global[(oc_block_c12 + 96)] = (conv_global[(oc_block_c12 + 96)] + ((( float*)data_vec)[(((((((kh + (ax1_outer_ax2_fused % 32)) * 3) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 12)] * (( float*)kernel_vec)[(((((((((ax1_outer_ax2_fused / 32) * 3) + kh) * 3) + kw) * 3) + ic_inner) * 8) + oc_block_c12)]));
            }
            for (int32_t oc_block_c13 = 0; oc_block_c13 < 8; ++oc_block_c13) {
              conv_global[(oc_block_c13 + 104)] = (conv_global[(oc_block_c13 + 104)] + ((( float*)data_vec)[(((((((kh + (ax1_outer_ax2_fused % 32)) * 3) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 13)] * (( float*)kernel_vec)[(((((((((ax1_outer_ax2_fused / 32) * 3) + kh) * 3) + kw) * 3) + ic_inner) * 8) + oc_block_c13)]));
            }
            for (int32_t oc_block_c14 = 0; oc_block_c14 < 8; ++oc_block_c14) {
              conv_global[(oc_block_c14 + 112)] = (conv_global[(oc_block_c14 + 112)] + ((( float*)data_vec)[(((((((kh + (ax1_outer_ax2_fused % 32)) * 3) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 14)] * (( float*)kernel_vec)[(((((((((ax1_outer_ax2_fused / 32) * 3) + kh) * 3) + kw) * 3) + ic_inner) * 8) + oc_block_c14)]));
            }
            for (int32_t oc_block_c15 = 0; oc_block_c15 < 8; ++oc_block_c15) {
              conv_global[(oc_block_c15 + 120)] = (conv_global[(oc_block_c15 + 120)] + ((( float*)data_vec)[(((((((kh + (ax1_outer_ax2_fused % 32)) * 3) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 15)] * (( float*)kernel_vec)[(((((((((ax1_outer_ax2_fused / 32) * 3) + kh) * 3) + kw) * 3) + ic_inner) * 8) + oc_block_c15)]));
            }
          }
        }
      }
      for (int32_t ow_inner = 0; ow_inner < 16; ++ow_inner) {
        for (int32_t oc_block = 0; oc_block < 8; ++oc_block) {
          (( float*)conv)[((((ow_outer * 16) + ow_inner) * 8) + oc_block)] = conv_global[((ow_inner * 8) + oc_block)];
        }
      }
    }
    for (int32_t ax3_outer = 0; ax3_outer < 2; ++ax3_outer) {
      for (int32_t ax3_inner = 0; ax3_inner < 16; ++ax3_inner) {
        for (int32_t ax1_inner = 0; ax1_inner < 8; ++ax1_inner) {
          T_relu[(((((((((ax1_outer_ax2_fused / 32) * 8) + ax1_inner) * 32) + (ax1_outer_ax2_fused % 32)) * 2) + ax3_outer) * 16) + ax3_inner)] = ((((( float*)conv)[((((ax3_outer * 16) + ax3_inner) * 8) + ax1_inner)] * placeholder2[(((ax1_outer_ax2_fused / 32) * 8) + ax1_inner)]) + placeholder3[(((ax1_outer_ax2_fused / 32) * 8) + ax1_inner)])) > (0.000000e+00f) ? ((((( float*)conv)[((((ax3_outer * 16) + ax3_inner) * 8) + ax1_inner)] * placeholder2[(((ax1_outer_ax2_fused / 32) * 8) + ax1_inner)]) + placeholder3[(((ax1_outer_ax2_fused / 32) * 8) + ax1_inner)])) : (0.000000e+00f);
        }
      }
    }
    if (TVMBackendFreeWorkspace(1, dev_id, conv) != 0) {
      return -1;
    }
  }
  if (TVMBackendFreeWorkspace(1, dev_id, kernel_vec) != 0) {
    return -1;
  }
  if (TVMBackendFreeWorkspace(1, dev_id, data_vec) != 0) {
    return -1;
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_nn_conv2d_add_3( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 4))) {
    TVMAPISetLastError("fused_nn_conv2d_add_3: num_args should be 4");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  void* arg3 = (((TVMValue*)args)[3].v_handle);
  int32_t arg3_code = (( int32_t*)arg_type_ids)[3];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (32 == ((int32_t)arg0_strides[2]))) && (1024 == ((int32_t)arg0_strides[1]))) && (65536 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg1_strides[3])) && (3 == ((int32_t)arg1_strides[2]))) && (9 == ((int32_t)arg1_strides[1]))) && (576 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder2 = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg2_strides[3])) && (32 == ((int32_t)arg2_strides[2]))) && (1024 == ((int32_t)arg2_strides[1]))) && (65536 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  float* T_add = (float*)(((TVMArray*)arg3)[0].data);
  int64_t* arg3_shape = (int64_t*)(((TVMArray*)arg3)[0].shape);
  int64_t* arg3_strides = (int64_t*)(((TVMArray*)arg3)[0].strides);
  if (!(arg3_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg3_strides[3])) && (32 == ((int32_t)arg3_strides[2]))) && (1024 == ((int32_t)arg3_strides[1]))) && (65536 == ((int32_t)arg3_strides[0]))))) {
      TVMAPISetLastError("arg3.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_3: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_3: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_3: Expect arg[2] to be pointer");
    return -1;
  }
  if (!(((((arg3_code == 3) || (arg3_code == 13)) || (arg3_code == 7)) || (arg3_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_3: Expect arg[3] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 64))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 32))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 32))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 64))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 64))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[3]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 64))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 32))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[3]) == 32))) {
    TVMAPISetLastError("Argument arg2.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg3)[0].ndim)))) {
    TVMAPISetLastError("arg3.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg3)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg3)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg3)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg3.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg3_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[1]) == 64))) {
    TVMAPISetLastError("Argument arg3.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[2]) == 32))) {
    TVMAPISetLastError("Argument arg3.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[3]) == 32))) {
    TVMAPISetLastError("Argument arg3.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg3)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg3.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg3)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg3.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg3)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg3.device_id has an unsatisfied constraint");
    return -1;
  }
  void* data_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)295936, 2, 32);
  if (data_vec == NULL) {
    return -1;
  }
  void* kernel_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)147456, 2, 32);
  if (kernel_vec == NULL) {
    return -1;
  }
  for (int32_t C_h_fused = 0; C_h_fused < 272; ++C_h_fused) {
    for (int32_t c = 0; c < 8; ++c) {
      for (int32_t w = 0; w < 34; ++w) {
        (( float*)data_vec)[((((C_h_fused * 8) + c) * 34) + w)] = (((((1 <= (C_h_fused % 34)) && ((C_h_fused % 34) < 33)) && (1 <= w)) && (w < 33)) ? placeholder[((((((((C_h_fused / 34) * 8) + c) * 32) + (C_h_fused % 34)) * 32) + w) + -33)] : 0.000000e+00f);
      }
    }
  }
  for (int32_t CO_h_fused = 0; CO_h_fused < 24; ++CO_h_fused) {
    for (int32_t CI = 0; CI < 8; ++CI) {
      for (int32_t w1 = 0; w1 < 3; ++w1) {
        for (int32_t ci = 0; ci < 8; ++ci) {
          for (int32_t co = 0; co < 8; ++co) {
            (( float*)kernel_vec)[(((((((((((CO_h_fused / 3) * 8) + CI) * 3) + (CO_h_fused % 3)) * 3) + w1) * 8) + ci) * 8) + co)] = placeholder1[(((((((((((CO_h_fused / 3) * 8) + co) * 8) + CI) * 8) + ci) * 3) + (CO_h_fused % 3)) * 3) + w1)];
          }
        }
      }
    }
  }
  for (int32_t ax1_outer_ax2_fused = 0; ax1_outer_ax2_fused < 256; ++ax1_outer_ax2_fused) {
    void* conv = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)1024, 2, 32);
    if (conv == NULL) {
      return -1;
    }
     float conv_global[128];
    for (int32_t ow_outer = 0; ow_outer < 2; ++ow_outer) {
      for (int32_t oc_block_c_init = 0; oc_block_c_init < 8; ++oc_block_c_init) {
        conv_global[oc_block_c_init] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init1 = 0; oc_block_c_init1 < 8; ++oc_block_c_init1) {
        conv_global[(oc_block_c_init1 + 8)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init2 = 0; oc_block_c_init2 < 8; ++oc_block_c_init2) {
        conv_global[(oc_block_c_init2 + 16)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init3 = 0; oc_block_c_init3 < 8; ++oc_block_c_init3) {
        conv_global[(oc_block_c_init3 + 24)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init4 = 0; oc_block_c_init4 < 8; ++oc_block_c_init4) {
        conv_global[(oc_block_c_init4 + 32)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init5 = 0; oc_block_c_init5 < 8; ++oc_block_c_init5) {
        conv_global[(oc_block_c_init5 + 40)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init6 = 0; oc_block_c_init6 < 8; ++oc_block_c_init6) {
        conv_global[(oc_block_c_init6 + 48)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init7 = 0; oc_block_c_init7 < 8; ++oc_block_c_init7) {
        conv_global[(oc_block_c_init7 + 56)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init8 = 0; oc_block_c_init8 < 8; ++oc_block_c_init8) {
        conv_global[(oc_block_c_init8 + 64)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init9 = 0; oc_block_c_init9 < 8; ++oc_block_c_init9) {
        conv_global[(oc_block_c_init9 + 72)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init10 = 0; oc_block_c_init10 < 8; ++oc_block_c_init10) {
        conv_global[(oc_block_c_init10 + 80)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init11 = 0; oc_block_c_init11 < 8; ++oc_block_c_init11) {
        conv_global[(oc_block_c_init11 + 88)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init12 = 0; oc_block_c_init12 < 8; ++oc_block_c_init12) {
        conv_global[(oc_block_c_init12 + 96)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init13 = 0; oc_block_c_init13 < 8; ++oc_block_c_init13) {
        conv_global[(oc_block_c_init13 + 104)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init14 = 0; oc_block_c_init14 < 8; ++oc_block_c_init14) {
        conv_global[(oc_block_c_init14 + 112)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init15 = 0; oc_block_c_init15 < 8; ++oc_block_c_init15) {
        conv_global[(oc_block_c_init15 + 120)] = 0.000000e+00f;
      }
      for (int32_t ic_outer = 0; ic_outer < 8; ++ic_outer) {
        for (int32_t kh = 0; kh < 3; ++kh) {
          for (int32_t kw = 0; kw < 3; ++kw) {
            for (int32_t ic_inner = 0; ic_inner < 8; ++ic_inner) {
              for (int32_t oc_block_c = 0; oc_block_c < 8; ++oc_block_c) {
                conv_global[oc_block_c] = (conv_global[oc_block_c] + ((( float*)data_vec)[((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c)]));
              }
              for (int32_t oc_block_c1 = 0; oc_block_c1 < 8; ++oc_block_c1) {
                conv_global[(oc_block_c1 + 8)] = (conv_global[(oc_block_c1 + 8)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 1)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c1)]));
              }
              for (int32_t oc_block_c2 = 0; oc_block_c2 < 8; ++oc_block_c2) {
                conv_global[(oc_block_c2 + 16)] = (conv_global[(oc_block_c2 + 16)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 2)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c2)]));
              }
              for (int32_t oc_block_c3 = 0; oc_block_c3 < 8; ++oc_block_c3) {
                conv_global[(oc_block_c3 + 24)] = (conv_global[(oc_block_c3 + 24)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 3)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c3)]));
              }
              for (int32_t oc_block_c4 = 0; oc_block_c4 < 8; ++oc_block_c4) {
                conv_global[(oc_block_c4 + 32)] = (conv_global[(oc_block_c4 + 32)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 4)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c4)]));
              }
              for (int32_t oc_block_c5 = 0; oc_block_c5 < 8; ++oc_block_c5) {
                conv_global[(oc_block_c5 + 40)] = (conv_global[(oc_block_c5 + 40)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 5)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c5)]));
              }
              for (int32_t oc_block_c6 = 0; oc_block_c6 < 8; ++oc_block_c6) {
                conv_global[(oc_block_c6 + 48)] = (conv_global[(oc_block_c6 + 48)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 6)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c6)]));
              }
              for (int32_t oc_block_c7 = 0; oc_block_c7 < 8; ++oc_block_c7) {
                conv_global[(oc_block_c7 + 56)] = (conv_global[(oc_block_c7 + 56)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 7)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c7)]));
              }
              for (int32_t oc_block_c8 = 0; oc_block_c8 < 8; ++oc_block_c8) {
                conv_global[(oc_block_c8 + 64)] = (conv_global[(oc_block_c8 + 64)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 8)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c8)]));
              }
              for (int32_t oc_block_c9 = 0; oc_block_c9 < 8; ++oc_block_c9) {
                conv_global[(oc_block_c9 + 72)] = (conv_global[(oc_block_c9 + 72)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 9)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c9)]));
              }
              for (int32_t oc_block_c10 = 0; oc_block_c10 < 8; ++oc_block_c10) {
                conv_global[(oc_block_c10 + 80)] = (conv_global[(oc_block_c10 + 80)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 10)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c10)]));
              }
              for (int32_t oc_block_c11 = 0; oc_block_c11 < 8; ++oc_block_c11) {
                conv_global[(oc_block_c11 + 88)] = (conv_global[(oc_block_c11 + 88)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 11)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c11)]));
              }
              for (int32_t oc_block_c12 = 0; oc_block_c12 < 8; ++oc_block_c12) {
                conv_global[(oc_block_c12 + 96)] = (conv_global[(oc_block_c12 + 96)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 12)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c12)]));
              }
              for (int32_t oc_block_c13 = 0; oc_block_c13 < 8; ++oc_block_c13) {
                conv_global[(oc_block_c13 + 104)] = (conv_global[(oc_block_c13 + 104)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 13)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c13)]));
              }
              for (int32_t oc_block_c14 = 0; oc_block_c14 < 8; ++oc_block_c14) {
                conv_global[(oc_block_c14 + 112)] = (conv_global[(oc_block_c14 + 112)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 14)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c14)]));
              }
              for (int32_t oc_block_c15 = 0; oc_block_c15 < 8; ++oc_block_c15) {
                conv_global[(oc_block_c15 + 120)] = (conv_global[(oc_block_c15 + 120)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 15)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c15)]));
              }
            }
          }
        }
      }
      for (int32_t ow_inner = 0; ow_inner < 16; ++ow_inner) {
        for (int32_t oc_block = 0; oc_block < 8; ++oc_block) {
          (( float*)conv)[((((ow_outer * 16) + ow_inner) * 8) + oc_block)] = conv_global[((ow_inner * 8) + oc_block)];
        }
      }
    }
    for (int32_t ax3_outer = 0; ax3_outer < 2; ++ax3_outer) {
      for (int32_t ax3_inner = 0; ax3_inner < 16; ++ax3_inner) {
        for (int32_t ax1_inner = 0; ax1_inner < 8; ++ax1_inner) {
          T_add[(((((((((ax1_outer_ax2_fused / 32) * 8) + ax1_inner) * 32) + (ax1_outer_ax2_fused % 32)) * 2) + ax3_outer) * 16) + ax3_inner)] = ((( float*)conv)[((((ax3_outer * 16) + ax3_inner) * 8) + ax1_inner)] + placeholder2[(((((((((ax1_outer_ax2_fused / 32) * 8) + ax1_inner) * 32) + (ax1_outer_ax2_fused % 32)) * 2) + ax3_outer) * 16) + ax3_inner)]);
        }
      }
    }
    if (TVMBackendFreeWorkspace(1, dev_id, conv) != 0) {
      return -1;
    }
  }
  if (TVMBackendFreeWorkspace(1, dev_id, kernel_vec) != 0) {
    return -1;
  }
  if (TVMBackendFreeWorkspace(1, dev_id, data_vec) != 0) {
    return -1;
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_nn_conv2d_multiply_add_nn_relu_6( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 5))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_6: num_args should be 5");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  void* arg3 = (((TVMValue*)args)[3].v_handle);
  int32_t arg3_code = (( int32_t*)arg_type_ids)[3];
  void* arg4 = (((TVMValue*)args)[4].v_handle);
  int32_t arg4_code = (( int32_t*)arg_type_ids)[4];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (32 == ((int32_t)arg0_strides[2]))) && (1024 == ((int32_t)arg0_strides[1]))) && (65536 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg1_strides[3])) && (3 == ((int32_t)arg1_strides[2]))) && (9 == ((int32_t)arg1_strides[1]))) && (576 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder2 = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!((((1 == ((int32_t)arg2_strides[2])) && (1 == ((int32_t)arg2_strides[1]))) && (1 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder3 = (float*)(((TVMArray*)arg3)[0].data);
  int64_t* arg3_shape = (int64_t*)(((TVMArray*)arg3)[0].shape);
  int64_t* arg3_strides = (int64_t*)(((TVMArray*)arg3)[0].strides);
  if (!(arg3_strides == NULL)) {
    if (!((((1 == ((int32_t)arg3_strides[2])) && (1 == ((int32_t)arg3_strides[1]))) && (1 == ((int32_t)arg3_strides[0]))))) {
      TVMAPISetLastError("arg3.strides: expected to be compact array");
      return -1;
    }
  }
  float* T_relu = (float*)(((TVMArray*)arg4)[0].data);
  int64_t* arg4_shape = (int64_t*)(((TVMArray*)arg4)[0].shape);
  int64_t* arg4_strides = (int64_t*)(((TVMArray*)arg4)[0].strides);
  if (!(arg4_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg4_strides[3])) && (32 == ((int32_t)arg4_strides[2]))) && (1024 == ((int32_t)arg4_strides[1]))) && (65536 == ((int32_t)arg4_strides[0]))))) {
      TVMAPISetLastError("arg4.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_6: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_6: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_6: Expect arg[2] to be pointer");
    return -1;
  }
  if (!(((((arg3_code == 3) || (arg3_code == 13)) || (arg3_code == 7)) || (arg3_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_6: Expect arg[3] to be pointer");
    return -1;
  }
  if (!(((((arg4_code == 3) || (arg4_code == 13)) || (arg4_code == 7)) || (arg4_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_6: Expect arg[4] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 64))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 32))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 32))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 64))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 64))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[3]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 64))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg3)[0].ndim)))) {
    TVMAPISetLastError("arg3.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg3)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg3)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg3)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg3.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg3_shape[0]) == 64))) {
    TVMAPISetLastError("Argument arg3.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg3)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg3.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg3)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg3.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg3)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg3.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg4)[0].ndim)))) {
    TVMAPISetLastError("arg4.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg4)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg4)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg4)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg4.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg4_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg4.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[1]) == 64))) {
    TVMAPISetLastError("Argument arg4.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[2]) == 32))) {
    TVMAPISetLastError("Argument arg4.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[3]) == 32))) {
    TVMAPISetLastError("Argument arg4.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg4)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg4.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg4)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg4.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg4)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg4.device_id has an unsatisfied constraint");
    return -1;
  }
  void* data_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)295936, 2, 32);
  if (data_vec == NULL) {
    return -1;
  }
  void* kernel_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)147456, 2, 32);
  if (kernel_vec == NULL) {
    return -1;
  }
  for (int32_t C_h_fused = 0; C_h_fused < 272; ++C_h_fused) {
    for (int32_t c = 0; c < 8; ++c) {
      for (int32_t w = 0; w < 34; ++w) {
        (( float*)data_vec)[((((C_h_fused * 8) + c) * 34) + w)] = (((((1 <= (C_h_fused % 34)) && ((C_h_fused % 34) < 33)) && (1 <= w)) && (w < 33)) ? placeholder[((((((((C_h_fused / 34) * 8) + c) * 32) + (C_h_fused % 34)) * 32) + w) + -33)] : 0.000000e+00f);
      }
    }
  }
  for (int32_t CO_h_fused = 0; CO_h_fused < 24; ++CO_h_fused) {
    for (int32_t CI = 0; CI < 8; ++CI) {
      for (int32_t w1 = 0; w1 < 3; ++w1) {
        for (int32_t ci = 0; ci < 8; ++ci) {
          for (int32_t co = 0; co < 8; ++co) {
            (( float*)kernel_vec)[(((((((((((CO_h_fused / 3) * 8) + CI) * 3) + (CO_h_fused % 3)) * 3) + w1) * 8) + ci) * 8) + co)] = placeholder1[(((((((((((CO_h_fused / 3) * 8) + co) * 8) + CI) * 8) + ci) * 3) + (CO_h_fused % 3)) * 3) + w1)];
          }
        }
      }
    }
  }
  for (int32_t ax1_outer_ax2_fused = 0; ax1_outer_ax2_fused < 256; ++ax1_outer_ax2_fused) {
    void* conv = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)1024, 2, 32);
    if (conv == NULL) {
      return -1;
    }
     float conv_global[128];
    for (int32_t ow_outer = 0; ow_outer < 2; ++ow_outer) {
      for (int32_t oc_block_c_init = 0; oc_block_c_init < 8; ++oc_block_c_init) {
        conv_global[oc_block_c_init] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init1 = 0; oc_block_c_init1 < 8; ++oc_block_c_init1) {
        conv_global[(oc_block_c_init1 + 8)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init2 = 0; oc_block_c_init2 < 8; ++oc_block_c_init2) {
        conv_global[(oc_block_c_init2 + 16)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init3 = 0; oc_block_c_init3 < 8; ++oc_block_c_init3) {
        conv_global[(oc_block_c_init3 + 24)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init4 = 0; oc_block_c_init4 < 8; ++oc_block_c_init4) {
        conv_global[(oc_block_c_init4 + 32)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init5 = 0; oc_block_c_init5 < 8; ++oc_block_c_init5) {
        conv_global[(oc_block_c_init5 + 40)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init6 = 0; oc_block_c_init6 < 8; ++oc_block_c_init6) {
        conv_global[(oc_block_c_init6 + 48)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init7 = 0; oc_block_c_init7 < 8; ++oc_block_c_init7) {
        conv_global[(oc_block_c_init7 + 56)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init8 = 0; oc_block_c_init8 < 8; ++oc_block_c_init8) {
        conv_global[(oc_block_c_init8 + 64)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init9 = 0; oc_block_c_init9 < 8; ++oc_block_c_init9) {
        conv_global[(oc_block_c_init9 + 72)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init10 = 0; oc_block_c_init10 < 8; ++oc_block_c_init10) {
        conv_global[(oc_block_c_init10 + 80)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init11 = 0; oc_block_c_init11 < 8; ++oc_block_c_init11) {
        conv_global[(oc_block_c_init11 + 88)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init12 = 0; oc_block_c_init12 < 8; ++oc_block_c_init12) {
        conv_global[(oc_block_c_init12 + 96)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init13 = 0; oc_block_c_init13 < 8; ++oc_block_c_init13) {
        conv_global[(oc_block_c_init13 + 104)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init14 = 0; oc_block_c_init14 < 8; ++oc_block_c_init14) {
        conv_global[(oc_block_c_init14 + 112)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init15 = 0; oc_block_c_init15 < 8; ++oc_block_c_init15) {
        conv_global[(oc_block_c_init15 + 120)] = 0.000000e+00f;
      }
      for (int32_t ic_outer = 0; ic_outer < 8; ++ic_outer) {
        for (int32_t kh = 0; kh < 3; ++kh) {
          for (int32_t kw = 0; kw < 3; ++kw) {
            for (int32_t ic_inner = 0; ic_inner < 8; ++ic_inner) {
              for (int32_t oc_block_c = 0; oc_block_c < 8; ++oc_block_c) {
                conv_global[oc_block_c] = (conv_global[oc_block_c] + ((( float*)data_vec)[((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c)]));
              }
              for (int32_t oc_block_c1 = 0; oc_block_c1 < 8; ++oc_block_c1) {
                conv_global[(oc_block_c1 + 8)] = (conv_global[(oc_block_c1 + 8)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 1)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c1)]));
              }
              for (int32_t oc_block_c2 = 0; oc_block_c2 < 8; ++oc_block_c2) {
                conv_global[(oc_block_c2 + 16)] = (conv_global[(oc_block_c2 + 16)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 2)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c2)]));
              }
              for (int32_t oc_block_c3 = 0; oc_block_c3 < 8; ++oc_block_c3) {
                conv_global[(oc_block_c3 + 24)] = (conv_global[(oc_block_c3 + 24)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 3)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c3)]));
              }
              for (int32_t oc_block_c4 = 0; oc_block_c4 < 8; ++oc_block_c4) {
                conv_global[(oc_block_c4 + 32)] = (conv_global[(oc_block_c4 + 32)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 4)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c4)]));
              }
              for (int32_t oc_block_c5 = 0; oc_block_c5 < 8; ++oc_block_c5) {
                conv_global[(oc_block_c5 + 40)] = (conv_global[(oc_block_c5 + 40)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 5)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c5)]));
              }
              for (int32_t oc_block_c6 = 0; oc_block_c6 < 8; ++oc_block_c6) {
                conv_global[(oc_block_c6 + 48)] = (conv_global[(oc_block_c6 + 48)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 6)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c6)]));
              }
              for (int32_t oc_block_c7 = 0; oc_block_c7 < 8; ++oc_block_c7) {
                conv_global[(oc_block_c7 + 56)] = (conv_global[(oc_block_c7 + 56)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 7)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c7)]));
              }
              for (int32_t oc_block_c8 = 0; oc_block_c8 < 8; ++oc_block_c8) {
                conv_global[(oc_block_c8 + 64)] = (conv_global[(oc_block_c8 + 64)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 8)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c8)]));
              }
              for (int32_t oc_block_c9 = 0; oc_block_c9 < 8; ++oc_block_c9) {
                conv_global[(oc_block_c9 + 72)] = (conv_global[(oc_block_c9 + 72)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 9)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c9)]));
              }
              for (int32_t oc_block_c10 = 0; oc_block_c10 < 8; ++oc_block_c10) {
                conv_global[(oc_block_c10 + 80)] = (conv_global[(oc_block_c10 + 80)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 10)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c10)]));
              }
              for (int32_t oc_block_c11 = 0; oc_block_c11 < 8; ++oc_block_c11) {
                conv_global[(oc_block_c11 + 88)] = (conv_global[(oc_block_c11 + 88)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 11)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c11)]));
              }
              for (int32_t oc_block_c12 = 0; oc_block_c12 < 8; ++oc_block_c12) {
                conv_global[(oc_block_c12 + 96)] = (conv_global[(oc_block_c12 + 96)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 12)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c12)]));
              }
              for (int32_t oc_block_c13 = 0; oc_block_c13 < 8; ++oc_block_c13) {
                conv_global[(oc_block_c13 + 104)] = (conv_global[(oc_block_c13 + 104)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 13)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c13)]));
              }
              for (int32_t oc_block_c14 = 0; oc_block_c14 < 8; ++oc_block_c14) {
                conv_global[(oc_block_c14 + 112)] = (conv_global[(oc_block_c14 + 112)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 14)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c14)]));
              }
              for (int32_t oc_block_c15 = 0; oc_block_c15 < 8; ++oc_block_c15) {
                conv_global[(oc_block_c15 + 120)] = (conv_global[(oc_block_c15 + 120)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 15)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c15)]));
              }
            }
          }
        }
      }
      for (int32_t ow_inner = 0; ow_inner < 16; ++ow_inner) {
        for (int32_t oc_block = 0; oc_block < 8; ++oc_block) {
          (( float*)conv)[((((ow_outer * 16) + ow_inner) * 8) + oc_block)] = conv_global[((ow_inner * 8) + oc_block)];
        }
      }
    }
    for (int32_t ax3_outer = 0; ax3_outer < 2; ++ax3_outer) {
      for (int32_t ax3_inner = 0; ax3_inner < 16; ++ax3_inner) {
        for (int32_t ax1_inner = 0; ax1_inner < 8; ++ax1_inner) {
          T_relu[(((((((((ax1_outer_ax2_fused / 32) * 8) + ax1_inner) * 32) + (ax1_outer_ax2_fused % 32)) * 2) + ax3_outer) * 16) + ax3_inner)] = ((((( float*)conv)[((((ax3_outer * 16) + ax3_inner) * 8) + ax1_inner)] * placeholder2[(((ax1_outer_ax2_fused / 32) * 8) + ax1_inner)]) + placeholder3[(((ax1_outer_ax2_fused / 32) * 8) + ax1_inner)])) > (0.000000e+00f) ? ((((( float*)conv)[((((ax3_outer * 16) + ax3_inner) * 8) + ax1_inner)] * placeholder2[(((ax1_outer_ax2_fused / 32) * 8) + ax1_inner)]) + placeholder3[(((ax1_outer_ax2_fused / 32) * 8) + ax1_inner)])) : (0.000000e+00f);
        }
      }
    }
    if (TVMBackendFreeWorkspace(1, dev_id, conv) != 0) {
      return -1;
    }
  }
  if (TVMBackendFreeWorkspace(1, dev_id, kernel_vec) != 0) {
    return -1;
  }
  if (TVMBackendFreeWorkspace(1, dev_id, data_vec) != 0) {
    return -1;
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_multiply_add_nn_relu_3( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 4))) {
    TVMAPISetLastError("fused_multiply_add_nn_relu_3: num_args should be 4");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  void* arg3 = (((TVMValue*)args)[3].v_handle);
  int32_t arg3_code = (( int32_t*)arg_type_ids)[3];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (32 == ((int32_t)arg0_strides[2]))) && (1024 == ((int32_t)arg0_strides[1]))) && (65536 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!((((1 == ((int32_t)arg1_strides[2])) && (1 == ((int32_t)arg1_strides[1]))) && (1 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder2 = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!((((1 == ((int32_t)arg2_strides[2])) && (1 == ((int32_t)arg2_strides[1]))) && (1 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  float* T_relu = (float*)(((TVMArray*)arg3)[0].data);
  int64_t* arg3_shape = (int64_t*)(((TVMArray*)arg3)[0].shape);
  int64_t* arg3_strides = (int64_t*)(((TVMArray*)arg3)[0].strides);
  if (!(arg3_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg3_strides[3])) && (32 == ((int32_t)arg3_strides[2]))) && (1024 == ((int32_t)arg3_strides[1]))) && (65536 == ((int32_t)arg3_strides[0]))))) {
      TVMAPISetLastError("arg3.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_multiply_add_nn_relu_3: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_multiply_add_nn_relu_3: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_multiply_add_nn_relu_3: Expect arg[2] to be pointer");
    return -1;
  }
  if (!(((((arg3_code == 3) || (arg3_code == 13)) || (arg3_code == 7)) || (arg3_code == 4)))) {
    TVMAPISetLastError("fused_multiply_add_nn_relu_3: Expect arg[3] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 64))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 32))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 32))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 64))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 64))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg3)[0].ndim)))) {
    TVMAPISetLastError("arg3.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg3)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg3)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg3)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg3.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg3_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[1]) == 64))) {
    TVMAPISetLastError("Argument arg3.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[2]) == 32))) {
    TVMAPISetLastError("Argument arg3.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[3]) == 32))) {
    TVMAPISetLastError("Argument arg3.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg3)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg3.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg3)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg3.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg3)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg3.device_id has an unsatisfied constraint");
    return -1;
  }
  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 64; ++ax0_ax1_fused) {
    for (int32_t ax2 = 0; ax2 < 32; ++ax2) {
      for (int32_t ax3 = 0; ax3 < 32; ++ax3) {
        T_relu[((((ax0_ax1_fused * 32) + ax2) * 32) + ax3)] = (((placeholder[((((ax0_ax1_fused * 32) + ax2) * 32) + ax3)] * placeholder1[ax0_ax1_fused]) + placeholder2[ax0_ax1_fused])) > (0.000000e+00f) ? (((placeholder[((((ax0_ax1_fused * 32) + ax2) * 32) + ax3)] * placeholder1[ax0_ax1_fused]) + placeholder2[ax0_ax1_fused])) : (0.000000e+00f);
      }
    }
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_nn_conv2d_add_2( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 4))) {
    TVMAPISetLastError("fused_nn_conv2d_add_2: num_args should be 4");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  void* arg3 = (((TVMValue*)args)[3].v_handle);
  int32_t arg3_code = (( int32_t*)arg_type_ids)[3];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (16 == ((int32_t)arg0_strides[2]))) && (256 == ((int32_t)arg0_strides[1]))) && (32768 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg1_strides[3])) && (3 == ((int32_t)arg1_strides[2]))) && (9 == ((int32_t)arg1_strides[1]))) && (1152 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder2 = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg2_strides[3])) && (16 == ((int32_t)arg2_strides[2]))) && (256 == ((int32_t)arg2_strides[1]))) && (32768 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  float* T_add = (float*)(((TVMArray*)arg3)[0].data);
  int64_t* arg3_shape = (int64_t*)(((TVMArray*)arg3)[0].shape);
  int64_t* arg3_strides = (int64_t*)(((TVMArray*)arg3)[0].strides);
  if (!(arg3_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg3_strides[3])) && (16 == ((int32_t)arg3_strides[2]))) && (256 == ((int32_t)arg3_strides[1]))) && (32768 == ((int32_t)arg3_strides[0]))))) {
      TVMAPISetLastError("arg3.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_2: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_2: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_2: Expect arg[2] to be pointer");
    return -1;
  }
  if (!(((((arg3_code == 3) || (arg3_code == 13)) || (arg3_code == 7)) || (arg3_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_2: Expect arg[3] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 128))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 16))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 16))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 128))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 128))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[3]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 128))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 16))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[3]) == 16))) {
    TVMAPISetLastError("Argument arg2.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg3)[0].ndim)))) {
    TVMAPISetLastError("arg3.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg3)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg3)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg3)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg3.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg3_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[1]) == 128))) {
    TVMAPISetLastError("Argument arg3.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[2]) == 16))) {
    TVMAPISetLastError("Argument arg3.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[3]) == 16))) {
    TVMAPISetLastError("Argument arg3.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg3)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg3.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg3)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg3.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg3)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg3.device_id has an unsatisfied constraint");
    return -1;
  }
  void* data_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)165888, 2, 32);
  if (data_vec == NULL) {
    return -1;
  }
  void* kernel_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)589824, 2, 32);
  if (kernel_vec == NULL) {
    return -1;
  }
  for (int32_t C_h_fused = 0; C_h_fused < 288; ++C_h_fused) {
    for (int32_t c = 0; c < 8; ++c) {
      for (int32_t w = 0; w < 18; ++w) {
        (( float*)data_vec)[((((C_h_fused * 8) + c) * 18) + w)] = (((((1 <= (C_h_fused % 18)) && ((C_h_fused % 18) < 17)) && (1 <= w)) && (w < 17)) ? placeholder[((((((((C_h_fused / 18) * 8) + c) * 16) + (C_h_fused % 18)) * 16) + w) + -17)] : 0.000000e+00f);
      }
    }
  }
  for (int32_t CO_h_fused = 0; CO_h_fused < 48; ++CO_h_fused) {
    for (int32_t CI = 0; CI < 16; ++CI) {
      for (int32_t w1 = 0; w1 < 3; ++w1) {
        for (int32_t ci = 0; ci < 8; ++ci) {
          for (int32_t co = 0; co < 8; ++co) {
            (( float*)kernel_vec)[(((((((((((CO_h_fused / 3) * 16) + CI) * 3) + (CO_h_fused % 3)) * 3) + w1) * 8) + ci) * 8) + co)] = placeholder1[(((((((((((CO_h_fused / 3) * 8) + co) * 16) + CI) * 8) + ci) * 3) + (CO_h_fused % 3)) * 3) + w1)];
          }
        }
      }
    }
  }
  for (int32_t ax1_outer_ax2_fused = 0; ax1_outer_ax2_fused < 256; ++ax1_outer_ax2_fused) {
     float conv_global[128];
    for (int32_t oc_block_c_init = 0; oc_block_c_init < 8; ++oc_block_c_init) {
      conv_global[oc_block_c_init] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init1 = 0; oc_block_c_init1 < 8; ++oc_block_c_init1) {
      conv_global[(oc_block_c_init1 + 8)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init2 = 0; oc_block_c_init2 < 8; ++oc_block_c_init2) {
      conv_global[(oc_block_c_init2 + 16)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init3 = 0; oc_block_c_init3 < 8; ++oc_block_c_init3) {
      conv_global[(oc_block_c_init3 + 24)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init4 = 0; oc_block_c_init4 < 8; ++oc_block_c_init4) {
      conv_global[(oc_block_c_init4 + 32)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init5 = 0; oc_block_c_init5 < 8; ++oc_block_c_init5) {
      conv_global[(oc_block_c_init5 + 40)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init6 = 0; oc_block_c_init6 < 8; ++oc_block_c_init6) {
      conv_global[(oc_block_c_init6 + 48)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init7 = 0; oc_block_c_init7 < 8; ++oc_block_c_init7) {
      conv_global[(oc_block_c_init7 + 56)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init8 = 0; oc_block_c_init8 < 8; ++oc_block_c_init8) {
      conv_global[(oc_block_c_init8 + 64)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init9 = 0; oc_block_c_init9 < 8; ++oc_block_c_init9) {
      conv_global[(oc_block_c_init9 + 72)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init10 = 0; oc_block_c_init10 < 8; ++oc_block_c_init10) {
      conv_global[(oc_block_c_init10 + 80)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init11 = 0; oc_block_c_init11 < 8; ++oc_block_c_init11) {
      conv_global[(oc_block_c_init11 + 88)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init12 = 0; oc_block_c_init12 < 8; ++oc_block_c_init12) {
      conv_global[(oc_block_c_init12 + 96)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init13 = 0; oc_block_c_init13 < 8; ++oc_block_c_init13) {
      conv_global[(oc_block_c_init13 + 104)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init14 = 0; oc_block_c_init14 < 8; ++oc_block_c_init14) {
      conv_global[(oc_block_c_init14 + 112)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init15 = 0; oc_block_c_init15 < 8; ++oc_block_c_init15) {
      conv_global[(oc_block_c_init15 + 120)] = 0.000000e+00f;
    }
    for (int32_t ic_outer = 0; ic_outer < 16; ++ic_outer) {
      for (int32_t kh = 0; kh < 3; ++kh) {
        for (int32_t kw = 0; kw < 3; ++kw) {
          for (int32_t ic_inner = 0; ic_inner < 8; ++ic_inner) {
            for (int32_t oc_block_c = 0; oc_block_c < 8; ++oc_block_c) {
              conv_global[oc_block_c] = (conv_global[oc_block_c] + ((( float*)data_vec)[(((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c)]));
            }
            for (int32_t oc_block_c1 = 0; oc_block_c1 < 8; ++oc_block_c1) {
              conv_global[(oc_block_c1 + 8)] = (conv_global[(oc_block_c1 + 8)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 1)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c1)]));
            }
            for (int32_t oc_block_c2 = 0; oc_block_c2 < 8; ++oc_block_c2) {
              conv_global[(oc_block_c2 + 16)] = (conv_global[(oc_block_c2 + 16)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 2)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c2)]));
            }
            for (int32_t oc_block_c3 = 0; oc_block_c3 < 8; ++oc_block_c3) {
              conv_global[(oc_block_c3 + 24)] = (conv_global[(oc_block_c3 + 24)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 3)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c3)]));
            }
            for (int32_t oc_block_c4 = 0; oc_block_c4 < 8; ++oc_block_c4) {
              conv_global[(oc_block_c4 + 32)] = (conv_global[(oc_block_c4 + 32)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 4)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c4)]));
            }
            for (int32_t oc_block_c5 = 0; oc_block_c5 < 8; ++oc_block_c5) {
              conv_global[(oc_block_c5 + 40)] = (conv_global[(oc_block_c5 + 40)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 5)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c5)]));
            }
            for (int32_t oc_block_c6 = 0; oc_block_c6 < 8; ++oc_block_c6) {
              conv_global[(oc_block_c6 + 48)] = (conv_global[(oc_block_c6 + 48)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 6)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c6)]));
            }
            for (int32_t oc_block_c7 = 0; oc_block_c7 < 8; ++oc_block_c7) {
              conv_global[(oc_block_c7 + 56)] = (conv_global[(oc_block_c7 + 56)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 7)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c7)]));
            }
            for (int32_t oc_block_c8 = 0; oc_block_c8 < 8; ++oc_block_c8) {
              conv_global[(oc_block_c8 + 64)] = (conv_global[(oc_block_c8 + 64)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 8)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c8)]));
            }
            for (int32_t oc_block_c9 = 0; oc_block_c9 < 8; ++oc_block_c9) {
              conv_global[(oc_block_c9 + 72)] = (conv_global[(oc_block_c9 + 72)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 9)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c9)]));
            }
            for (int32_t oc_block_c10 = 0; oc_block_c10 < 8; ++oc_block_c10) {
              conv_global[(oc_block_c10 + 80)] = (conv_global[(oc_block_c10 + 80)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 10)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c10)]));
            }
            for (int32_t oc_block_c11 = 0; oc_block_c11 < 8; ++oc_block_c11) {
              conv_global[(oc_block_c11 + 88)] = (conv_global[(oc_block_c11 + 88)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 11)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c11)]));
            }
            for (int32_t oc_block_c12 = 0; oc_block_c12 < 8; ++oc_block_c12) {
              conv_global[(oc_block_c12 + 96)] = (conv_global[(oc_block_c12 + 96)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 12)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c12)]));
            }
            for (int32_t oc_block_c13 = 0; oc_block_c13 < 8; ++oc_block_c13) {
              conv_global[(oc_block_c13 + 104)] = (conv_global[(oc_block_c13 + 104)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 13)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c13)]));
            }
            for (int32_t oc_block_c14 = 0; oc_block_c14 < 8; ++oc_block_c14) {
              conv_global[(oc_block_c14 + 112)] = (conv_global[(oc_block_c14 + 112)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 14)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c14)]));
            }
            for (int32_t oc_block_c15 = 0; oc_block_c15 < 8; ++oc_block_c15) {
              conv_global[(oc_block_c15 + 120)] = (conv_global[(oc_block_c15 + 120)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 15)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c15)]));
            }
          }
        }
      }
    }
    for (int32_t ax3_inner = 0; ax3_inner < 16; ++ax3_inner) {
      for (int32_t ax1_inner = 0; ax1_inner < 8; ++ax1_inner) {
        T_add[(((((((ax1_outer_ax2_fused / 16) * 8) + ax1_inner) * 16) + (ax1_outer_ax2_fused % 16)) * 16) + ax3_inner)] = (conv_global[((ax3_inner * 8) + ax1_inner)] + placeholder2[(((((((ax1_outer_ax2_fused / 16) * 8) + ax1_inner) * 16) + (ax1_outer_ax2_fused % 16)) * 16) + ax3_inner)]);
      }
    }
  }
  if (TVMBackendFreeWorkspace(1, dev_id, kernel_vec) != 0) {
    return -1;
  }
  if (TVMBackendFreeWorkspace(1, dev_id, data_vec) != 0) {
    return -1;
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_multiply_add_nn_relu( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 4))) {
    TVMAPISetLastError("fused_multiply_add_nn_relu: num_args should be 4");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  void* arg3 = (((TVMValue*)args)[3].v_handle);
  int32_t arg3_code = (( int32_t*)arg_type_ids)[3];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (4 == ((int32_t)arg0_strides[2]))) && (16 == ((int32_t)arg0_strides[1]))) && (8192 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!((((1 == ((int32_t)arg1_strides[2])) && (1 == ((int32_t)arg1_strides[1]))) && (1 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder2 = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!((((1 == ((int32_t)arg2_strides[2])) && (1 == ((int32_t)arg2_strides[1]))) && (1 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  float* T_relu = (float*)(((TVMArray*)arg3)[0].data);
  int64_t* arg3_shape = (int64_t*)(((TVMArray*)arg3)[0].shape);
  int64_t* arg3_strides = (int64_t*)(((TVMArray*)arg3)[0].strides);
  if (!(arg3_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg3_strides[3])) && (4 == ((int32_t)arg3_strides[2]))) && (16 == ((int32_t)arg3_strides[1]))) && (8192 == ((int32_t)arg3_strides[0]))))) {
      TVMAPISetLastError("arg3.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_multiply_add_nn_relu: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_multiply_add_nn_relu: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_multiply_add_nn_relu: Expect arg[2] to be pointer");
    return -1;
  }
  if (!(((((arg3_code == 3) || (arg3_code == 13)) || (arg3_code == 7)) || (arg3_code == 4)))) {
    TVMAPISetLastError("fused_multiply_add_nn_relu: Expect arg[3] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 512))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 4))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 4))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 512))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 512))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg3)[0].ndim)))) {
    TVMAPISetLastError("arg3.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg3)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg3)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg3)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg3.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg3_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[1]) == 512))) {
    TVMAPISetLastError("Argument arg3.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[2]) == 4))) {
    TVMAPISetLastError("Argument arg3.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[3]) == 4))) {
    TVMAPISetLastError("Argument arg3.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg3)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg3.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg3)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg3.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg3)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg3.device_id has an unsatisfied constraint");
    return -1;
  }
  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 512; ++ax0_ax1_fused) {
    for (int32_t ax2 = 0; ax2 < 4; ++ax2) {
      for (int32_t ax3 = 0; ax3 < 4; ++ax3) {
        T_relu[((((ax0_ax1_fused * 4) + ax2) * 4) + ax3)] = (((placeholder[((((ax0_ax1_fused * 4) + ax2) * 4) + ax3)] * placeholder1[ax0_ax1_fused]) + placeholder2[ax0_ax1_fused])) > (0.000000e+00f) ? (((placeholder[((((ax0_ax1_fused * 4) + ax2) * 4) + ax3)] * placeholder1[ax0_ax1_fused]) + placeholder2[ax0_ax1_fused])) : (0.000000e+00f);
      }
    }
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_nn_conv2d_multiply_add_nn_relu( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 5))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu: num_args should be 5");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  void* arg3 = (((TVMValue*)args)[3].v_handle);
  int32_t arg3_code = (( int32_t*)arg_type_ids)[3];
  void* arg4 = (((TVMValue*)args)[4].v_handle);
  int32_t arg4_code = (( int32_t*)arg_type_ids)[4];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (4 == ((int32_t)arg0_strides[2]))) && (16 == ((int32_t)arg0_strides[1]))) && (8192 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg1_strides[3])) && (3 == ((int32_t)arg1_strides[2]))) && (9 == ((int32_t)arg1_strides[1]))) && (4608 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder2 = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!((((1 == ((int32_t)arg2_strides[2])) && (1 == ((int32_t)arg2_strides[1]))) && (1 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder3 = (float*)(((TVMArray*)arg3)[0].data);
  int64_t* arg3_shape = (int64_t*)(((TVMArray*)arg3)[0].shape);
  int64_t* arg3_strides = (int64_t*)(((TVMArray*)arg3)[0].strides);
  if (!(arg3_strides == NULL)) {
    if (!((((1 == ((int32_t)arg3_strides[2])) && (1 == ((int32_t)arg3_strides[1]))) && (1 == ((int32_t)arg3_strides[0]))))) {
      TVMAPISetLastError("arg3.strides: expected to be compact array");
      return -1;
    }
  }
  float* T_relu = (float*)(((TVMArray*)arg4)[0].data);
  int64_t* arg4_shape = (int64_t*)(((TVMArray*)arg4)[0].shape);
  int64_t* arg4_strides = (int64_t*)(((TVMArray*)arg4)[0].strides);
  if (!(arg4_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg4_strides[3])) && (4 == ((int32_t)arg4_strides[2]))) && (16 == ((int32_t)arg4_strides[1]))) && (8192 == ((int32_t)arg4_strides[0]))))) {
      TVMAPISetLastError("arg4.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu: Expect arg[2] to be pointer");
    return -1;
  }
  if (!(((((arg3_code == 3) || (arg3_code == 13)) || (arg3_code == 7)) || (arg3_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu: Expect arg[3] to be pointer");
    return -1;
  }
  if (!(((((arg4_code == 3) || (arg4_code == 13)) || (arg4_code == 7)) || (arg4_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu: Expect arg[4] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 512))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 4))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 4))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 512))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 512))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[3]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 512))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg3)[0].ndim)))) {
    TVMAPISetLastError("arg3.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg3)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg3)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg3)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg3.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg3_shape[0]) == 512))) {
    TVMAPISetLastError("Argument arg3.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg3)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg3.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg3)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg3.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg3)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg3.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg4)[0].ndim)))) {
    TVMAPISetLastError("arg4.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg4)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg4)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg4)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg4.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg4_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg4.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[1]) == 512))) {
    TVMAPISetLastError("Argument arg4.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[2]) == 4))) {
    TVMAPISetLastError("Argument arg4.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[3]) == 4))) {
    TVMAPISetLastError("Argument arg4.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg4)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg4.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg4)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg4.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg4)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg4.device_id has an unsatisfied constraint");
    return -1;
  }
  void* data_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)73728, 2, 32);
  if (data_vec == NULL) {
    return -1;
  }
  void* kernel_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)9437184, 2, 32);
  if (kernel_vec == NULL) {
    return -1;
  }
  for (int32_t C_h_fused = 0; C_h_fused < 384; ++C_h_fused) {
    for (int32_t c = 0; c < 8; ++c) {
      for (int32_t w = 0; w < 6; ++w) {
        (( float*)data_vec)[((((C_h_fused * 8) + c) * 6) + w)] = (((((1 <= (C_h_fused % 6)) && ((C_h_fused % 6) < 5)) && (1 <= w)) && (w < 5)) ? placeholder[((((((((C_h_fused / 6) * 8) + c) * 4) + (C_h_fused % 6)) * 4) + w) + -5)] : 0.000000e+00f);
      }
    }
  }
  for (int32_t CO_h_fused = 0; CO_h_fused < 192; ++CO_h_fused) {
    for (int32_t CI = 0; CI < 64; ++CI) {
      for (int32_t w1 = 0; w1 < 3; ++w1) {
        for (int32_t ci = 0; ci < 8; ++ci) {
          for (int32_t co = 0; co < 8; ++co) {
            (( float*)kernel_vec)[(((((((((((CO_h_fused / 3) * 64) + CI) * 3) + (CO_h_fused % 3)) * 3) + w1) * 8) + ci) * 8) + co)] = placeholder1[(((((((((((CO_h_fused / 3) * 8) + co) * 64) + CI) * 8) + ci) * 3) + (CO_h_fused % 3)) * 3) + w1)];
          }
        }
      }
    }
  }
  for (int32_t ax1_outer_ax2_fused = 0; ax1_outer_ax2_fused < 256; ++ax1_outer_ax2_fused) {
     float conv_global[32];
    for (int32_t oc_block_c_init = 0; oc_block_c_init < 8; ++oc_block_c_init) {
      conv_global[oc_block_c_init] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init1 = 0; oc_block_c_init1 < 8; ++oc_block_c_init1) {
      conv_global[(oc_block_c_init1 + 8)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init2 = 0; oc_block_c_init2 < 8; ++oc_block_c_init2) {
      conv_global[(oc_block_c_init2 + 16)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init3 = 0; oc_block_c_init3 < 8; ++oc_block_c_init3) {
      conv_global[(oc_block_c_init3 + 24)] = 0.000000e+00f;
    }
    for (int32_t ic_outer = 0; ic_outer < 64; ++ic_outer) {
      for (int32_t kh = 0; kh < 3; ++kh) {
        for (int32_t kw = 0; kw < 3; ++kw) {
          for (int32_t ic_inner = 0; ic_inner < 8; ++ic_inner) {
            for (int32_t oc_block_c = 0; oc_block_c < 8; ++oc_block_c) {
              conv_global[oc_block_c] = (conv_global[oc_block_c] + ((( float*)data_vec)[(((((((ic_outer * 6) + kh) + (ax1_outer_ax2_fused % 4)) * 8) + ic_inner) * 6) + kw)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 4) * 64) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c)]));
            }
            for (int32_t oc_block_c1 = 0; oc_block_c1 < 8; ++oc_block_c1) {
              conv_global[(oc_block_c1 + 8)] = (conv_global[(oc_block_c1 + 8)] + ((( float*)data_vec)[((((((((ic_outer * 6) + kh) + (ax1_outer_ax2_fused % 4)) * 8) + ic_inner) * 6) + kw) + 1)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 4) * 64) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c1)]));
            }
            for (int32_t oc_block_c2 = 0; oc_block_c2 < 8; ++oc_block_c2) {
              conv_global[(oc_block_c2 + 16)] = (conv_global[(oc_block_c2 + 16)] + ((( float*)data_vec)[((((((((ic_outer * 6) + kh) + (ax1_outer_ax2_fused % 4)) * 8) + ic_inner) * 6) + kw) + 2)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 4) * 64) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c2)]));
            }
            for (int32_t oc_block_c3 = 0; oc_block_c3 < 8; ++oc_block_c3) {
              conv_global[(oc_block_c3 + 24)] = (conv_global[(oc_block_c3 + 24)] + ((( float*)data_vec)[((((((((ic_outer * 6) + kh) + (ax1_outer_ax2_fused % 4)) * 8) + ic_inner) * 6) + kw) + 3)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 4) * 64) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c3)]));
            }
          }
        }
      }
    }
    for (int32_t ax3_inner = 0; ax3_inner < 4; ++ax3_inner) {
      for (int32_t ax1_inner = 0; ax1_inner < 8; ++ax1_inner) {
        T_relu[(((((((ax1_outer_ax2_fused / 4) * 8) + ax1_inner) * 4) + (ax1_outer_ax2_fused % 4)) * 4) + ax3_inner)] = (((conv_global[((ax3_inner * 8) + ax1_inner)] * placeholder2[(((ax1_outer_ax2_fused / 4) * 8) + ax1_inner)]) + placeholder3[(((ax1_outer_ax2_fused / 4) * 8) + ax1_inner)])) > (0.000000e+00f) ? (((conv_global[((ax3_inner * 8) + ax1_inner)] * placeholder2[(((ax1_outer_ax2_fused / 4) * 8) + ax1_inner)]) + placeholder3[(((ax1_outer_ax2_fused / 4) * 8) + ax1_inner)])) : (0.000000e+00f);
      }
    }
  }
  if (TVMBackendFreeWorkspace(1, dev_id, kernel_vec) != 0) {
    return -1;
  }
  if (TVMBackendFreeWorkspace(1, dev_id, data_vec) != 0) {
    return -1;
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_nn_conv2d_add_1( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 4))) {
    TVMAPISetLastError("fused_nn_conv2d_add_1: num_args should be 4");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  void* arg3 = (((TVMValue*)args)[3].v_handle);
  int32_t arg3_code = (( int32_t*)arg_type_ids)[3];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (8 == ((int32_t)arg0_strides[2]))) && (64 == ((int32_t)arg0_strides[1]))) && (16384 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg1_strides[3])) && (3 == ((int32_t)arg1_strides[2]))) && (9 == ((int32_t)arg1_strides[1]))) && (2304 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder2 = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg2_strides[3])) && (8 == ((int32_t)arg2_strides[2]))) && (64 == ((int32_t)arg2_strides[1]))) && (16384 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  float* T_add = (float*)(((TVMArray*)arg3)[0].data);
  int64_t* arg3_shape = (int64_t*)(((TVMArray*)arg3)[0].shape);
  int64_t* arg3_strides = (int64_t*)(((TVMArray*)arg3)[0].strides);
  if (!(arg3_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg3_strides[3])) && (8 == ((int32_t)arg3_strides[2]))) && (64 == ((int32_t)arg3_strides[1]))) && (16384 == ((int32_t)arg3_strides[0]))))) {
      TVMAPISetLastError("arg3.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_1: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_1: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_1: Expect arg[2] to be pointer");
    return -1;
  }
  if (!(((((arg3_code == 3) || (arg3_code == 13)) || (arg3_code == 7)) || (arg3_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_1: Expect arg[3] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 256))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 8))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 8))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 256))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 256))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[3]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 256))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 8))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[3]) == 8))) {
    TVMAPISetLastError("Argument arg2.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg3)[0].ndim)))) {
    TVMAPISetLastError("arg3.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg3)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg3)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg3)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg3.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg3_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[1]) == 256))) {
    TVMAPISetLastError("Argument arg3.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[2]) == 8))) {
    TVMAPISetLastError("Argument arg3.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[3]) == 8))) {
    TVMAPISetLastError("Argument arg3.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg3)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg3.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg3)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg3.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg3)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg3.device_id has an unsatisfied constraint");
    return -1;
  }
  void* data_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)102400, 2, 32);
  if (data_vec == NULL) {
    return -1;
  }
  void* kernel_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)2359296, 2, 32);
  if (kernel_vec == NULL) {
    return -1;
  }
  for (int32_t C_h_fused = 0; C_h_fused < 320; ++C_h_fused) {
    for (int32_t c = 0; c < 8; ++c) {
      for (int32_t w = 0; w < 10; ++w) {
        (( float*)data_vec)[((((C_h_fused * 8) + c) * 10) + w)] = (((((1 <= (C_h_fused % 10)) && ((C_h_fused % 10) < 9)) && (1 <= w)) && (w < 9)) ? placeholder[((((((((C_h_fused / 10) * 8) + c) * 8) + (C_h_fused % 10)) * 8) + w) + -9)] : 0.000000e+00f);
      }
    }
  }
  for (int32_t CO_h_fused = 0; CO_h_fused < 96; ++CO_h_fused) {
    for (int32_t CI = 0; CI < 32; ++CI) {
      for (int32_t w1 = 0; w1 < 3; ++w1) {
        for (int32_t ci = 0; ci < 8; ++ci) {
          for (int32_t co = 0; co < 8; ++co) {
            (( float*)kernel_vec)[(((((((((((CO_h_fused / 3) * 32) + CI) * 3) + (CO_h_fused % 3)) * 3) + w1) * 8) + ci) * 8) + co)] = placeholder1[(((((((((((CO_h_fused / 3) * 8) + co) * 32) + CI) * 8) + ci) * 3) + (CO_h_fused % 3)) * 3) + w1)];
          }
        }
      }
    }
  }
  for (int32_t ax1_outer_ax2_fused = 0; ax1_outer_ax2_fused < 256; ++ax1_outer_ax2_fused) {
     float conv_global[64];
    for (int32_t oc_block_c_init = 0; oc_block_c_init < 8; ++oc_block_c_init) {
      conv_global[oc_block_c_init] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init1 = 0; oc_block_c_init1 < 8; ++oc_block_c_init1) {
      conv_global[(oc_block_c_init1 + 8)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init2 = 0; oc_block_c_init2 < 8; ++oc_block_c_init2) {
      conv_global[(oc_block_c_init2 + 16)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init3 = 0; oc_block_c_init3 < 8; ++oc_block_c_init3) {
      conv_global[(oc_block_c_init3 + 24)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init4 = 0; oc_block_c_init4 < 8; ++oc_block_c_init4) {
      conv_global[(oc_block_c_init4 + 32)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init5 = 0; oc_block_c_init5 < 8; ++oc_block_c_init5) {
      conv_global[(oc_block_c_init5 + 40)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init6 = 0; oc_block_c_init6 < 8; ++oc_block_c_init6) {
      conv_global[(oc_block_c_init6 + 48)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init7 = 0; oc_block_c_init7 < 8; ++oc_block_c_init7) {
      conv_global[(oc_block_c_init7 + 56)] = 0.000000e+00f;
    }
    for (int32_t ic_outer = 0; ic_outer < 32; ++ic_outer) {
      for (int32_t kh = 0; kh < 3; ++kh) {
        for (int32_t kw = 0; kw < 3; ++kw) {
          for (int32_t ic_inner = 0; ic_inner < 8; ++ic_inner) {
            for (int32_t oc_block_c = 0; oc_block_c < 8; ++oc_block_c) {
              conv_global[oc_block_c] = (conv_global[oc_block_c] + ((( float*)data_vec)[(((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c)]));
            }
            for (int32_t oc_block_c1 = 0; oc_block_c1 < 8; ++oc_block_c1) {
              conv_global[(oc_block_c1 + 8)] = (conv_global[(oc_block_c1 + 8)] + ((( float*)data_vec)[((((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw) + 1)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c1)]));
            }
            for (int32_t oc_block_c2 = 0; oc_block_c2 < 8; ++oc_block_c2) {
              conv_global[(oc_block_c2 + 16)] = (conv_global[(oc_block_c2 + 16)] + ((( float*)data_vec)[((((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw) + 2)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c2)]));
            }
            for (int32_t oc_block_c3 = 0; oc_block_c3 < 8; ++oc_block_c3) {
              conv_global[(oc_block_c3 + 24)] = (conv_global[(oc_block_c3 + 24)] + ((( float*)data_vec)[((((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw) + 3)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c3)]));
            }
            for (int32_t oc_block_c4 = 0; oc_block_c4 < 8; ++oc_block_c4) {
              conv_global[(oc_block_c4 + 32)] = (conv_global[(oc_block_c4 + 32)] + ((( float*)data_vec)[((((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw) + 4)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c4)]));
            }
            for (int32_t oc_block_c5 = 0; oc_block_c5 < 8; ++oc_block_c5) {
              conv_global[(oc_block_c5 + 40)] = (conv_global[(oc_block_c5 + 40)] + ((( float*)data_vec)[((((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw) + 5)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c5)]));
            }
            for (int32_t oc_block_c6 = 0; oc_block_c6 < 8; ++oc_block_c6) {
              conv_global[(oc_block_c6 + 48)] = (conv_global[(oc_block_c6 + 48)] + ((( float*)data_vec)[((((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw) + 6)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c6)]));
            }
            for (int32_t oc_block_c7 = 0; oc_block_c7 < 8; ++oc_block_c7) {
              conv_global[(oc_block_c7 + 56)] = (conv_global[(oc_block_c7 + 56)] + ((( float*)data_vec)[((((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw) + 7)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c7)]));
            }
          }
        }
      }
    }
    for (int32_t ax3_inner = 0; ax3_inner < 8; ++ax3_inner) {
      for (int32_t ax1_inner = 0; ax1_inner < 8; ++ax1_inner) {
        T_add[(((((((ax1_outer_ax2_fused / 8) * 8) + ax1_inner) * 8) + (ax1_outer_ax2_fused % 8)) * 8) + ax3_inner)] = (conv_global[((ax3_inner * 8) + ax1_inner)] + placeholder2[(((((((ax1_outer_ax2_fused / 8) * 8) + ax1_inner) * 8) + (ax1_outer_ax2_fused % 8)) * 8) + ax3_inner)]);
      }
    }
  }
  if (TVMBackendFreeWorkspace(1, dev_id, kernel_vec) != 0) {
    return -1;
  }
  if (TVMBackendFreeWorkspace(1, dev_id, data_vec) != 0) {
    return -1;
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_nn_dense_nn_bias_add( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 4))) {
    TVMAPISetLastError("fused_nn_dense_nn_bias_add: num_args should be 4");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  void* arg3 = (((TVMValue*)args)[3].v_handle);
  int32_t arg3_code = (( int32_t*)arg_type_ids)[3];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((1 == ((int32_t)arg0_strides[1])) && (512 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!(((1 == ((int32_t)arg1_strides[1])) && (512 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder2 = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!((1 == ((int32_t)arg2_strides[0])))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  float* T_add = (float*)(((TVMArray*)arg3)[0].data);
  int64_t* arg3_shape = (int64_t*)(((TVMArray*)arg3)[0].shape);
  int64_t* arg3_strides = (int64_t*)(((TVMArray*)arg3)[0].strides);
  if (!(arg3_strides == NULL)) {
    if (!(((1 == ((int32_t)arg3_strides[1])) && (10 == ((int32_t)arg3_strides[0]))))) {
      TVMAPISetLastError("arg3.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_nn_dense_nn_bias_add: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_nn_dense_nn_bias_add: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_nn_dense_nn_bias_add: Expect arg[2] to be pointer");
    return -1;
  }
  if (!(((((arg3_code == 3) || (arg3_code == 13)) || (arg3_code == 7)) || (arg3_code == 4)))) {
    TVMAPISetLastError("fused_nn_dense_nn_bias_add: Expect arg[3] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((2 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 2");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 512))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((2 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 2");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 10))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 512))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 1");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 10))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((2 == (((TVMArray*)arg3)[0].ndim)))) {
    TVMAPISetLastError("arg3.ndim is expected to equal 2");
    return -1;
  }
  if (!(((((((TVMArray*)arg3)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg3)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg3)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg3.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg3_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[1]) == 10))) {
    TVMAPISetLastError("Argument arg3.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg3)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg3.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg3)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg3.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg3)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg3.device_id has an unsatisfied constraint");
    return -1;
  }
   float compute[10];
  for (int32_t y_outer_x_outer_fused = 0; y_outer_x_outer_fused < 10; ++y_outer_x_outer_fused) {
     float compute1[16];
    for (int32_t x_init = 0; x_init < 16; ++x_init) {
      compute1[x_init] = 0.000000e+00f;
    }
    for (int32_t k = 0; k < 32; ++k) {
      for (int32_t x = 0; x < 16; ++x) {
        compute1[x] = (compute1[x] + (placeholder[((k * 16) + x)] * placeholder1[((((y_outer_x_outer_fused * 32) + k) * 16) + x)]));
      }
    }
    compute[y_outer_x_outer_fused] = 0.000000e+00f;
    compute[y_outer_x_outer_fused] = (compute[y_outer_x_outer_fused] + compute1[0]);
    compute[y_outer_x_outer_fused] = (compute[y_outer_x_outer_fused] + compute1[1]);
    compute[y_outer_x_outer_fused] = (compute[y_outer_x_outer_fused] + compute1[2]);
    compute[y_outer_x_outer_fused] = (compute[y_outer_x_outer_fused] + compute1[3]);
    compute[y_outer_x_outer_fused] = (compute[y_outer_x_outer_fused] + compute1[4]);
    compute[y_outer_x_outer_fused] = (compute[y_outer_x_outer_fused] + compute1[5]);
    compute[y_outer_x_outer_fused] = (compute[y_outer_x_outer_fused] + compute1[6]);
    compute[y_outer_x_outer_fused] = (compute[y_outer_x_outer_fused] + compute1[7]);
    compute[y_outer_x_outer_fused] = (compute[y_outer_x_outer_fused] + compute1[8]);
    compute[y_outer_x_outer_fused] = (compute[y_outer_x_outer_fused] + compute1[9]);
    compute[y_outer_x_outer_fused] = (compute[y_outer_x_outer_fused] + compute1[10]);
    compute[y_outer_x_outer_fused] = (compute[y_outer_x_outer_fused] + compute1[11]);
    compute[y_outer_x_outer_fused] = (compute[y_outer_x_outer_fused] + compute1[12]);
    compute[y_outer_x_outer_fused] = (compute[y_outer_x_outer_fused] + compute1[13]);
    compute[y_outer_x_outer_fused] = (compute[y_outer_x_outer_fused] + compute1[14]);
    compute[y_outer_x_outer_fused] = (compute[y_outer_x_outer_fused] + compute1[15]);
  }
  for (int32_t ax1 = 0; ax1 < 10; ++ax1) {
    T_add[ax1] = (compute[ax1] + placeholder2[ax1]);
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_nn_global_avg_pool2d( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 2))) {
    TVMAPISetLastError("fused_nn_global_avg_pool2d: num_args should be 2");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (4 == ((int32_t)arg0_strides[2]))) && (16 == ((int32_t)arg0_strides[1]))) && (8192 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* tensor = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg1_strides[3])) && (1 == ((int32_t)arg1_strides[2]))) && (1 == ((int32_t)arg1_strides[1]))) && (512 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_nn_global_avg_pool2d: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_nn_global_avg_pool2d: Expect arg[1] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 512))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 4))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 4))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 512))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[3]) == 1))) {
    TVMAPISetLastError("Argument arg1.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 512; ++ax0_ax1_fused) {
    tensor[ax0_ax1_fused] = 0.000000e+00f;
    for (int32_t rv1 = 0; rv1 < 4; ++rv1) {
      for (int32_t rv2 = 0; rv2 < 4; ++rv2) {
        tensor[ax0_ax1_fused] = (tensor[ax0_ax1_fused] + (placeholder[((((ax0_ax1_fused * 4) + rv1) * 4) + rv2)] * 6.250000e-02f));
      }
    }
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_nn_conv2d_add_multiply_add_nn_relu_1( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 6))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu_1: num_args should be 6");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  void* arg3 = (((TVMValue*)args)[3].v_handle);
  int32_t arg3_code = (( int32_t*)arg_type_ids)[3];
  void* arg4 = (((TVMValue*)args)[4].v_handle);
  int32_t arg4_code = (( int32_t*)arg_type_ids)[4];
  void* arg5 = (((TVMValue*)args)[5].v_handle);
  int32_t arg5_code = (( int32_t*)arg_type_ids)[5];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (8 == ((int32_t)arg0_strides[2]))) && (64 == ((int32_t)arg0_strides[1]))) && (16384 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg1_strides[3])) && (3 == ((int32_t)arg1_strides[2]))) && (9 == ((int32_t)arg1_strides[1]))) && (2304 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder2 = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg2_strides[3])) && (8 == ((int32_t)arg2_strides[2]))) && (64 == ((int32_t)arg2_strides[1]))) && (16384 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder3 = (float*)(((TVMArray*)arg3)[0].data);
  int64_t* arg3_shape = (int64_t*)(((TVMArray*)arg3)[0].shape);
  int64_t* arg3_strides = (int64_t*)(((TVMArray*)arg3)[0].strides);
  if (!(arg3_strides == NULL)) {
    if (!((((1 == ((int32_t)arg3_strides[2])) && (1 == ((int32_t)arg3_strides[1]))) && (1 == ((int32_t)arg3_strides[0]))))) {
      TVMAPISetLastError("arg3.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder4 = (float*)(((TVMArray*)arg4)[0].data);
  int64_t* arg4_shape = (int64_t*)(((TVMArray*)arg4)[0].shape);
  int64_t* arg4_strides = (int64_t*)(((TVMArray*)arg4)[0].strides);
  if (!(arg4_strides == NULL)) {
    if (!((((1 == ((int32_t)arg4_strides[2])) && (1 == ((int32_t)arg4_strides[1]))) && (1 == ((int32_t)arg4_strides[0]))))) {
      TVMAPISetLastError("arg4.strides: expected to be compact array");
      return -1;
    }
  }
  float* T_relu = (float*)(((TVMArray*)arg5)[0].data);
  int64_t* arg5_shape = (int64_t*)(((TVMArray*)arg5)[0].shape);
  int64_t* arg5_strides = (int64_t*)(((TVMArray*)arg5)[0].strides);
  if (!(arg5_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg5_strides[3])) && (8 == ((int32_t)arg5_strides[2]))) && (64 == ((int32_t)arg5_strides[1]))) && (16384 == ((int32_t)arg5_strides[0]))))) {
      TVMAPISetLastError("arg5.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu_1: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu_1: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu_1: Expect arg[2] to be pointer");
    return -1;
  }
  if (!(((((arg3_code == 3) || (arg3_code == 13)) || (arg3_code == 7)) || (arg3_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu_1: Expect arg[3] to be pointer");
    return -1;
  }
  if (!(((((arg4_code == 3) || (arg4_code == 13)) || (arg4_code == 7)) || (arg4_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu_1: Expect arg[4] to be pointer");
    return -1;
  }
  if (!(((((arg5_code == 3) || (arg5_code == 13)) || (arg5_code == 7)) || (arg5_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu_1: Expect arg[5] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 256))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 8))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 8))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 256))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 256))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[3]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 256))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 8))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[3]) == 8))) {
    TVMAPISetLastError("Argument arg2.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg3)[0].ndim)))) {
    TVMAPISetLastError("arg3.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg3)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg3)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg3)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg3.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg3_shape[0]) == 256))) {
    TVMAPISetLastError("Argument arg3.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg3)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg3.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg3)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg3.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg3)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg3.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg4)[0].ndim)))) {
    TVMAPISetLastError("arg4.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg4)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg4)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg4)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg4.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg4_shape[0]) == 256))) {
    TVMAPISetLastError("Argument arg4.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg4.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg4.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg4)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg4.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg4)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg4.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg4)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg4.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg5)[0].ndim)))) {
    TVMAPISetLastError("arg5.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg5)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg5)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg5)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg5.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg5_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg5.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg5_shape[1]) == 256))) {
    TVMAPISetLastError("Argument arg5.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg5_shape[2]) == 8))) {
    TVMAPISetLastError("Argument arg5.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg5_shape[3]) == 8))) {
    TVMAPISetLastError("Argument arg5.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg5)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg5.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg5)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg5.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg5)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg5.device_id has an unsatisfied constraint");
    return -1;
  }
  void* data_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)102400, 2, 32);
  if (data_vec == NULL) {
    return -1;
  }
  void* kernel_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)2359296, 2, 32);
  if (kernel_vec == NULL) {
    return -1;
  }
  for (int32_t C_h_fused = 0; C_h_fused < 320; ++C_h_fused) {
    for (int32_t c = 0; c < 8; ++c) {
      for (int32_t w = 0; w < 10; ++w) {
        (( float*)data_vec)[((((C_h_fused * 8) + c) * 10) + w)] = (((((1 <= (C_h_fused % 10)) && ((C_h_fused % 10) < 9)) && (1 <= w)) && (w < 9)) ? placeholder[((((((((C_h_fused / 10) * 8) + c) * 8) + (C_h_fused % 10)) * 8) + w) + -9)] : 0.000000e+00f);
      }
    }
  }
  for (int32_t CO_h_fused = 0; CO_h_fused < 96; ++CO_h_fused) {
    for (int32_t CI = 0; CI < 32; ++CI) {
      for (int32_t w1 = 0; w1 < 3; ++w1) {
        for (int32_t ci = 0; ci < 8; ++ci) {
          for (int32_t co = 0; co < 8; ++co) {
            (( float*)kernel_vec)[(((((((((((CO_h_fused / 3) * 32) + CI) * 3) + (CO_h_fused % 3)) * 3) + w1) * 8) + ci) * 8) + co)] = placeholder1[(((((((((((CO_h_fused / 3) * 8) + co) * 32) + CI) * 8) + ci) * 3) + (CO_h_fused % 3)) * 3) + w1)];
          }
        }
      }
    }
  }
  for (int32_t ax1_outer_ax2_fused = 0; ax1_outer_ax2_fused < 256; ++ax1_outer_ax2_fused) {
     float conv_global[64];
    for (int32_t oc_block_c_init = 0; oc_block_c_init < 8; ++oc_block_c_init) {
      conv_global[oc_block_c_init] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init1 = 0; oc_block_c_init1 < 8; ++oc_block_c_init1) {
      conv_global[(oc_block_c_init1 + 8)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init2 = 0; oc_block_c_init2 < 8; ++oc_block_c_init2) {
      conv_global[(oc_block_c_init2 + 16)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init3 = 0; oc_block_c_init3 < 8; ++oc_block_c_init3) {
      conv_global[(oc_block_c_init3 + 24)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init4 = 0; oc_block_c_init4 < 8; ++oc_block_c_init4) {
      conv_global[(oc_block_c_init4 + 32)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init5 = 0; oc_block_c_init5 < 8; ++oc_block_c_init5) {
      conv_global[(oc_block_c_init5 + 40)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init6 = 0; oc_block_c_init6 < 8; ++oc_block_c_init6) {
      conv_global[(oc_block_c_init6 + 48)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init7 = 0; oc_block_c_init7 < 8; ++oc_block_c_init7) {
      conv_global[(oc_block_c_init7 + 56)] = 0.000000e+00f;
    }
    for (int32_t ic_outer = 0; ic_outer < 32; ++ic_outer) {
      for (int32_t kh = 0; kh < 3; ++kh) {
        for (int32_t kw = 0; kw < 3; ++kw) {
          for (int32_t ic_inner = 0; ic_inner < 8; ++ic_inner) {
            for (int32_t oc_block_c = 0; oc_block_c < 8; ++oc_block_c) {
              conv_global[oc_block_c] = (conv_global[oc_block_c] + ((( float*)data_vec)[(((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c)]));
            }
            for (int32_t oc_block_c1 = 0; oc_block_c1 < 8; ++oc_block_c1) {
              conv_global[(oc_block_c1 + 8)] = (conv_global[(oc_block_c1 + 8)] + ((( float*)data_vec)[((((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw) + 1)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c1)]));
            }
            for (int32_t oc_block_c2 = 0; oc_block_c2 < 8; ++oc_block_c2) {
              conv_global[(oc_block_c2 + 16)] = (conv_global[(oc_block_c2 + 16)] + ((( float*)data_vec)[((((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw) + 2)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c2)]));
            }
            for (int32_t oc_block_c3 = 0; oc_block_c3 < 8; ++oc_block_c3) {
              conv_global[(oc_block_c3 + 24)] = (conv_global[(oc_block_c3 + 24)] + ((( float*)data_vec)[((((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw) + 3)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c3)]));
            }
            for (int32_t oc_block_c4 = 0; oc_block_c4 < 8; ++oc_block_c4) {
              conv_global[(oc_block_c4 + 32)] = (conv_global[(oc_block_c4 + 32)] + ((( float*)data_vec)[((((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw) + 4)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c4)]));
            }
            for (int32_t oc_block_c5 = 0; oc_block_c5 < 8; ++oc_block_c5) {
              conv_global[(oc_block_c5 + 40)] = (conv_global[(oc_block_c5 + 40)] + ((( float*)data_vec)[((((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw) + 5)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c5)]));
            }
            for (int32_t oc_block_c6 = 0; oc_block_c6 < 8; ++oc_block_c6) {
              conv_global[(oc_block_c6 + 48)] = (conv_global[(oc_block_c6 + 48)] + ((( float*)data_vec)[((((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw) + 6)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c6)]));
            }
            for (int32_t oc_block_c7 = 0; oc_block_c7 < 8; ++oc_block_c7) {
              conv_global[(oc_block_c7 + 56)] = (conv_global[(oc_block_c7 + 56)] + ((( float*)data_vec)[((((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw) + 7)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c7)]));
            }
          }
        }
      }
    }
    for (int32_t ax3_inner = 0; ax3_inner < 8; ++ax3_inner) {
      for (int32_t ax1_inner = 0; ax1_inner < 8; ++ax1_inner) {
        T_relu[(((((((ax1_outer_ax2_fused / 8) * 8) + ax1_inner) * 8) + (ax1_outer_ax2_fused % 8)) * 8) + ax3_inner)] = ((((conv_global[((ax3_inner * 8) + ax1_inner)] + placeholder2[(((((((ax1_outer_ax2_fused / 8) * 8) + ax1_inner) * 8) + (ax1_outer_ax2_fused % 8)) * 8) + ax3_inner)]) * placeholder3[(((ax1_outer_ax2_fused / 8) * 8) + ax1_inner)]) + placeholder4[(((ax1_outer_ax2_fused / 8) * 8) + ax1_inner)])) > (0.000000e+00f) ? ((((conv_global[((ax3_inner * 8) + ax1_inner)] + placeholder2[(((((((ax1_outer_ax2_fused / 8) * 8) + ax1_inner) * 8) + (ax1_outer_ax2_fused % 8)) * 8) + ax3_inner)]) * placeholder3[(((ax1_outer_ax2_fused / 8) * 8) + ax1_inner)]) + placeholder4[(((ax1_outer_ax2_fused / 8) * 8) + ax1_inner)])) : (0.000000e+00f);
      }
    }
  }
  if (TVMBackendFreeWorkspace(1, dev_id, kernel_vec) != 0) {
    return -1;
  }
  if (TVMBackendFreeWorkspace(1, dev_id, data_vec) != 0) {
    return -1;
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_nn_conv2d_add_multiply_add_nn_relu_2( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 6))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu_2: num_args should be 6");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  void* arg3 = (((TVMValue*)args)[3].v_handle);
  int32_t arg3_code = (( int32_t*)arg_type_ids)[3];
  void* arg4 = (((TVMValue*)args)[4].v_handle);
  int32_t arg4_code = (( int32_t*)arg_type_ids)[4];
  void* arg5 = (((TVMValue*)args)[5].v_handle);
  int32_t arg5_code = (( int32_t*)arg_type_ids)[5];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (16 == ((int32_t)arg0_strides[2]))) && (256 == ((int32_t)arg0_strides[1]))) && (32768 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg1_strides[3])) && (3 == ((int32_t)arg1_strides[2]))) && (9 == ((int32_t)arg1_strides[1]))) && (1152 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder2 = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg2_strides[3])) && (16 == ((int32_t)arg2_strides[2]))) && (256 == ((int32_t)arg2_strides[1]))) && (32768 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder3 = (float*)(((TVMArray*)arg3)[0].data);
  int64_t* arg3_shape = (int64_t*)(((TVMArray*)arg3)[0].shape);
  int64_t* arg3_strides = (int64_t*)(((TVMArray*)arg3)[0].strides);
  if (!(arg3_strides == NULL)) {
    if (!((((1 == ((int32_t)arg3_strides[2])) && (1 == ((int32_t)arg3_strides[1]))) && (1 == ((int32_t)arg3_strides[0]))))) {
      TVMAPISetLastError("arg3.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder4 = (float*)(((TVMArray*)arg4)[0].data);
  int64_t* arg4_shape = (int64_t*)(((TVMArray*)arg4)[0].shape);
  int64_t* arg4_strides = (int64_t*)(((TVMArray*)arg4)[0].strides);
  if (!(arg4_strides == NULL)) {
    if (!((((1 == ((int32_t)arg4_strides[2])) && (1 == ((int32_t)arg4_strides[1]))) && (1 == ((int32_t)arg4_strides[0]))))) {
      TVMAPISetLastError("arg4.strides: expected to be compact array");
      return -1;
    }
  }
  float* T_relu = (float*)(((TVMArray*)arg5)[0].data);
  int64_t* arg5_shape = (int64_t*)(((TVMArray*)arg5)[0].shape);
  int64_t* arg5_strides = (int64_t*)(((TVMArray*)arg5)[0].strides);
  if (!(arg5_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg5_strides[3])) && (16 == ((int32_t)arg5_strides[2]))) && (256 == ((int32_t)arg5_strides[1]))) && (32768 == ((int32_t)arg5_strides[0]))))) {
      TVMAPISetLastError("arg5.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu_2: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu_2: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu_2: Expect arg[2] to be pointer");
    return -1;
  }
  if (!(((((arg3_code == 3) || (arg3_code == 13)) || (arg3_code == 7)) || (arg3_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu_2: Expect arg[3] to be pointer");
    return -1;
  }
  if (!(((((arg4_code == 3) || (arg4_code == 13)) || (arg4_code == 7)) || (arg4_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu_2: Expect arg[4] to be pointer");
    return -1;
  }
  if (!(((((arg5_code == 3) || (arg5_code == 13)) || (arg5_code == 7)) || (arg5_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu_2: Expect arg[5] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 128))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 16))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 16))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 128))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 128))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[3]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 128))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 16))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[3]) == 16))) {
    TVMAPISetLastError("Argument arg2.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg3)[0].ndim)))) {
    TVMAPISetLastError("arg3.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg3)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg3)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg3)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg3.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg3_shape[0]) == 128))) {
    TVMAPISetLastError("Argument arg3.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg3)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg3.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg3)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg3.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg3)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg3.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg4)[0].ndim)))) {
    TVMAPISetLastError("arg4.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg4)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg4)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg4)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg4.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg4_shape[0]) == 128))) {
    TVMAPISetLastError("Argument arg4.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg4.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg4.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg4)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg4.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg4)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg4.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg4)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg4.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg5)[0].ndim)))) {
    TVMAPISetLastError("arg5.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg5)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg5)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg5)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg5.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg5_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg5.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg5_shape[1]) == 128))) {
    TVMAPISetLastError("Argument arg5.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg5_shape[2]) == 16))) {
    TVMAPISetLastError("Argument arg5.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg5_shape[3]) == 16))) {
    TVMAPISetLastError("Argument arg5.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg5)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg5.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg5)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg5.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg5)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg5.device_id has an unsatisfied constraint");
    return -1;
  }
  void* data_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)165888, 2, 32);
  if (data_vec == NULL) {
    return -1;
  }
  void* kernel_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)589824, 2, 32);
  if (kernel_vec == NULL) {
    return -1;
  }
  for (int32_t C_h_fused = 0; C_h_fused < 288; ++C_h_fused) {
    for (int32_t c = 0; c < 8; ++c) {
      for (int32_t w = 0; w < 18; ++w) {
        (( float*)data_vec)[((((C_h_fused * 8) + c) * 18) + w)] = (((((1 <= (C_h_fused % 18)) && ((C_h_fused % 18) < 17)) && (1 <= w)) && (w < 17)) ? placeholder[((((((((C_h_fused / 18) * 8) + c) * 16) + (C_h_fused % 18)) * 16) + w) + -17)] : 0.000000e+00f);
      }
    }
  }
  for (int32_t CO_h_fused = 0; CO_h_fused < 48; ++CO_h_fused) {
    for (int32_t CI = 0; CI < 16; ++CI) {
      for (int32_t w1 = 0; w1 < 3; ++w1) {
        for (int32_t ci = 0; ci < 8; ++ci) {
          for (int32_t co = 0; co < 8; ++co) {
            (( float*)kernel_vec)[(((((((((((CO_h_fused / 3) * 16) + CI) * 3) + (CO_h_fused % 3)) * 3) + w1) * 8) + ci) * 8) + co)] = placeholder1[(((((((((((CO_h_fused / 3) * 8) + co) * 16) + CI) * 8) + ci) * 3) + (CO_h_fused % 3)) * 3) + w1)];
          }
        }
      }
    }
  }
  for (int32_t ax1_outer_ax2_fused = 0; ax1_outer_ax2_fused < 256; ++ax1_outer_ax2_fused) {
     float conv_global[128];
    for (int32_t oc_block_c_init = 0; oc_block_c_init < 8; ++oc_block_c_init) {
      conv_global[oc_block_c_init] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init1 = 0; oc_block_c_init1 < 8; ++oc_block_c_init1) {
      conv_global[(oc_block_c_init1 + 8)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init2 = 0; oc_block_c_init2 < 8; ++oc_block_c_init2) {
      conv_global[(oc_block_c_init2 + 16)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init3 = 0; oc_block_c_init3 < 8; ++oc_block_c_init3) {
      conv_global[(oc_block_c_init3 + 24)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init4 = 0; oc_block_c_init4 < 8; ++oc_block_c_init4) {
      conv_global[(oc_block_c_init4 + 32)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init5 = 0; oc_block_c_init5 < 8; ++oc_block_c_init5) {
      conv_global[(oc_block_c_init5 + 40)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init6 = 0; oc_block_c_init6 < 8; ++oc_block_c_init6) {
      conv_global[(oc_block_c_init6 + 48)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init7 = 0; oc_block_c_init7 < 8; ++oc_block_c_init7) {
      conv_global[(oc_block_c_init7 + 56)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init8 = 0; oc_block_c_init8 < 8; ++oc_block_c_init8) {
      conv_global[(oc_block_c_init8 + 64)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init9 = 0; oc_block_c_init9 < 8; ++oc_block_c_init9) {
      conv_global[(oc_block_c_init9 + 72)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init10 = 0; oc_block_c_init10 < 8; ++oc_block_c_init10) {
      conv_global[(oc_block_c_init10 + 80)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init11 = 0; oc_block_c_init11 < 8; ++oc_block_c_init11) {
      conv_global[(oc_block_c_init11 + 88)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init12 = 0; oc_block_c_init12 < 8; ++oc_block_c_init12) {
      conv_global[(oc_block_c_init12 + 96)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init13 = 0; oc_block_c_init13 < 8; ++oc_block_c_init13) {
      conv_global[(oc_block_c_init13 + 104)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init14 = 0; oc_block_c_init14 < 8; ++oc_block_c_init14) {
      conv_global[(oc_block_c_init14 + 112)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init15 = 0; oc_block_c_init15 < 8; ++oc_block_c_init15) {
      conv_global[(oc_block_c_init15 + 120)] = 0.000000e+00f;
    }
    for (int32_t ic_outer = 0; ic_outer < 16; ++ic_outer) {
      for (int32_t kh = 0; kh < 3; ++kh) {
        for (int32_t kw = 0; kw < 3; ++kw) {
          for (int32_t ic_inner = 0; ic_inner < 8; ++ic_inner) {
            for (int32_t oc_block_c = 0; oc_block_c < 8; ++oc_block_c) {
              conv_global[oc_block_c] = (conv_global[oc_block_c] + ((( float*)data_vec)[(((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c)]));
            }
            for (int32_t oc_block_c1 = 0; oc_block_c1 < 8; ++oc_block_c1) {
              conv_global[(oc_block_c1 + 8)] = (conv_global[(oc_block_c1 + 8)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 1)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c1)]));
            }
            for (int32_t oc_block_c2 = 0; oc_block_c2 < 8; ++oc_block_c2) {
              conv_global[(oc_block_c2 + 16)] = (conv_global[(oc_block_c2 + 16)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 2)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c2)]));
            }
            for (int32_t oc_block_c3 = 0; oc_block_c3 < 8; ++oc_block_c3) {
              conv_global[(oc_block_c3 + 24)] = (conv_global[(oc_block_c3 + 24)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 3)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c3)]));
            }
            for (int32_t oc_block_c4 = 0; oc_block_c4 < 8; ++oc_block_c4) {
              conv_global[(oc_block_c4 + 32)] = (conv_global[(oc_block_c4 + 32)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 4)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c4)]));
            }
            for (int32_t oc_block_c5 = 0; oc_block_c5 < 8; ++oc_block_c5) {
              conv_global[(oc_block_c5 + 40)] = (conv_global[(oc_block_c5 + 40)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 5)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c5)]));
            }
            for (int32_t oc_block_c6 = 0; oc_block_c6 < 8; ++oc_block_c6) {
              conv_global[(oc_block_c6 + 48)] = (conv_global[(oc_block_c6 + 48)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 6)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c6)]));
            }
            for (int32_t oc_block_c7 = 0; oc_block_c7 < 8; ++oc_block_c7) {
              conv_global[(oc_block_c7 + 56)] = (conv_global[(oc_block_c7 + 56)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 7)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c7)]));
            }
            for (int32_t oc_block_c8 = 0; oc_block_c8 < 8; ++oc_block_c8) {
              conv_global[(oc_block_c8 + 64)] = (conv_global[(oc_block_c8 + 64)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 8)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c8)]));
            }
            for (int32_t oc_block_c9 = 0; oc_block_c9 < 8; ++oc_block_c9) {
              conv_global[(oc_block_c9 + 72)] = (conv_global[(oc_block_c9 + 72)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 9)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c9)]));
            }
            for (int32_t oc_block_c10 = 0; oc_block_c10 < 8; ++oc_block_c10) {
              conv_global[(oc_block_c10 + 80)] = (conv_global[(oc_block_c10 + 80)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 10)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c10)]));
            }
            for (int32_t oc_block_c11 = 0; oc_block_c11 < 8; ++oc_block_c11) {
              conv_global[(oc_block_c11 + 88)] = (conv_global[(oc_block_c11 + 88)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 11)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c11)]));
            }
            for (int32_t oc_block_c12 = 0; oc_block_c12 < 8; ++oc_block_c12) {
              conv_global[(oc_block_c12 + 96)] = (conv_global[(oc_block_c12 + 96)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 12)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c12)]));
            }
            for (int32_t oc_block_c13 = 0; oc_block_c13 < 8; ++oc_block_c13) {
              conv_global[(oc_block_c13 + 104)] = (conv_global[(oc_block_c13 + 104)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 13)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c13)]));
            }
            for (int32_t oc_block_c14 = 0; oc_block_c14 < 8; ++oc_block_c14) {
              conv_global[(oc_block_c14 + 112)] = (conv_global[(oc_block_c14 + 112)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 14)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c14)]));
            }
            for (int32_t oc_block_c15 = 0; oc_block_c15 < 8; ++oc_block_c15) {
              conv_global[(oc_block_c15 + 120)] = (conv_global[(oc_block_c15 + 120)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 15)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c15)]));
            }
          }
        }
      }
    }
    for (int32_t ax3_inner = 0; ax3_inner < 16; ++ax3_inner) {
      for (int32_t ax1_inner = 0; ax1_inner < 8; ++ax1_inner) {
        T_relu[(((((((ax1_outer_ax2_fused / 16) * 8) + ax1_inner) * 16) + (ax1_outer_ax2_fused % 16)) * 16) + ax3_inner)] = ((((conv_global[((ax3_inner * 8) + ax1_inner)] + placeholder2[(((((((ax1_outer_ax2_fused / 16) * 8) + ax1_inner) * 16) + (ax1_outer_ax2_fused % 16)) * 16) + ax3_inner)]) * placeholder3[(((ax1_outer_ax2_fused / 16) * 8) + ax1_inner)]) + placeholder4[(((ax1_outer_ax2_fused / 16) * 8) + ax1_inner)])) > (0.000000e+00f) ? ((((conv_global[((ax3_inner * 8) + ax1_inner)] + placeholder2[(((((((ax1_outer_ax2_fused / 16) * 8) + ax1_inner) * 16) + (ax1_outer_ax2_fused % 16)) * 16) + ax3_inner)]) * placeholder3[(((ax1_outer_ax2_fused / 16) * 8) + ax1_inner)]) + placeholder4[(((ax1_outer_ax2_fused / 16) * 8) + ax1_inner)])) : (0.000000e+00f);
      }
    }
  }
  if (TVMBackendFreeWorkspace(1, dev_id, kernel_vec) != 0) {
    return -1;
  }
  if (TVMBackendFreeWorkspace(1, dev_id, data_vec) != 0) {
    return -1;
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_nn_conv2d_add_multiply_add_nn_relu_3( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 6))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu_3: num_args should be 6");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  void* arg3 = (((TVMValue*)args)[3].v_handle);
  int32_t arg3_code = (( int32_t*)arg_type_ids)[3];
  void* arg4 = (((TVMValue*)args)[4].v_handle);
  int32_t arg4_code = (( int32_t*)arg_type_ids)[4];
  void* arg5 = (((TVMValue*)args)[5].v_handle);
  int32_t arg5_code = (( int32_t*)arg_type_ids)[5];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (32 == ((int32_t)arg0_strides[2]))) && (1024 == ((int32_t)arg0_strides[1]))) && (65536 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg1_strides[3])) && (3 == ((int32_t)arg1_strides[2]))) && (9 == ((int32_t)arg1_strides[1]))) && (576 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder2 = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg2_strides[3])) && (32 == ((int32_t)arg2_strides[2]))) && (1024 == ((int32_t)arg2_strides[1]))) && (65536 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder3 = (float*)(((TVMArray*)arg3)[0].data);
  int64_t* arg3_shape = (int64_t*)(((TVMArray*)arg3)[0].shape);
  int64_t* arg3_strides = (int64_t*)(((TVMArray*)arg3)[0].strides);
  if (!(arg3_strides == NULL)) {
    if (!((((1 == ((int32_t)arg3_strides[2])) && (1 == ((int32_t)arg3_strides[1]))) && (1 == ((int32_t)arg3_strides[0]))))) {
      TVMAPISetLastError("arg3.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder4 = (float*)(((TVMArray*)arg4)[0].data);
  int64_t* arg4_shape = (int64_t*)(((TVMArray*)arg4)[0].shape);
  int64_t* arg4_strides = (int64_t*)(((TVMArray*)arg4)[0].strides);
  if (!(arg4_strides == NULL)) {
    if (!((((1 == ((int32_t)arg4_strides[2])) && (1 == ((int32_t)arg4_strides[1]))) && (1 == ((int32_t)arg4_strides[0]))))) {
      TVMAPISetLastError("arg4.strides: expected to be compact array");
      return -1;
    }
  }
  float* T_relu = (float*)(((TVMArray*)arg5)[0].data);
  int64_t* arg5_shape = (int64_t*)(((TVMArray*)arg5)[0].shape);
  int64_t* arg5_strides = (int64_t*)(((TVMArray*)arg5)[0].strides);
  if (!(arg5_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg5_strides[3])) && (32 == ((int32_t)arg5_strides[2]))) && (1024 == ((int32_t)arg5_strides[1]))) && (65536 == ((int32_t)arg5_strides[0]))))) {
      TVMAPISetLastError("arg5.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu_3: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu_3: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu_3: Expect arg[2] to be pointer");
    return -1;
  }
  if (!(((((arg3_code == 3) || (arg3_code == 13)) || (arg3_code == 7)) || (arg3_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu_3: Expect arg[3] to be pointer");
    return -1;
  }
  if (!(((((arg4_code == 3) || (arg4_code == 13)) || (arg4_code == 7)) || (arg4_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu_3: Expect arg[4] to be pointer");
    return -1;
  }
  if (!(((((arg5_code == 3) || (arg5_code == 13)) || (arg5_code == 7)) || (arg5_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu_3: Expect arg[5] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 64))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 32))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 32))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 64))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 64))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[3]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 64))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 32))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[3]) == 32))) {
    TVMAPISetLastError("Argument arg2.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg3)[0].ndim)))) {
    TVMAPISetLastError("arg3.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg3)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg3)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg3)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg3.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg3_shape[0]) == 64))) {
    TVMAPISetLastError("Argument arg3.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg3)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg3.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg3)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg3.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg3)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg3.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg4)[0].ndim)))) {
    TVMAPISetLastError("arg4.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg4)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg4)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg4)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg4.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg4_shape[0]) == 64))) {
    TVMAPISetLastError("Argument arg4.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg4.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg4.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg4)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg4.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg4)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg4.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg4)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg4.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg5)[0].ndim)))) {
    TVMAPISetLastError("arg5.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg5)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg5)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg5)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg5.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg5_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg5.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg5_shape[1]) == 64))) {
    TVMAPISetLastError("Argument arg5.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg5_shape[2]) == 32))) {
    TVMAPISetLastError("Argument arg5.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg5_shape[3]) == 32))) {
    TVMAPISetLastError("Argument arg5.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg5)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg5.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg5)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg5.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg5)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg5.device_id has an unsatisfied constraint");
    return -1;
  }
  void* data_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)295936, 2, 32);
  if (data_vec == NULL) {
    return -1;
  }
  void* kernel_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)147456, 2, 32);
  if (kernel_vec == NULL) {
    return -1;
  }
  for (int32_t C_h_fused = 0; C_h_fused < 272; ++C_h_fused) {
    for (int32_t c = 0; c < 8; ++c) {
      for (int32_t w = 0; w < 34; ++w) {
        (( float*)data_vec)[((((C_h_fused * 8) + c) * 34) + w)] = (((((1 <= (C_h_fused % 34)) && ((C_h_fused % 34) < 33)) && (1 <= w)) && (w < 33)) ? placeholder[((((((((C_h_fused / 34) * 8) + c) * 32) + (C_h_fused % 34)) * 32) + w) + -33)] : 0.000000e+00f);
      }
    }
  }
  for (int32_t CO_h_fused = 0; CO_h_fused < 24; ++CO_h_fused) {
    for (int32_t CI = 0; CI < 8; ++CI) {
      for (int32_t w1 = 0; w1 < 3; ++w1) {
        for (int32_t ci = 0; ci < 8; ++ci) {
          for (int32_t co = 0; co < 8; ++co) {
            (( float*)kernel_vec)[(((((((((((CO_h_fused / 3) * 8) + CI) * 3) + (CO_h_fused % 3)) * 3) + w1) * 8) + ci) * 8) + co)] = placeholder1[(((((((((((CO_h_fused / 3) * 8) + co) * 8) + CI) * 8) + ci) * 3) + (CO_h_fused % 3)) * 3) + w1)];
          }
        }
      }
    }
  }
  for (int32_t ax1_outer_ax2_fused = 0; ax1_outer_ax2_fused < 256; ++ax1_outer_ax2_fused) {
    void* conv = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)1024, 2, 32);
    if (conv == NULL) {
      return -1;
    }
     float conv_global[128];
    for (int32_t ow_outer = 0; ow_outer < 2; ++ow_outer) {
      for (int32_t oc_block_c_init = 0; oc_block_c_init < 8; ++oc_block_c_init) {
        conv_global[oc_block_c_init] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init1 = 0; oc_block_c_init1 < 8; ++oc_block_c_init1) {
        conv_global[(oc_block_c_init1 + 8)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init2 = 0; oc_block_c_init2 < 8; ++oc_block_c_init2) {
        conv_global[(oc_block_c_init2 + 16)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init3 = 0; oc_block_c_init3 < 8; ++oc_block_c_init3) {
        conv_global[(oc_block_c_init3 + 24)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init4 = 0; oc_block_c_init4 < 8; ++oc_block_c_init4) {
        conv_global[(oc_block_c_init4 + 32)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init5 = 0; oc_block_c_init5 < 8; ++oc_block_c_init5) {
        conv_global[(oc_block_c_init5 + 40)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init6 = 0; oc_block_c_init6 < 8; ++oc_block_c_init6) {
        conv_global[(oc_block_c_init6 + 48)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init7 = 0; oc_block_c_init7 < 8; ++oc_block_c_init7) {
        conv_global[(oc_block_c_init7 + 56)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init8 = 0; oc_block_c_init8 < 8; ++oc_block_c_init8) {
        conv_global[(oc_block_c_init8 + 64)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init9 = 0; oc_block_c_init9 < 8; ++oc_block_c_init9) {
        conv_global[(oc_block_c_init9 + 72)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init10 = 0; oc_block_c_init10 < 8; ++oc_block_c_init10) {
        conv_global[(oc_block_c_init10 + 80)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init11 = 0; oc_block_c_init11 < 8; ++oc_block_c_init11) {
        conv_global[(oc_block_c_init11 + 88)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init12 = 0; oc_block_c_init12 < 8; ++oc_block_c_init12) {
        conv_global[(oc_block_c_init12 + 96)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init13 = 0; oc_block_c_init13 < 8; ++oc_block_c_init13) {
        conv_global[(oc_block_c_init13 + 104)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init14 = 0; oc_block_c_init14 < 8; ++oc_block_c_init14) {
        conv_global[(oc_block_c_init14 + 112)] = 0.000000e+00f;
      }
      for (int32_t oc_block_c_init15 = 0; oc_block_c_init15 < 8; ++oc_block_c_init15) {
        conv_global[(oc_block_c_init15 + 120)] = 0.000000e+00f;
      }
      for (int32_t ic_outer = 0; ic_outer < 8; ++ic_outer) {
        for (int32_t kh = 0; kh < 3; ++kh) {
          for (int32_t kw = 0; kw < 3; ++kw) {
            for (int32_t ic_inner = 0; ic_inner < 8; ++ic_inner) {
              for (int32_t oc_block_c = 0; oc_block_c < 8; ++oc_block_c) {
                conv_global[oc_block_c] = (conv_global[oc_block_c] + ((( float*)data_vec)[((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c)]));
              }
              for (int32_t oc_block_c1 = 0; oc_block_c1 < 8; ++oc_block_c1) {
                conv_global[(oc_block_c1 + 8)] = (conv_global[(oc_block_c1 + 8)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 1)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c1)]));
              }
              for (int32_t oc_block_c2 = 0; oc_block_c2 < 8; ++oc_block_c2) {
                conv_global[(oc_block_c2 + 16)] = (conv_global[(oc_block_c2 + 16)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 2)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c2)]));
              }
              for (int32_t oc_block_c3 = 0; oc_block_c3 < 8; ++oc_block_c3) {
                conv_global[(oc_block_c3 + 24)] = (conv_global[(oc_block_c3 + 24)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 3)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c3)]));
              }
              for (int32_t oc_block_c4 = 0; oc_block_c4 < 8; ++oc_block_c4) {
                conv_global[(oc_block_c4 + 32)] = (conv_global[(oc_block_c4 + 32)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 4)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c4)]));
              }
              for (int32_t oc_block_c5 = 0; oc_block_c5 < 8; ++oc_block_c5) {
                conv_global[(oc_block_c5 + 40)] = (conv_global[(oc_block_c5 + 40)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 5)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c5)]));
              }
              for (int32_t oc_block_c6 = 0; oc_block_c6 < 8; ++oc_block_c6) {
                conv_global[(oc_block_c6 + 48)] = (conv_global[(oc_block_c6 + 48)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 6)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c6)]));
              }
              for (int32_t oc_block_c7 = 0; oc_block_c7 < 8; ++oc_block_c7) {
                conv_global[(oc_block_c7 + 56)] = (conv_global[(oc_block_c7 + 56)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 7)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c7)]));
              }
              for (int32_t oc_block_c8 = 0; oc_block_c8 < 8; ++oc_block_c8) {
                conv_global[(oc_block_c8 + 64)] = (conv_global[(oc_block_c8 + 64)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 8)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c8)]));
              }
              for (int32_t oc_block_c9 = 0; oc_block_c9 < 8; ++oc_block_c9) {
                conv_global[(oc_block_c9 + 72)] = (conv_global[(oc_block_c9 + 72)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 9)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c9)]));
              }
              for (int32_t oc_block_c10 = 0; oc_block_c10 < 8; ++oc_block_c10) {
                conv_global[(oc_block_c10 + 80)] = (conv_global[(oc_block_c10 + 80)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 10)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c10)]));
              }
              for (int32_t oc_block_c11 = 0; oc_block_c11 < 8; ++oc_block_c11) {
                conv_global[(oc_block_c11 + 88)] = (conv_global[(oc_block_c11 + 88)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 11)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c11)]));
              }
              for (int32_t oc_block_c12 = 0; oc_block_c12 < 8; ++oc_block_c12) {
                conv_global[(oc_block_c12 + 96)] = (conv_global[(oc_block_c12 + 96)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 12)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c12)]));
              }
              for (int32_t oc_block_c13 = 0; oc_block_c13 < 8; ++oc_block_c13) {
                conv_global[(oc_block_c13 + 104)] = (conv_global[(oc_block_c13 + 104)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 13)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c13)]));
              }
              for (int32_t oc_block_c14 = 0; oc_block_c14 < 8; ++oc_block_c14) {
                conv_global[(oc_block_c14 + 112)] = (conv_global[(oc_block_c14 + 112)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 14)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c14)]));
              }
              for (int32_t oc_block_c15 = 0; oc_block_c15 < 8; ++oc_block_c15) {
                conv_global[(oc_block_c15 + 120)] = (conv_global[(oc_block_c15 + 120)] + ((( float*)data_vec)[(((((((((ic_outer * 34) + kh) + (ax1_outer_ax2_fused % 32)) * 8) + ic_inner) * 34) + (ow_outer * 16)) + kw) + 15)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 32) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c15)]));
              }
            }
          }
        }
      }
      for (int32_t ow_inner = 0; ow_inner < 16; ++ow_inner) {
        for (int32_t oc_block = 0; oc_block < 8; ++oc_block) {
          (( float*)conv)[((((ow_outer * 16) + ow_inner) * 8) + oc_block)] = conv_global[((ow_inner * 8) + oc_block)];
        }
      }
    }
    for (int32_t ax3_outer = 0; ax3_outer < 2; ++ax3_outer) {
      for (int32_t ax3_inner = 0; ax3_inner < 16; ++ax3_inner) {
        for (int32_t ax1_inner = 0; ax1_inner < 8; ++ax1_inner) {
          T_relu[(((((((((ax1_outer_ax2_fused / 32) * 8) + ax1_inner) * 32) + (ax1_outer_ax2_fused % 32)) * 2) + ax3_outer) * 16) + ax3_inner)] = (((((( float*)conv)[((((ax3_outer * 16) + ax3_inner) * 8) + ax1_inner)] + placeholder2[(((((((((ax1_outer_ax2_fused / 32) * 8) + ax1_inner) * 32) + (ax1_outer_ax2_fused % 32)) * 2) + ax3_outer) * 16) + ax3_inner)]) * placeholder3[(((ax1_outer_ax2_fused / 32) * 8) + ax1_inner)]) + placeholder4[(((ax1_outer_ax2_fused / 32) * 8) + ax1_inner)])) > (0.000000e+00f) ? (((((( float*)conv)[((((ax3_outer * 16) + ax3_inner) * 8) + ax1_inner)] + placeholder2[(((((((((ax1_outer_ax2_fused / 32) * 8) + ax1_inner) * 32) + (ax1_outer_ax2_fused % 32)) * 2) + ax3_outer) * 16) + ax3_inner)]) * placeholder3[(((ax1_outer_ax2_fused / 32) * 8) + ax1_inner)]) + placeholder4[(((ax1_outer_ax2_fused / 32) * 8) + ax1_inner)])) : (0.000000e+00f);
        }
      }
    }
    if (TVMBackendFreeWorkspace(1, dev_id, conv) != 0) {
      return -1;
    }
  }
  if (TVMBackendFreeWorkspace(1, dev_id, kernel_vec) != 0) {
    return -1;
  }
  if (TVMBackendFreeWorkspace(1, dev_id, data_vec) != 0) {
    return -1;
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_nn_conv2d_add( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 4))) {
    TVMAPISetLastError("fused_nn_conv2d_add: num_args should be 4");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  void* arg3 = (((TVMValue*)args)[3].v_handle);
  int32_t arg3_code = (( int32_t*)arg_type_ids)[3];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (4 == ((int32_t)arg0_strides[2]))) && (16 == ((int32_t)arg0_strides[1]))) && (8192 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg1_strides[3])) && (3 == ((int32_t)arg1_strides[2]))) && (9 == ((int32_t)arg1_strides[1]))) && (4608 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder2 = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg2_strides[3])) && (4 == ((int32_t)arg2_strides[2]))) && (16 == ((int32_t)arg2_strides[1]))) && (8192 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  float* T_add = (float*)(((TVMArray*)arg3)[0].data);
  int64_t* arg3_shape = (int64_t*)(((TVMArray*)arg3)[0].shape);
  int64_t* arg3_strides = (int64_t*)(((TVMArray*)arg3)[0].strides);
  if (!(arg3_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg3_strides[3])) && (4 == ((int32_t)arg3_strides[2]))) && (16 == ((int32_t)arg3_strides[1]))) && (8192 == ((int32_t)arg3_strides[0]))))) {
      TVMAPISetLastError("arg3.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add: Expect arg[2] to be pointer");
    return -1;
  }
  if (!(((((arg3_code == 3) || (arg3_code == 13)) || (arg3_code == 7)) || (arg3_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add: Expect arg[3] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 512))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 4))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 4))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 512))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 512))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[3]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 512))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 4))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[3]) == 4))) {
    TVMAPISetLastError("Argument arg2.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg3)[0].ndim)))) {
    TVMAPISetLastError("arg3.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg3)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg3)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg3)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg3.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg3_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[1]) == 512))) {
    TVMAPISetLastError("Argument arg3.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[2]) == 4))) {
    TVMAPISetLastError("Argument arg3.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[3]) == 4))) {
    TVMAPISetLastError("Argument arg3.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg3)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg3.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg3)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg3.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg3)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg3.device_id has an unsatisfied constraint");
    return -1;
  }
  void* data_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)73728, 2, 32);
  if (data_vec == NULL) {
    return -1;
  }
  void* kernel_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)9437184, 2, 32);
  if (kernel_vec == NULL) {
    return -1;
  }
  for (int32_t C_h_fused = 0; C_h_fused < 384; ++C_h_fused) {
    for (int32_t c = 0; c < 8; ++c) {
      for (int32_t w = 0; w < 6; ++w) {
        (( float*)data_vec)[((((C_h_fused * 8) + c) * 6) + w)] = (((((1 <= (C_h_fused % 6)) && ((C_h_fused % 6) < 5)) && (1 <= w)) && (w < 5)) ? placeholder[((((((((C_h_fused / 6) * 8) + c) * 4) + (C_h_fused % 6)) * 4) + w) + -5)] : 0.000000e+00f);
      }
    }
  }
  for (int32_t CO_h_fused = 0; CO_h_fused < 192; ++CO_h_fused) {
    for (int32_t CI = 0; CI < 64; ++CI) {
      for (int32_t w1 = 0; w1 < 3; ++w1) {
        for (int32_t ci = 0; ci < 8; ++ci) {
          for (int32_t co = 0; co < 8; ++co) {
            (( float*)kernel_vec)[(((((((((((CO_h_fused / 3) * 64) + CI) * 3) + (CO_h_fused % 3)) * 3) + w1) * 8) + ci) * 8) + co)] = placeholder1[(((((((((((CO_h_fused / 3) * 8) + co) * 64) + CI) * 8) + ci) * 3) + (CO_h_fused % 3)) * 3) + w1)];
          }
        }
      }
    }
  }
  for (int32_t ax1_outer_ax2_fused = 0; ax1_outer_ax2_fused < 256; ++ax1_outer_ax2_fused) {
     float conv_global[32];
    for (int32_t oc_block_c_init = 0; oc_block_c_init < 8; ++oc_block_c_init) {
      conv_global[oc_block_c_init] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init1 = 0; oc_block_c_init1 < 8; ++oc_block_c_init1) {
      conv_global[(oc_block_c_init1 + 8)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init2 = 0; oc_block_c_init2 < 8; ++oc_block_c_init2) {
      conv_global[(oc_block_c_init2 + 16)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init3 = 0; oc_block_c_init3 < 8; ++oc_block_c_init3) {
      conv_global[(oc_block_c_init3 + 24)] = 0.000000e+00f;
    }
    for (int32_t ic_outer = 0; ic_outer < 64; ++ic_outer) {
      for (int32_t kh = 0; kh < 3; ++kh) {
        for (int32_t kw = 0; kw < 3; ++kw) {
          for (int32_t ic_inner = 0; ic_inner < 8; ++ic_inner) {
            for (int32_t oc_block_c = 0; oc_block_c < 8; ++oc_block_c) {
              conv_global[oc_block_c] = (conv_global[oc_block_c] + ((( float*)data_vec)[(((((((ic_outer * 6) + kh) + (ax1_outer_ax2_fused % 4)) * 8) + ic_inner) * 6) + kw)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 4) * 64) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c)]));
            }
            for (int32_t oc_block_c1 = 0; oc_block_c1 < 8; ++oc_block_c1) {
              conv_global[(oc_block_c1 + 8)] = (conv_global[(oc_block_c1 + 8)] + ((( float*)data_vec)[((((((((ic_outer * 6) + kh) + (ax1_outer_ax2_fused % 4)) * 8) + ic_inner) * 6) + kw) + 1)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 4) * 64) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c1)]));
            }
            for (int32_t oc_block_c2 = 0; oc_block_c2 < 8; ++oc_block_c2) {
              conv_global[(oc_block_c2 + 16)] = (conv_global[(oc_block_c2 + 16)] + ((( float*)data_vec)[((((((((ic_outer * 6) + kh) + (ax1_outer_ax2_fused % 4)) * 8) + ic_inner) * 6) + kw) + 2)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 4) * 64) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c2)]));
            }
            for (int32_t oc_block_c3 = 0; oc_block_c3 < 8; ++oc_block_c3) {
              conv_global[(oc_block_c3 + 24)] = (conv_global[(oc_block_c3 + 24)] + ((( float*)data_vec)[((((((((ic_outer * 6) + kh) + (ax1_outer_ax2_fused % 4)) * 8) + ic_inner) * 6) + kw) + 3)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 4) * 64) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c3)]));
            }
          }
        }
      }
    }
    for (int32_t ax3_inner = 0; ax3_inner < 4; ++ax3_inner) {
      for (int32_t ax1_inner = 0; ax1_inner < 8; ++ax1_inner) {
        T_add[(((((((ax1_outer_ax2_fused / 4) * 8) + ax1_inner) * 4) + (ax1_outer_ax2_fused % 4)) * 4) + ax3_inner)] = (conv_global[((ax3_inner * 8) + ax1_inner)] + placeholder2[(((((((ax1_outer_ax2_fused / 4) * 8) + ax1_inner) * 4) + (ax1_outer_ax2_fused % 4)) * 4) + ax3_inner)]);
      }
    }
  }
  if (TVMBackendFreeWorkspace(1, dev_id, kernel_vec) != 0) {
    return -1;
  }
  if (TVMBackendFreeWorkspace(1, dev_id, data_vec) != 0) {
    return -1;
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_nn_conv2d_multiply_add_nn_relu_1( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 5))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_1: num_args should be 5");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  void* arg3 = (((TVMValue*)args)[3].v_handle);
  int32_t arg3_code = (( int32_t*)arg_type_ids)[3];
  void* arg4 = (((TVMValue*)args)[4].v_handle);
  int32_t arg4_code = (( int32_t*)arg_type_ids)[4];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (8 == ((int32_t)arg0_strides[2]))) && (64 == ((int32_t)arg0_strides[1]))) && (16384 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg1_strides[3])) && (3 == ((int32_t)arg1_strides[2]))) && (9 == ((int32_t)arg1_strides[1]))) && (2304 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder2 = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!((((1 == ((int32_t)arg2_strides[2])) && (1 == ((int32_t)arg2_strides[1]))) && (1 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder3 = (float*)(((TVMArray*)arg3)[0].data);
  int64_t* arg3_shape = (int64_t*)(((TVMArray*)arg3)[0].shape);
  int64_t* arg3_strides = (int64_t*)(((TVMArray*)arg3)[0].strides);
  if (!(arg3_strides == NULL)) {
    if (!((((1 == ((int32_t)arg3_strides[2])) && (1 == ((int32_t)arg3_strides[1]))) && (1 == ((int32_t)arg3_strides[0]))))) {
      TVMAPISetLastError("arg3.strides: expected to be compact array");
      return -1;
    }
  }
  float* T_relu = (float*)(((TVMArray*)arg4)[0].data);
  int64_t* arg4_shape = (int64_t*)(((TVMArray*)arg4)[0].shape);
  int64_t* arg4_strides = (int64_t*)(((TVMArray*)arg4)[0].strides);
  if (!(arg4_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg4_strides[3])) && (4 == ((int32_t)arg4_strides[2]))) && (16 == ((int32_t)arg4_strides[1]))) && (8192 == ((int32_t)arg4_strides[0]))))) {
      TVMAPISetLastError("arg4.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_1: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_1: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_1: Expect arg[2] to be pointer");
    return -1;
  }
  if (!(((((arg3_code == 3) || (arg3_code == 13)) || (arg3_code == 7)) || (arg3_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_1: Expect arg[3] to be pointer");
    return -1;
  }
  if (!(((((arg4_code == 3) || (arg4_code == 13)) || (arg4_code == 7)) || (arg4_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_1: Expect arg[4] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 256))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 8))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 8))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 512))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 256))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[3]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 512))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg3)[0].ndim)))) {
    TVMAPISetLastError("arg3.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg3)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg3)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg3)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg3.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg3_shape[0]) == 512))) {
    TVMAPISetLastError("Argument arg3.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg3)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg3.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg3)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg3.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg3)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg3.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg4)[0].ndim)))) {
    TVMAPISetLastError("arg4.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg4)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg4)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg4)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg4.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg4_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg4.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[1]) == 512))) {
    TVMAPISetLastError("Argument arg4.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[2]) == 4))) {
    TVMAPISetLastError("Argument arg4.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[3]) == 4))) {
    TVMAPISetLastError("Argument arg4.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg4)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg4.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg4)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg4.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg4)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg4.device_id has an unsatisfied constraint");
    return -1;
  }
  void* data_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)82944, 2, 32);
  if (data_vec == NULL) {
    return -1;
  }
  void* kernel_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)4718592, 2, 32);
  if (kernel_vec == NULL) {
    return -1;
  }
  for (int32_t C_h_fused = 0; C_h_fused < 288; ++C_h_fused) {
    for (int32_t c = 0; c < 8; ++c) {
      for (int32_t w = 0; w < 9; ++w) {
        (( float*)data_vec)[((((C_h_fused * 8) + c) * 9) + w)] = ((1 <= ((C_h_fused % 9)) < (w) ? ((C_h_fused % 9)) : (w)) ? placeholder[((((((((C_h_fused / 9) * 8) + c) * 8) + (C_h_fused % 9)) * 8) + w) + -9)] : 0.000000e+00f);
      }
    }
  }
  for (int32_t CO_h_fused = 0; CO_h_fused < 192; ++CO_h_fused) {
    for (int32_t CI = 0; CI < 32; ++CI) {
      for (int32_t w1 = 0; w1 < 3; ++w1) {
        for (int32_t ci = 0; ci < 8; ++ci) {
          for (int32_t co = 0; co < 8; ++co) {
            (( float*)kernel_vec)[(((((((((((CO_h_fused / 3) * 32) + CI) * 3) + (CO_h_fused % 3)) * 3) + w1) * 8) + ci) * 8) + co)] = placeholder1[(((((((((((CO_h_fused / 3) * 8) + co) * 32) + CI) * 8) + ci) * 3) + (CO_h_fused % 3)) * 3) + w1)];
          }
        }
      }
    }
  }
  for (int32_t ax1_outer_ax2_fused = 0; ax1_outer_ax2_fused < 256; ++ax1_outer_ax2_fused) {
     float conv_global[32];
    for (int32_t oc_block_c_init = 0; oc_block_c_init < 8; ++oc_block_c_init) {
      conv_global[oc_block_c_init] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init1 = 0; oc_block_c_init1 < 8; ++oc_block_c_init1) {
      conv_global[(oc_block_c_init1 + 8)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init2 = 0; oc_block_c_init2 < 8; ++oc_block_c_init2) {
      conv_global[(oc_block_c_init2 + 16)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init3 = 0; oc_block_c_init3 < 8; ++oc_block_c_init3) {
      conv_global[(oc_block_c_init3 + 24)] = 0.000000e+00f;
    }
    for (int32_t ic_outer = 0; ic_outer < 32; ++ic_outer) {
      for (int32_t kh = 0; kh < 3; ++kh) {
        for (int32_t kw = 0; kw < 3; ++kw) {
          for (int32_t ic_inner = 0; ic_inner < 8; ++ic_inner) {
            for (int32_t oc_block_c = 0; oc_block_c < 8; ++oc_block_c) {
              conv_global[oc_block_c] = (conv_global[oc_block_c] + ((( float*)data_vec)[(((((ic_outer * 648) + ((ax1_outer_ax2_fused % 4) * 144)) + (kh * 72)) + (ic_inner * 9)) + kw)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 4) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c)]));
            }
            for (int32_t oc_block_c1 = 0; oc_block_c1 < 8; ++oc_block_c1) {
              conv_global[(oc_block_c1 + 8)] = (conv_global[(oc_block_c1 + 8)] + ((( float*)data_vec)[((((((ic_outer * 648) + ((ax1_outer_ax2_fused % 4) * 144)) + (kh * 72)) + (ic_inner * 9)) + kw) + 2)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 4) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c1)]));
            }
            for (int32_t oc_block_c2 = 0; oc_block_c2 < 8; ++oc_block_c2) {
              conv_global[(oc_block_c2 + 16)] = (conv_global[(oc_block_c2 + 16)] + ((( float*)data_vec)[((((((ic_outer * 648) + ((ax1_outer_ax2_fused % 4) * 144)) + (kh * 72)) + (ic_inner * 9)) + kw) + 4)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 4) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c2)]));
            }
            for (int32_t oc_block_c3 = 0; oc_block_c3 < 8; ++oc_block_c3) {
              conv_global[(oc_block_c3 + 24)] = (conv_global[(oc_block_c3 + 24)] + ((( float*)data_vec)[((((((ic_outer * 648) + ((ax1_outer_ax2_fused % 4) * 144)) + (kh * 72)) + (ic_inner * 9)) + kw) + 6)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 4) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c3)]));
            }
          }
        }
      }
    }
    for (int32_t ax3_inner = 0; ax3_inner < 4; ++ax3_inner) {
      for (int32_t ax1_inner = 0; ax1_inner < 8; ++ax1_inner) {
        T_relu[(((((((ax1_outer_ax2_fused / 4) * 8) + ax1_inner) * 4) + (ax1_outer_ax2_fused % 4)) * 4) + ax3_inner)] = (((conv_global[((ax3_inner * 8) + ax1_inner)] * placeholder2[(((ax1_outer_ax2_fused / 4) * 8) + ax1_inner)]) + placeholder3[(((ax1_outer_ax2_fused / 4) * 8) + ax1_inner)])) > (0.000000e+00f) ? (((conv_global[((ax3_inner * 8) + ax1_inner)] * placeholder2[(((ax1_outer_ax2_fused / 4) * 8) + ax1_inner)]) + placeholder3[(((ax1_outer_ax2_fused / 4) * 8) + ax1_inner)])) : (0.000000e+00f);
      }
    }
  }
  if (TVMBackendFreeWorkspace(1, dev_id, kernel_vec) != 0) {
    return -1;
  }
  if (TVMBackendFreeWorkspace(1, dev_id, data_vec) != 0) {
    return -1;
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_nn_conv2d_multiply_add_nn_relu_5( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 5))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_5: num_args should be 5");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  void* arg3 = (((TVMValue*)args)[3].v_handle);
  int32_t arg3_code = (( int32_t*)arg_type_ids)[3];
  void* arg4 = (((TVMValue*)args)[4].v_handle);
  int32_t arg4_code = (( int32_t*)arg_type_ids)[4];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (32 == ((int32_t)arg0_strides[2]))) && (1024 == ((int32_t)arg0_strides[1]))) && (65536 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg1_strides[3])) && (3 == ((int32_t)arg1_strides[2]))) && (9 == ((int32_t)arg1_strides[1]))) && (576 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder2 = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!((((1 == ((int32_t)arg2_strides[2])) && (1 == ((int32_t)arg2_strides[1]))) && (1 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder3 = (float*)(((TVMArray*)arg3)[0].data);
  int64_t* arg3_shape = (int64_t*)(((TVMArray*)arg3)[0].shape);
  int64_t* arg3_strides = (int64_t*)(((TVMArray*)arg3)[0].strides);
  if (!(arg3_strides == NULL)) {
    if (!((((1 == ((int32_t)arg3_strides[2])) && (1 == ((int32_t)arg3_strides[1]))) && (1 == ((int32_t)arg3_strides[0]))))) {
      TVMAPISetLastError("arg3.strides: expected to be compact array");
      return -1;
    }
  }
  float* T_relu = (float*)(((TVMArray*)arg4)[0].data);
  int64_t* arg4_shape = (int64_t*)(((TVMArray*)arg4)[0].shape);
  int64_t* arg4_strides = (int64_t*)(((TVMArray*)arg4)[0].strides);
  if (!(arg4_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg4_strides[3])) && (16 == ((int32_t)arg4_strides[2]))) && (256 == ((int32_t)arg4_strides[1]))) && (32768 == ((int32_t)arg4_strides[0]))))) {
      TVMAPISetLastError("arg4.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_5: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_5: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_5: Expect arg[2] to be pointer");
    return -1;
  }
  if (!(((((arg3_code == 3) || (arg3_code == 13)) || (arg3_code == 7)) || (arg3_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_5: Expect arg[3] to be pointer");
    return -1;
  }
  if (!(((((arg4_code == 3) || (arg4_code == 13)) || (arg4_code == 7)) || (arg4_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_5: Expect arg[4] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 64))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 32))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 32))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 128))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 64))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[3]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 128))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg3)[0].ndim)))) {
    TVMAPISetLastError("arg3.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg3)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg3)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg3)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg3.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg3_shape[0]) == 128))) {
    TVMAPISetLastError("Argument arg3.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg3)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg3.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg3)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg3.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg3)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg3.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg4)[0].ndim)))) {
    TVMAPISetLastError("arg4.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg4)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg4)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg4)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg4.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg4_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg4.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[1]) == 128))) {
    TVMAPISetLastError("Argument arg4.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[2]) == 16))) {
    TVMAPISetLastError("Argument arg4.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[3]) == 16))) {
    TVMAPISetLastError("Argument arg4.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg4)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg4.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg4)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg4.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg4)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg4.device_id has an unsatisfied constraint");
    return -1;
  }
  void* data_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)278784, 2, 32);
  if (data_vec == NULL) {
    return -1;
  }
  void* kernel_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)294912, 2, 32);
  if (kernel_vec == NULL) {
    return -1;
  }
  for (int32_t C_h_fused = 0; C_h_fused < 264; ++C_h_fused) {
    for (int32_t c = 0; c < 8; ++c) {
      for (int32_t w = 0; w < 33; ++w) {
        (( float*)data_vec)[((((C_h_fused * 8) + c) * 33) + w)] = ((1 <= ((C_h_fused % 33)) < (w) ? ((C_h_fused % 33)) : (w)) ? placeholder[((((((((C_h_fused / 33) * 8) + c) * 32) + (C_h_fused % 33)) * 32) + w) + -33)] : 0.000000e+00f);
      }
    }
  }
  for (int32_t CO_h_fused = 0; CO_h_fused < 48; ++CO_h_fused) {
    for (int32_t CI = 0; CI < 8; ++CI) {
      for (int32_t w1 = 0; w1 < 3; ++w1) {
        for (int32_t ci = 0; ci < 8; ++ci) {
          for (int32_t co = 0; co < 8; ++co) {
            (( float*)kernel_vec)[(((((((((((CO_h_fused / 3) * 8) + CI) * 3) + (CO_h_fused % 3)) * 3) + w1) * 8) + ci) * 8) + co)] = placeholder1[(((((((((((CO_h_fused / 3) * 8) + co) * 8) + CI) * 8) + ci) * 3) + (CO_h_fused % 3)) * 3) + w1)];
          }
        }
      }
    }
  }
  for (int32_t ax1_outer_ax2_fused = 0; ax1_outer_ax2_fused < 256; ++ax1_outer_ax2_fused) {
     float conv_global[128];
    for (int32_t oc_block_c_init = 0; oc_block_c_init < 8; ++oc_block_c_init) {
      conv_global[oc_block_c_init] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init1 = 0; oc_block_c_init1 < 8; ++oc_block_c_init1) {
      conv_global[(oc_block_c_init1 + 8)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init2 = 0; oc_block_c_init2 < 8; ++oc_block_c_init2) {
      conv_global[(oc_block_c_init2 + 16)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init3 = 0; oc_block_c_init3 < 8; ++oc_block_c_init3) {
      conv_global[(oc_block_c_init3 + 24)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init4 = 0; oc_block_c_init4 < 8; ++oc_block_c_init4) {
      conv_global[(oc_block_c_init4 + 32)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init5 = 0; oc_block_c_init5 < 8; ++oc_block_c_init5) {
      conv_global[(oc_block_c_init5 + 40)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init6 = 0; oc_block_c_init6 < 8; ++oc_block_c_init6) {
      conv_global[(oc_block_c_init6 + 48)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init7 = 0; oc_block_c_init7 < 8; ++oc_block_c_init7) {
      conv_global[(oc_block_c_init7 + 56)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init8 = 0; oc_block_c_init8 < 8; ++oc_block_c_init8) {
      conv_global[(oc_block_c_init8 + 64)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init9 = 0; oc_block_c_init9 < 8; ++oc_block_c_init9) {
      conv_global[(oc_block_c_init9 + 72)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init10 = 0; oc_block_c_init10 < 8; ++oc_block_c_init10) {
      conv_global[(oc_block_c_init10 + 80)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init11 = 0; oc_block_c_init11 < 8; ++oc_block_c_init11) {
      conv_global[(oc_block_c_init11 + 88)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init12 = 0; oc_block_c_init12 < 8; ++oc_block_c_init12) {
      conv_global[(oc_block_c_init12 + 96)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init13 = 0; oc_block_c_init13 < 8; ++oc_block_c_init13) {
      conv_global[(oc_block_c_init13 + 104)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init14 = 0; oc_block_c_init14 < 8; ++oc_block_c_init14) {
      conv_global[(oc_block_c_init14 + 112)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init15 = 0; oc_block_c_init15 < 8; ++oc_block_c_init15) {
      conv_global[(oc_block_c_init15 + 120)] = 0.000000e+00f;
    }
    for (int32_t ic_outer = 0; ic_outer < 8; ++ic_outer) {
      for (int32_t kh = 0; kh < 3; ++kh) {
        for (int32_t kw = 0; kw < 3; ++kw) {
          for (int32_t ic_inner = 0; ic_inner < 8; ++ic_inner) {
            for (int32_t oc_block_c = 0; oc_block_c < 8; ++oc_block_c) {
              conv_global[oc_block_c] = (conv_global[oc_block_c] + ((( float*)data_vec)[(((((ic_outer * 8712) + ((ax1_outer_ax2_fused % 16) * 528)) + (kh * 264)) + (ic_inner * 33)) + kw)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c)]));
            }
            for (int32_t oc_block_c1 = 0; oc_block_c1 < 8; ++oc_block_c1) {
              conv_global[(oc_block_c1 + 8)] = (conv_global[(oc_block_c1 + 8)] + ((( float*)data_vec)[((((((ic_outer * 8712) + ((ax1_outer_ax2_fused % 16) * 528)) + (kh * 264)) + (ic_inner * 33)) + kw) + 2)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c1)]));
            }
            for (int32_t oc_block_c2 = 0; oc_block_c2 < 8; ++oc_block_c2) {
              conv_global[(oc_block_c2 + 16)] = (conv_global[(oc_block_c2 + 16)] + ((( float*)data_vec)[((((((ic_outer * 8712) + ((ax1_outer_ax2_fused % 16) * 528)) + (kh * 264)) + (ic_inner * 33)) + kw) + 4)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c2)]));
            }
            for (int32_t oc_block_c3 = 0; oc_block_c3 < 8; ++oc_block_c3) {
              conv_global[(oc_block_c3 + 24)] = (conv_global[(oc_block_c3 + 24)] + ((( float*)data_vec)[((((((ic_outer * 8712) + ((ax1_outer_ax2_fused % 16) * 528)) + (kh * 264)) + (ic_inner * 33)) + kw) + 6)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c3)]));
            }
            for (int32_t oc_block_c4 = 0; oc_block_c4 < 8; ++oc_block_c4) {
              conv_global[(oc_block_c4 + 32)] = (conv_global[(oc_block_c4 + 32)] + ((( float*)data_vec)[((((((ic_outer * 8712) + ((ax1_outer_ax2_fused % 16) * 528)) + (kh * 264)) + (ic_inner * 33)) + kw) + 8)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c4)]));
            }
            for (int32_t oc_block_c5 = 0; oc_block_c5 < 8; ++oc_block_c5) {
              conv_global[(oc_block_c5 + 40)] = (conv_global[(oc_block_c5 + 40)] + ((( float*)data_vec)[((((((ic_outer * 8712) + ((ax1_outer_ax2_fused % 16) * 528)) + (kh * 264)) + (ic_inner * 33)) + kw) + 10)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c5)]));
            }
            for (int32_t oc_block_c6 = 0; oc_block_c6 < 8; ++oc_block_c6) {
              conv_global[(oc_block_c6 + 48)] = (conv_global[(oc_block_c6 + 48)] + ((( float*)data_vec)[((((((ic_outer * 8712) + ((ax1_outer_ax2_fused % 16) * 528)) + (kh * 264)) + (ic_inner * 33)) + kw) + 12)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c6)]));
            }
            for (int32_t oc_block_c7 = 0; oc_block_c7 < 8; ++oc_block_c7) {
              conv_global[(oc_block_c7 + 56)] = (conv_global[(oc_block_c7 + 56)] + ((( float*)data_vec)[((((((ic_outer * 8712) + ((ax1_outer_ax2_fused % 16) * 528)) + (kh * 264)) + (ic_inner * 33)) + kw) + 14)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c7)]));
            }
            for (int32_t oc_block_c8 = 0; oc_block_c8 < 8; ++oc_block_c8) {
              conv_global[(oc_block_c8 + 64)] = (conv_global[(oc_block_c8 + 64)] + ((( float*)data_vec)[((((((ic_outer * 8712) + ((ax1_outer_ax2_fused % 16) * 528)) + (kh * 264)) + (ic_inner * 33)) + kw) + 16)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c8)]));
            }
            for (int32_t oc_block_c9 = 0; oc_block_c9 < 8; ++oc_block_c9) {
              conv_global[(oc_block_c9 + 72)] = (conv_global[(oc_block_c9 + 72)] + ((( float*)data_vec)[((((((ic_outer * 8712) + ((ax1_outer_ax2_fused % 16) * 528)) + (kh * 264)) + (ic_inner * 33)) + kw) + 18)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c9)]));
            }
            for (int32_t oc_block_c10 = 0; oc_block_c10 < 8; ++oc_block_c10) {
              conv_global[(oc_block_c10 + 80)] = (conv_global[(oc_block_c10 + 80)] + ((( float*)data_vec)[((((((ic_outer * 8712) + ((ax1_outer_ax2_fused % 16) * 528)) + (kh * 264)) + (ic_inner * 33)) + kw) + 20)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c10)]));
            }
            for (int32_t oc_block_c11 = 0; oc_block_c11 < 8; ++oc_block_c11) {
              conv_global[(oc_block_c11 + 88)] = (conv_global[(oc_block_c11 + 88)] + ((( float*)data_vec)[((((((ic_outer * 8712) + ((ax1_outer_ax2_fused % 16) * 528)) + (kh * 264)) + (ic_inner * 33)) + kw) + 22)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c11)]));
            }
            for (int32_t oc_block_c12 = 0; oc_block_c12 < 8; ++oc_block_c12) {
              conv_global[(oc_block_c12 + 96)] = (conv_global[(oc_block_c12 + 96)] + ((( float*)data_vec)[((((((ic_outer * 8712) + ((ax1_outer_ax2_fused % 16) * 528)) + (kh * 264)) + (ic_inner * 33)) + kw) + 24)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c12)]));
            }
            for (int32_t oc_block_c13 = 0; oc_block_c13 < 8; ++oc_block_c13) {
              conv_global[(oc_block_c13 + 104)] = (conv_global[(oc_block_c13 + 104)] + ((( float*)data_vec)[((((((ic_outer * 8712) + ((ax1_outer_ax2_fused % 16) * 528)) + (kh * 264)) + (ic_inner * 33)) + kw) + 26)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c13)]));
            }
            for (int32_t oc_block_c14 = 0; oc_block_c14 < 8; ++oc_block_c14) {
              conv_global[(oc_block_c14 + 112)] = (conv_global[(oc_block_c14 + 112)] + ((( float*)data_vec)[((((((ic_outer * 8712) + ((ax1_outer_ax2_fused % 16) * 528)) + (kh * 264)) + (ic_inner * 33)) + kw) + 28)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c14)]));
            }
            for (int32_t oc_block_c15 = 0; oc_block_c15 < 8; ++oc_block_c15) {
              conv_global[(oc_block_c15 + 120)] = (conv_global[(oc_block_c15 + 120)] + ((( float*)data_vec)[((((((ic_outer * 8712) + ((ax1_outer_ax2_fused % 16) * 528)) + (kh * 264)) + (ic_inner * 33)) + kw) + 30)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 8) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c15)]));
            }
          }
        }
      }
    }
    for (int32_t ax3_inner = 0; ax3_inner < 16; ++ax3_inner) {
      for (int32_t ax1_inner = 0; ax1_inner < 8; ++ax1_inner) {
        T_relu[(((((((ax1_outer_ax2_fused / 16) * 8) + ax1_inner) * 16) + (ax1_outer_ax2_fused % 16)) * 16) + ax3_inner)] = (((conv_global[((ax3_inner * 8) + ax1_inner)] * placeholder2[(((ax1_outer_ax2_fused / 16) * 8) + ax1_inner)]) + placeholder3[(((ax1_outer_ax2_fused / 16) * 8) + ax1_inner)])) > (0.000000e+00f) ? (((conv_global[((ax3_inner * 8) + ax1_inner)] * placeholder2[(((ax1_outer_ax2_fused / 16) * 8) + ax1_inner)]) + placeholder3[(((ax1_outer_ax2_fused / 16) * 8) + ax1_inner)])) : (0.000000e+00f);
      }
    }
  }
  if (TVMBackendFreeWorkspace(1, dev_id, kernel_vec) != 0) {
    return -1;
  }
  if (TVMBackendFreeWorkspace(1, dev_id, data_vec) != 0) {
    return -1;
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_nn_conv2d_multiply_add_nn_relu_3( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 5))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_3: num_args should be 5");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  void* arg3 = (((TVMValue*)args)[3].v_handle);
  int32_t arg3_code = (( int32_t*)arg_type_ids)[3];
  void* arg4 = (((TVMValue*)args)[4].v_handle);
  int32_t arg4_code = (( int32_t*)arg_type_ids)[4];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (16 == ((int32_t)arg0_strides[2]))) && (256 == ((int32_t)arg0_strides[1]))) && (32768 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg1_strides[3])) && (3 == ((int32_t)arg1_strides[2]))) && (9 == ((int32_t)arg1_strides[1]))) && (1152 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder2 = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!((((1 == ((int32_t)arg2_strides[2])) && (1 == ((int32_t)arg2_strides[1]))) && (1 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder3 = (float*)(((TVMArray*)arg3)[0].data);
  int64_t* arg3_shape = (int64_t*)(((TVMArray*)arg3)[0].shape);
  int64_t* arg3_strides = (int64_t*)(((TVMArray*)arg3)[0].strides);
  if (!(arg3_strides == NULL)) {
    if (!((((1 == ((int32_t)arg3_strides[2])) && (1 == ((int32_t)arg3_strides[1]))) && (1 == ((int32_t)arg3_strides[0]))))) {
      TVMAPISetLastError("arg3.strides: expected to be compact array");
      return -1;
    }
  }
  float* T_relu = (float*)(((TVMArray*)arg4)[0].data);
  int64_t* arg4_shape = (int64_t*)(((TVMArray*)arg4)[0].shape);
  int64_t* arg4_strides = (int64_t*)(((TVMArray*)arg4)[0].strides);
  if (!(arg4_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg4_strides[3])) && (8 == ((int32_t)arg4_strides[2]))) && (64 == ((int32_t)arg4_strides[1]))) && (16384 == ((int32_t)arg4_strides[0]))))) {
      TVMAPISetLastError("arg4.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_3: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_3: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_3: Expect arg[2] to be pointer");
    return -1;
  }
  if (!(((((arg3_code == 3) || (arg3_code == 13)) || (arg3_code == 7)) || (arg3_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_3: Expect arg[3] to be pointer");
    return -1;
  }
  if (!(((((arg4_code == 3) || (arg4_code == 13)) || (arg4_code == 7)) || (arg4_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_3: Expect arg[4] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 128))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 16))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 16))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 256))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 128))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[3]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 256))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg3)[0].ndim)))) {
    TVMAPISetLastError("arg3.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg3)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg3)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg3)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg3.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg3_shape[0]) == 256))) {
    TVMAPISetLastError("Argument arg3.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg3)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg3.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg3)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg3.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg3)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg3.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg4)[0].ndim)))) {
    TVMAPISetLastError("arg4.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg4)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg4)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg4)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg4.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg4_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg4.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[1]) == 256))) {
    TVMAPISetLastError("Argument arg4.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[2]) == 8))) {
    TVMAPISetLastError("Argument arg4.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[3]) == 8))) {
    TVMAPISetLastError("Argument arg4.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg4)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg4.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg4)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg4.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg4)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg4.device_id has an unsatisfied constraint");
    return -1;
  }
  void* data_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)147968, 2, 32);
  if (data_vec == NULL) {
    return -1;
  }
  void* kernel_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)1179648, 2, 32);
  if (kernel_vec == NULL) {
    return -1;
  }
  for (int32_t C_h_fused = 0; C_h_fused < 272; ++C_h_fused) {
    for (int32_t c = 0; c < 8; ++c) {
      for (int32_t w = 0; w < 17; ++w) {
        (( float*)data_vec)[((((C_h_fused * 8) + c) * 17) + w)] = ((1 <= ((C_h_fused % 17)) < (w) ? ((C_h_fused % 17)) : (w)) ? placeholder[((((((((C_h_fused / 17) * 8) + c) * 16) + (C_h_fused % 17)) * 16) + w) + -17)] : 0.000000e+00f);
      }
    }
  }
  for (int32_t CO_h_fused = 0; CO_h_fused < 96; ++CO_h_fused) {
    for (int32_t CI = 0; CI < 16; ++CI) {
      for (int32_t w1 = 0; w1 < 3; ++w1) {
        for (int32_t ci = 0; ci < 8; ++ci) {
          for (int32_t co = 0; co < 8; ++co) {
            (( float*)kernel_vec)[(((((((((((CO_h_fused / 3) * 16) + CI) * 3) + (CO_h_fused % 3)) * 3) + w1) * 8) + ci) * 8) + co)] = placeholder1[(((((((((((CO_h_fused / 3) * 8) + co) * 16) + CI) * 8) + ci) * 3) + (CO_h_fused % 3)) * 3) + w1)];
          }
        }
      }
    }
  }
  for (int32_t ax1_outer_ax2_fused = 0; ax1_outer_ax2_fused < 256; ++ax1_outer_ax2_fused) {
     float conv_global[64];
    for (int32_t oc_block_c_init = 0; oc_block_c_init < 8; ++oc_block_c_init) {
      conv_global[oc_block_c_init] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init1 = 0; oc_block_c_init1 < 8; ++oc_block_c_init1) {
      conv_global[(oc_block_c_init1 + 8)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init2 = 0; oc_block_c_init2 < 8; ++oc_block_c_init2) {
      conv_global[(oc_block_c_init2 + 16)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init3 = 0; oc_block_c_init3 < 8; ++oc_block_c_init3) {
      conv_global[(oc_block_c_init3 + 24)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init4 = 0; oc_block_c_init4 < 8; ++oc_block_c_init4) {
      conv_global[(oc_block_c_init4 + 32)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init5 = 0; oc_block_c_init5 < 8; ++oc_block_c_init5) {
      conv_global[(oc_block_c_init5 + 40)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init6 = 0; oc_block_c_init6 < 8; ++oc_block_c_init6) {
      conv_global[(oc_block_c_init6 + 48)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init7 = 0; oc_block_c_init7 < 8; ++oc_block_c_init7) {
      conv_global[(oc_block_c_init7 + 56)] = 0.000000e+00f;
    }
    for (int32_t ic_outer = 0; ic_outer < 16; ++ic_outer) {
      for (int32_t kh = 0; kh < 3; ++kh) {
        for (int32_t kw = 0; kw < 3; ++kw) {
          for (int32_t ic_inner = 0; ic_inner < 8; ++ic_inner) {
            for (int32_t oc_block_c = 0; oc_block_c < 8; ++oc_block_c) {
              conv_global[oc_block_c] = (conv_global[oc_block_c] + ((( float*)data_vec)[(((((ic_outer * 2312) + ((ax1_outer_ax2_fused % 8) * 272)) + (kh * 136)) + (ic_inner * 17)) + kw)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c)]));
            }
            for (int32_t oc_block_c1 = 0; oc_block_c1 < 8; ++oc_block_c1) {
              conv_global[(oc_block_c1 + 8)] = (conv_global[(oc_block_c1 + 8)] + ((( float*)data_vec)[((((((ic_outer * 2312) + ((ax1_outer_ax2_fused % 8) * 272)) + (kh * 136)) + (ic_inner * 17)) + kw) + 2)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c1)]));
            }
            for (int32_t oc_block_c2 = 0; oc_block_c2 < 8; ++oc_block_c2) {
              conv_global[(oc_block_c2 + 16)] = (conv_global[(oc_block_c2 + 16)] + ((( float*)data_vec)[((((((ic_outer * 2312) + ((ax1_outer_ax2_fused % 8) * 272)) + (kh * 136)) + (ic_inner * 17)) + kw) + 4)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c2)]));
            }
            for (int32_t oc_block_c3 = 0; oc_block_c3 < 8; ++oc_block_c3) {
              conv_global[(oc_block_c3 + 24)] = (conv_global[(oc_block_c3 + 24)] + ((( float*)data_vec)[((((((ic_outer * 2312) + ((ax1_outer_ax2_fused % 8) * 272)) + (kh * 136)) + (ic_inner * 17)) + kw) + 6)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c3)]));
            }
            for (int32_t oc_block_c4 = 0; oc_block_c4 < 8; ++oc_block_c4) {
              conv_global[(oc_block_c4 + 32)] = (conv_global[(oc_block_c4 + 32)] + ((( float*)data_vec)[((((((ic_outer * 2312) + ((ax1_outer_ax2_fused % 8) * 272)) + (kh * 136)) + (ic_inner * 17)) + kw) + 8)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c4)]));
            }
            for (int32_t oc_block_c5 = 0; oc_block_c5 < 8; ++oc_block_c5) {
              conv_global[(oc_block_c5 + 40)] = (conv_global[(oc_block_c5 + 40)] + ((( float*)data_vec)[((((((ic_outer * 2312) + ((ax1_outer_ax2_fused % 8) * 272)) + (kh * 136)) + (ic_inner * 17)) + kw) + 10)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c5)]));
            }
            for (int32_t oc_block_c6 = 0; oc_block_c6 < 8; ++oc_block_c6) {
              conv_global[(oc_block_c6 + 48)] = (conv_global[(oc_block_c6 + 48)] + ((( float*)data_vec)[((((((ic_outer * 2312) + ((ax1_outer_ax2_fused % 8) * 272)) + (kh * 136)) + (ic_inner * 17)) + kw) + 12)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c6)]));
            }
            for (int32_t oc_block_c7 = 0; oc_block_c7 < 8; ++oc_block_c7) {
              conv_global[(oc_block_c7 + 56)] = (conv_global[(oc_block_c7 + 56)] + ((( float*)data_vec)[((((((ic_outer * 2312) + ((ax1_outer_ax2_fused % 8) * 272)) + (kh * 136)) + (ic_inner * 17)) + kw) + 14)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c7)]));
            }
          }
        }
      }
    }
    for (int32_t ax3_inner = 0; ax3_inner < 8; ++ax3_inner) {
      for (int32_t ax1_inner = 0; ax1_inner < 8; ++ax1_inner) {
        T_relu[(((((((ax1_outer_ax2_fused / 8) * 8) + ax1_inner) * 8) + (ax1_outer_ax2_fused % 8)) * 8) + ax3_inner)] = (((conv_global[((ax3_inner * 8) + ax1_inner)] * placeholder2[(((ax1_outer_ax2_fused / 8) * 8) + ax1_inner)]) + placeholder3[(((ax1_outer_ax2_fused / 8) * 8) + ax1_inner)])) > (0.000000e+00f) ? (((conv_global[((ax3_inner * 8) + ax1_inner)] * placeholder2[(((ax1_outer_ax2_fused / 8) * 8) + ax1_inner)]) + placeholder3[(((ax1_outer_ax2_fused / 8) * 8) + ax1_inner)])) : (0.000000e+00f);
      }
    }
  }
  if (TVMBackendFreeWorkspace(1, dev_id, kernel_vec) != 0) {
    return -1;
  }
  if (TVMBackendFreeWorkspace(1, dev_id, data_vec) != 0) {
    return -1;
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_nn_conv2d_multiply_add_nn_relu_2( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 5))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_2: num_args should be 5");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  void* arg3 = (((TVMValue*)args)[3].v_handle);
  int32_t arg3_code = (( int32_t*)arg_type_ids)[3];
  void* arg4 = (((TVMValue*)args)[4].v_handle);
  int32_t arg4_code = (( int32_t*)arg_type_ids)[4];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (8 == ((int32_t)arg0_strides[2]))) && (64 == ((int32_t)arg0_strides[1]))) && (16384 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg1_strides[3])) && (3 == ((int32_t)arg1_strides[2]))) && (9 == ((int32_t)arg1_strides[1]))) && (2304 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder2 = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!((((1 == ((int32_t)arg2_strides[2])) && (1 == ((int32_t)arg2_strides[1]))) && (1 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder3 = (float*)(((TVMArray*)arg3)[0].data);
  int64_t* arg3_shape = (int64_t*)(((TVMArray*)arg3)[0].shape);
  int64_t* arg3_strides = (int64_t*)(((TVMArray*)arg3)[0].strides);
  if (!(arg3_strides == NULL)) {
    if (!((((1 == ((int32_t)arg3_strides[2])) && (1 == ((int32_t)arg3_strides[1]))) && (1 == ((int32_t)arg3_strides[0]))))) {
      TVMAPISetLastError("arg3.strides: expected to be compact array");
      return -1;
    }
  }
  float* T_relu = (float*)(((TVMArray*)arg4)[0].data);
  int64_t* arg4_shape = (int64_t*)(((TVMArray*)arg4)[0].shape);
  int64_t* arg4_strides = (int64_t*)(((TVMArray*)arg4)[0].strides);
  if (!(arg4_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg4_strides[3])) && (8 == ((int32_t)arg4_strides[2]))) && (64 == ((int32_t)arg4_strides[1]))) && (16384 == ((int32_t)arg4_strides[0]))))) {
      TVMAPISetLastError("arg4.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_2: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_2: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_2: Expect arg[2] to be pointer");
    return -1;
  }
  if (!(((((arg3_code == 3) || (arg3_code == 13)) || (arg3_code == 7)) || (arg3_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_2: Expect arg[3] to be pointer");
    return -1;
  }
  if (!(((((arg4_code == 3) || (arg4_code == 13)) || (arg4_code == 7)) || (arg4_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_2: Expect arg[4] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 256))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 8))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 8))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 256))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 256))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[3]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 256))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg3)[0].ndim)))) {
    TVMAPISetLastError("arg3.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg3)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg3)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg3)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg3.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg3_shape[0]) == 256))) {
    TVMAPISetLastError("Argument arg3.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg3)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg3.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg3)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg3.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg3)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg3.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg4)[0].ndim)))) {
    TVMAPISetLastError("arg4.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg4)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg4)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg4)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg4.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg4_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg4.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[1]) == 256))) {
    TVMAPISetLastError("Argument arg4.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[2]) == 8))) {
    TVMAPISetLastError("Argument arg4.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[3]) == 8))) {
    TVMAPISetLastError("Argument arg4.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg4)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg4.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg4)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg4.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg4)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg4.device_id has an unsatisfied constraint");
    return -1;
  }
  void* data_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)102400, 2, 32);
  if (data_vec == NULL) {
    return -1;
  }
  void* kernel_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)2359296, 2, 32);
  if (kernel_vec == NULL) {
    return -1;
  }
  for (int32_t C_h_fused = 0; C_h_fused < 320; ++C_h_fused) {
    for (int32_t c = 0; c < 8; ++c) {
      for (int32_t w = 0; w < 10; ++w) {
        (( float*)data_vec)[((((C_h_fused * 8) + c) * 10) + w)] = (((((1 <= (C_h_fused % 10)) && ((C_h_fused % 10) < 9)) && (1 <= w)) && (w < 9)) ? placeholder[((((((((C_h_fused / 10) * 8) + c) * 8) + (C_h_fused % 10)) * 8) + w) + -9)] : 0.000000e+00f);
      }
    }
  }
  for (int32_t CO_h_fused = 0; CO_h_fused < 96; ++CO_h_fused) {
    for (int32_t CI = 0; CI < 32; ++CI) {
      for (int32_t w1 = 0; w1 < 3; ++w1) {
        for (int32_t ci = 0; ci < 8; ++ci) {
          for (int32_t co = 0; co < 8; ++co) {
            (( float*)kernel_vec)[(((((((((((CO_h_fused / 3) * 32) + CI) * 3) + (CO_h_fused % 3)) * 3) + w1) * 8) + ci) * 8) + co)] = placeholder1[(((((((((((CO_h_fused / 3) * 8) + co) * 32) + CI) * 8) + ci) * 3) + (CO_h_fused % 3)) * 3) + w1)];
          }
        }
      }
    }
  }
  for (int32_t ax1_outer_ax2_fused = 0; ax1_outer_ax2_fused < 256; ++ax1_outer_ax2_fused) {
     float conv_global[64];
    for (int32_t oc_block_c_init = 0; oc_block_c_init < 8; ++oc_block_c_init) {
      conv_global[oc_block_c_init] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init1 = 0; oc_block_c_init1 < 8; ++oc_block_c_init1) {
      conv_global[(oc_block_c_init1 + 8)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init2 = 0; oc_block_c_init2 < 8; ++oc_block_c_init2) {
      conv_global[(oc_block_c_init2 + 16)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init3 = 0; oc_block_c_init3 < 8; ++oc_block_c_init3) {
      conv_global[(oc_block_c_init3 + 24)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init4 = 0; oc_block_c_init4 < 8; ++oc_block_c_init4) {
      conv_global[(oc_block_c_init4 + 32)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init5 = 0; oc_block_c_init5 < 8; ++oc_block_c_init5) {
      conv_global[(oc_block_c_init5 + 40)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init6 = 0; oc_block_c_init6 < 8; ++oc_block_c_init6) {
      conv_global[(oc_block_c_init6 + 48)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init7 = 0; oc_block_c_init7 < 8; ++oc_block_c_init7) {
      conv_global[(oc_block_c_init7 + 56)] = 0.000000e+00f;
    }
    for (int32_t ic_outer = 0; ic_outer < 32; ++ic_outer) {
      for (int32_t kh = 0; kh < 3; ++kh) {
        for (int32_t kw = 0; kw < 3; ++kw) {
          for (int32_t ic_inner = 0; ic_inner < 8; ++ic_inner) {
            for (int32_t oc_block_c = 0; oc_block_c < 8; ++oc_block_c) {
              conv_global[oc_block_c] = (conv_global[oc_block_c] + ((( float*)data_vec)[(((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c)]));
            }
            for (int32_t oc_block_c1 = 0; oc_block_c1 < 8; ++oc_block_c1) {
              conv_global[(oc_block_c1 + 8)] = (conv_global[(oc_block_c1 + 8)] + ((( float*)data_vec)[((((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw) + 1)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c1)]));
            }
            for (int32_t oc_block_c2 = 0; oc_block_c2 < 8; ++oc_block_c2) {
              conv_global[(oc_block_c2 + 16)] = (conv_global[(oc_block_c2 + 16)] + ((( float*)data_vec)[((((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw) + 2)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c2)]));
            }
            for (int32_t oc_block_c3 = 0; oc_block_c3 < 8; ++oc_block_c3) {
              conv_global[(oc_block_c3 + 24)] = (conv_global[(oc_block_c3 + 24)] + ((( float*)data_vec)[((((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw) + 3)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c3)]));
            }
            for (int32_t oc_block_c4 = 0; oc_block_c4 < 8; ++oc_block_c4) {
              conv_global[(oc_block_c4 + 32)] = (conv_global[(oc_block_c4 + 32)] + ((( float*)data_vec)[((((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw) + 4)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c4)]));
            }
            for (int32_t oc_block_c5 = 0; oc_block_c5 < 8; ++oc_block_c5) {
              conv_global[(oc_block_c5 + 40)] = (conv_global[(oc_block_c5 + 40)] + ((( float*)data_vec)[((((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw) + 5)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c5)]));
            }
            for (int32_t oc_block_c6 = 0; oc_block_c6 < 8; ++oc_block_c6) {
              conv_global[(oc_block_c6 + 48)] = (conv_global[(oc_block_c6 + 48)] + ((( float*)data_vec)[((((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw) + 6)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c6)]));
            }
            for (int32_t oc_block_c7 = 0; oc_block_c7 < 8; ++oc_block_c7) {
              conv_global[(oc_block_c7 + 56)] = (conv_global[(oc_block_c7 + 56)] + ((( float*)data_vec)[((((((((ic_outer * 10) + kh) + (ax1_outer_ax2_fused % 8)) * 8) + ic_inner) * 10) + kw) + 7)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 8) * 32) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c7)]));
            }
          }
        }
      }
    }
    for (int32_t ax3_inner = 0; ax3_inner < 8; ++ax3_inner) {
      for (int32_t ax1_inner = 0; ax1_inner < 8; ++ax1_inner) {
        T_relu[(((((((ax1_outer_ax2_fused / 8) * 8) + ax1_inner) * 8) + (ax1_outer_ax2_fused % 8)) * 8) + ax3_inner)] = (((conv_global[((ax3_inner * 8) + ax1_inner)] * placeholder2[(((ax1_outer_ax2_fused / 8) * 8) + ax1_inner)]) + placeholder3[(((ax1_outer_ax2_fused / 8) * 8) + ax1_inner)])) > (0.000000e+00f) ? (((conv_global[((ax3_inner * 8) + ax1_inner)] * placeholder2[(((ax1_outer_ax2_fused / 8) * 8) + ax1_inner)]) + placeholder3[(((ax1_outer_ax2_fused / 8) * 8) + ax1_inner)])) : (0.000000e+00f);
      }
    }
  }
  if (TVMBackendFreeWorkspace(1, dev_id, kernel_vec) != 0) {
    return -1;
  }
  if (TVMBackendFreeWorkspace(1, dev_id, data_vec) != 0) {
    return -1;
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_nn_batch_flatten( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 2))) {
    TVMAPISetLastError("fused_nn_batch_flatten: num_args should be 2");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (1 == ((int32_t)arg0_strides[2]))) && (1 == ((int32_t)arg0_strides[1]))) && (512 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* tensor = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!(((1 == ((int32_t)arg1_strides[1])) && (512 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_nn_batch_flatten: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_nn_batch_flatten: Expect arg[1] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 512))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((2 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 2");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 512))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  for (int32_t ax1 = 0; ax1 < 512; ++ax1) {
    tensor[ax1] = placeholder[ax1];
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_multiply_add_nn_relu_1( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 4))) {
    TVMAPISetLastError("fused_multiply_add_nn_relu_1: num_args should be 4");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  void* arg3 = (((TVMValue*)args)[3].v_handle);
  int32_t arg3_code = (( int32_t*)arg_type_ids)[3];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (8 == ((int32_t)arg0_strides[2]))) && (64 == ((int32_t)arg0_strides[1]))) && (16384 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!((((1 == ((int32_t)arg1_strides[2])) && (1 == ((int32_t)arg1_strides[1]))) && (1 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder2 = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!((((1 == ((int32_t)arg2_strides[2])) && (1 == ((int32_t)arg2_strides[1]))) && (1 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  float* T_relu = (float*)(((TVMArray*)arg3)[0].data);
  int64_t* arg3_shape = (int64_t*)(((TVMArray*)arg3)[0].shape);
  int64_t* arg3_strides = (int64_t*)(((TVMArray*)arg3)[0].strides);
  if (!(arg3_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg3_strides[3])) && (8 == ((int32_t)arg3_strides[2]))) && (64 == ((int32_t)arg3_strides[1]))) && (16384 == ((int32_t)arg3_strides[0]))))) {
      TVMAPISetLastError("arg3.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_multiply_add_nn_relu_1: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_multiply_add_nn_relu_1: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_multiply_add_nn_relu_1: Expect arg[2] to be pointer");
    return -1;
  }
  if (!(((((arg3_code == 3) || (arg3_code == 13)) || (arg3_code == 7)) || (arg3_code == 4)))) {
    TVMAPISetLastError("fused_multiply_add_nn_relu_1: Expect arg[3] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 256))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 8))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 8))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 256))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 256))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg3)[0].ndim)))) {
    TVMAPISetLastError("arg3.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg3)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg3)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg3)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg3.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg3_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[1]) == 256))) {
    TVMAPISetLastError("Argument arg3.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[2]) == 8))) {
    TVMAPISetLastError("Argument arg3.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[3]) == 8))) {
    TVMAPISetLastError("Argument arg3.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg3)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg3.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg3)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg3.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg3)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg3.device_id has an unsatisfied constraint");
    return -1;
  }
  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 256; ++ax0_ax1_fused) {
    for (int32_t ax2 = 0; ax2 < 8; ++ax2) {
      for (int32_t ax3 = 0; ax3 < 8; ++ax3) {
        T_relu[((((ax0_ax1_fused * 8) + ax2) * 8) + ax3)] = (((placeholder[((((ax0_ax1_fused * 8) + ax2) * 8) + ax3)] * placeholder1[ax0_ax1_fused]) + placeholder2[ax0_ax1_fused])) > (0.000000e+00f) ? (((placeholder[((((ax0_ax1_fused * 8) + ax2) * 8) + ax3)] * placeholder1[ax0_ax1_fused]) + placeholder2[ax0_ax1_fused])) : (0.000000e+00f);
      }
    }
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_nn_conv2d_add_multiply_add_nn_relu( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 6))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu: num_args should be 6");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  void* arg3 = (((TVMValue*)args)[3].v_handle);
  int32_t arg3_code = (( int32_t*)arg_type_ids)[3];
  void* arg4 = (((TVMValue*)args)[4].v_handle);
  int32_t arg4_code = (( int32_t*)arg_type_ids)[4];
  void* arg5 = (((TVMValue*)args)[5].v_handle);
  int32_t arg5_code = (( int32_t*)arg_type_ids)[5];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (4 == ((int32_t)arg0_strides[2]))) && (16 == ((int32_t)arg0_strides[1]))) && (8192 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg1_strides[3])) && (3 == ((int32_t)arg1_strides[2]))) && (9 == ((int32_t)arg1_strides[1]))) && (4608 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder2 = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg2_strides[3])) && (4 == ((int32_t)arg2_strides[2]))) && (16 == ((int32_t)arg2_strides[1]))) && (8192 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder3 = (float*)(((TVMArray*)arg3)[0].data);
  int64_t* arg3_shape = (int64_t*)(((TVMArray*)arg3)[0].shape);
  int64_t* arg3_strides = (int64_t*)(((TVMArray*)arg3)[0].strides);
  if (!(arg3_strides == NULL)) {
    if (!((((1 == ((int32_t)arg3_strides[2])) && (1 == ((int32_t)arg3_strides[1]))) && (1 == ((int32_t)arg3_strides[0]))))) {
      TVMAPISetLastError("arg3.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder4 = (float*)(((TVMArray*)arg4)[0].data);
  int64_t* arg4_shape = (int64_t*)(((TVMArray*)arg4)[0].shape);
  int64_t* arg4_strides = (int64_t*)(((TVMArray*)arg4)[0].strides);
  if (!(arg4_strides == NULL)) {
    if (!((((1 == ((int32_t)arg4_strides[2])) && (1 == ((int32_t)arg4_strides[1]))) && (1 == ((int32_t)arg4_strides[0]))))) {
      TVMAPISetLastError("arg4.strides: expected to be compact array");
      return -1;
    }
  }
  float* T_relu = (float*)(((TVMArray*)arg5)[0].data);
  int64_t* arg5_shape = (int64_t*)(((TVMArray*)arg5)[0].shape);
  int64_t* arg5_strides = (int64_t*)(((TVMArray*)arg5)[0].strides);
  if (!(arg5_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg5_strides[3])) && (4 == ((int32_t)arg5_strides[2]))) && (16 == ((int32_t)arg5_strides[1]))) && (8192 == ((int32_t)arg5_strides[0]))))) {
      TVMAPISetLastError("arg5.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu: Expect arg[2] to be pointer");
    return -1;
  }
  if (!(((((arg3_code == 3) || (arg3_code == 13)) || (arg3_code == 7)) || (arg3_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu: Expect arg[3] to be pointer");
    return -1;
  }
  if (!(((((arg4_code == 3) || (arg4_code == 13)) || (arg4_code == 7)) || (arg4_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu: Expect arg[4] to be pointer");
    return -1;
  }
  if (!(((((arg5_code == 3) || (arg5_code == 13)) || (arg5_code == 7)) || (arg5_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_add_multiply_add_nn_relu: Expect arg[5] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 512))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 4))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 4))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 512))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 512))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[3]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 512))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 4))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[3]) == 4))) {
    TVMAPISetLastError("Argument arg2.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg3)[0].ndim)))) {
    TVMAPISetLastError("arg3.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg3)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg3)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg3)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg3.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg3_shape[0]) == 512))) {
    TVMAPISetLastError("Argument arg3.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg3)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg3.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg3)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg3.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg3)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg3.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg4)[0].ndim)))) {
    TVMAPISetLastError("arg4.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg4)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg4)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg4)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg4.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg4_shape[0]) == 512))) {
    TVMAPISetLastError("Argument arg4.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg4.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg4.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg4)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg4.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg4)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg4.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg4)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg4.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg5)[0].ndim)))) {
    TVMAPISetLastError("arg5.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg5)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg5)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg5)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg5.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg5_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg5.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg5_shape[1]) == 512))) {
    TVMAPISetLastError("Argument arg5.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg5_shape[2]) == 4))) {
    TVMAPISetLastError("Argument arg5.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg5_shape[3]) == 4))) {
    TVMAPISetLastError("Argument arg5.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg5)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg5.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg5)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg5.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg5)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg5.device_id has an unsatisfied constraint");
    return -1;
  }
  void* data_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)73728, 2, 32);
  if (data_vec == NULL) {
    return -1;
  }
  void* kernel_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)9437184, 2, 32);
  if (kernel_vec == NULL) {
    return -1;
  }
  for (int32_t C_h_fused = 0; C_h_fused < 384; ++C_h_fused) {
    for (int32_t c = 0; c < 8; ++c) {
      for (int32_t w = 0; w < 6; ++w) {
        (( float*)data_vec)[((((C_h_fused * 8) + c) * 6) + w)] = (((((1 <= (C_h_fused % 6)) && ((C_h_fused % 6) < 5)) && (1 <= w)) && (w < 5)) ? placeholder[((((((((C_h_fused / 6) * 8) + c) * 4) + (C_h_fused % 6)) * 4) + w) + -5)] : 0.000000e+00f);
      }
    }
  }
  for (int32_t CO_h_fused = 0; CO_h_fused < 192; ++CO_h_fused) {
    for (int32_t CI = 0; CI < 64; ++CI) {
      for (int32_t w1 = 0; w1 < 3; ++w1) {
        for (int32_t ci = 0; ci < 8; ++ci) {
          for (int32_t co = 0; co < 8; ++co) {
            (( float*)kernel_vec)[(((((((((((CO_h_fused / 3) * 64) + CI) * 3) + (CO_h_fused % 3)) * 3) + w1) * 8) + ci) * 8) + co)] = placeholder1[(((((((((((CO_h_fused / 3) * 8) + co) * 64) + CI) * 8) + ci) * 3) + (CO_h_fused % 3)) * 3) + w1)];
          }
        }
      }
    }
  }
  for (int32_t ax1_outer_ax2_fused = 0; ax1_outer_ax2_fused < 256; ++ax1_outer_ax2_fused) {
     float conv_global[32];
    for (int32_t oc_block_c_init = 0; oc_block_c_init < 8; ++oc_block_c_init) {
      conv_global[oc_block_c_init] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init1 = 0; oc_block_c_init1 < 8; ++oc_block_c_init1) {
      conv_global[(oc_block_c_init1 + 8)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init2 = 0; oc_block_c_init2 < 8; ++oc_block_c_init2) {
      conv_global[(oc_block_c_init2 + 16)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init3 = 0; oc_block_c_init3 < 8; ++oc_block_c_init3) {
      conv_global[(oc_block_c_init3 + 24)] = 0.000000e+00f;
    }
    for (int32_t ic_outer = 0; ic_outer < 64; ++ic_outer) {
      for (int32_t kh = 0; kh < 3; ++kh) {
        for (int32_t kw = 0; kw < 3; ++kw) {
          for (int32_t ic_inner = 0; ic_inner < 8; ++ic_inner) {
            for (int32_t oc_block_c = 0; oc_block_c < 8; ++oc_block_c) {
              conv_global[oc_block_c] = (conv_global[oc_block_c] + ((( float*)data_vec)[(((((((ic_outer * 6) + kh) + (ax1_outer_ax2_fused % 4)) * 8) + ic_inner) * 6) + kw)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 4) * 64) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c)]));
            }
            for (int32_t oc_block_c1 = 0; oc_block_c1 < 8; ++oc_block_c1) {
              conv_global[(oc_block_c1 + 8)] = (conv_global[(oc_block_c1 + 8)] + ((( float*)data_vec)[((((((((ic_outer * 6) + kh) + (ax1_outer_ax2_fused % 4)) * 8) + ic_inner) * 6) + kw) + 1)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 4) * 64) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c1)]));
            }
            for (int32_t oc_block_c2 = 0; oc_block_c2 < 8; ++oc_block_c2) {
              conv_global[(oc_block_c2 + 16)] = (conv_global[(oc_block_c2 + 16)] + ((( float*)data_vec)[((((((((ic_outer * 6) + kh) + (ax1_outer_ax2_fused % 4)) * 8) + ic_inner) * 6) + kw) + 2)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 4) * 64) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c2)]));
            }
            for (int32_t oc_block_c3 = 0; oc_block_c3 < 8; ++oc_block_c3) {
              conv_global[(oc_block_c3 + 24)] = (conv_global[(oc_block_c3 + 24)] + ((( float*)data_vec)[((((((((ic_outer * 6) + kh) + (ax1_outer_ax2_fused % 4)) * 8) + ic_inner) * 6) + kw) + 3)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 4) * 64) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c3)]));
            }
          }
        }
      }
    }
    for (int32_t ax3_inner = 0; ax3_inner < 4; ++ax3_inner) {
      for (int32_t ax1_inner = 0; ax1_inner < 8; ++ax1_inner) {
        T_relu[(((((((ax1_outer_ax2_fused / 4) * 8) + ax1_inner) * 4) + (ax1_outer_ax2_fused % 4)) * 4) + ax3_inner)] = ((((conv_global[((ax3_inner * 8) + ax1_inner)] + placeholder2[(((((((ax1_outer_ax2_fused / 4) * 8) + ax1_inner) * 4) + (ax1_outer_ax2_fused % 4)) * 4) + ax3_inner)]) * placeholder3[(((ax1_outer_ax2_fused / 4) * 8) + ax1_inner)]) + placeholder4[(((ax1_outer_ax2_fused / 4) * 8) + ax1_inner)])) > (0.000000e+00f) ? ((((conv_global[((ax3_inner * 8) + ax1_inner)] + placeholder2[(((((((ax1_outer_ax2_fused / 4) * 8) + ax1_inner) * 4) + (ax1_outer_ax2_fused % 4)) * 4) + ax3_inner)]) * placeholder3[(((ax1_outer_ax2_fused / 4) * 8) + ax1_inner)]) + placeholder4[(((ax1_outer_ax2_fused / 4) * 8) + ax1_inner)])) : (0.000000e+00f);
      }
    }
  }
  if (TVMBackendFreeWorkspace(1, dev_id, kernel_vec) != 0) {
    return -1;
  }
  if (TVMBackendFreeWorkspace(1, dev_id, data_vec) != 0) {
    return -1;
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_multiply_add_nn_relu_2( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 4))) {
    TVMAPISetLastError("fused_multiply_add_nn_relu_2: num_args should be 4");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  void* arg3 = (((TVMValue*)args)[3].v_handle);
  int32_t arg3_code = (( int32_t*)arg_type_ids)[3];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (16 == ((int32_t)arg0_strides[2]))) && (256 == ((int32_t)arg0_strides[1]))) && (32768 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!((((1 == ((int32_t)arg1_strides[2])) && (1 == ((int32_t)arg1_strides[1]))) && (1 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder2 = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!((((1 == ((int32_t)arg2_strides[2])) && (1 == ((int32_t)arg2_strides[1]))) && (1 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  float* T_relu = (float*)(((TVMArray*)arg3)[0].data);
  int64_t* arg3_shape = (int64_t*)(((TVMArray*)arg3)[0].shape);
  int64_t* arg3_strides = (int64_t*)(((TVMArray*)arg3)[0].strides);
  if (!(arg3_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg3_strides[3])) && (16 == ((int32_t)arg3_strides[2]))) && (256 == ((int32_t)arg3_strides[1]))) && (32768 == ((int32_t)arg3_strides[0]))))) {
      TVMAPISetLastError("arg3.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_multiply_add_nn_relu_2: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_multiply_add_nn_relu_2: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_multiply_add_nn_relu_2: Expect arg[2] to be pointer");
    return -1;
  }
  if (!(((((arg3_code == 3) || (arg3_code == 13)) || (arg3_code == 7)) || (arg3_code == 4)))) {
    TVMAPISetLastError("fused_multiply_add_nn_relu_2: Expect arg[3] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 128))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 16))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 16))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 128))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 128))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg3)[0].ndim)))) {
    TVMAPISetLastError("arg3.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg3)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg3)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg3)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg3.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg3_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[1]) == 128))) {
    TVMAPISetLastError("Argument arg3.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[2]) == 16))) {
    TVMAPISetLastError("Argument arg3.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[3]) == 16))) {
    TVMAPISetLastError("Argument arg3.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg3)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg3.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg3)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg3.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg3)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg3.device_id has an unsatisfied constraint");
    return -1;
  }
  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 128; ++ax0_ax1_fused) {
    for (int32_t ax2 = 0; ax2 < 16; ++ax2) {
      for (int32_t ax3 = 0; ax3 < 16; ++ax3) {
        T_relu[((((ax0_ax1_fused * 16) + ax2) * 16) + ax3)] = (((placeholder[((((ax0_ax1_fused * 16) + ax2) * 16) + ax3)] * placeholder1[ax0_ax1_fused]) + placeholder2[ax0_ax1_fused])) > (0.000000e+00f) ? (((placeholder[((((ax0_ax1_fused * 16) + ax2) * 16) + ax3)] * placeholder1[ax0_ax1_fused]) + placeholder2[ax0_ax1_fused])) : (0.000000e+00f);
      }
    }
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_multiply_add( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 4))) {
    TVMAPISetLastError("fused_multiply_add: num_args should be 4");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  void* arg3 = (((TVMValue*)args)[3].v_handle);
  int32_t arg3_code = (( int32_t*)arg_type_ids)[3];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (32 == ((int32_t)arg0_strides[2]))) && (1024 == ((int32_t)arg0_strides[1]))) && (3072 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!((((1 == ((int32_t)arg1_strides[2])) && (1 == ((int32_t)arg1_strides[1]))) && (1 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder2 = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!((((1 == ((int32_t)arg2_strides[2])) && (1 == ((int32_t)arg2_strides[1]))) && (1 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  float* T_add = (float*)(((TVMArray*)arg3)[0].data);
  int64_t* arg3_shape = (int64_t*)(((TVMArray*)arg3)[0].shape);
  int64_t* arg3_strides = (int64_t*)(((TVMArray*)arg3)[0].strides);
  if (!(arg3_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg3_strides[3])) && (32 == ((int32_t)arg3_strides[2]))) && (1024 == ((int32_t)arg3_strides[1]))) && (3072 == ((int32_t)arg3_strides[0]))))) {
      TVMAPISetLastError("arg3.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_multiply_add: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_multiply_add: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_multiply_add: Expect arg[2] to be pointer");
    return -1;
  }
  if (!(((((arg3_code == 3) || (arg3_code == 13)) || (arg3_code == 7)) || (arg3_code == 4)))) {
    TVMAPISetLastError("fused_multiply_add: Expect arg[3] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 3))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 32))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 32))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 3))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg3)[0].ndim)))) {
    TVMAPISetLastError("arg3.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg3)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg3)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg3)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg3.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg3_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[1]) == 3))) {
    TVMAPISetLastError("Argument arg3.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[2]) == 32))) {
    TVMAPISetLastError("Argument arg3.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[3]) == 32))) {
    TVMAPISetLastError("Argument arg3.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg3)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg3.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg3)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg3.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg3)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg3.device_id has an unsatisfied constraint");
    return -1;
  }
  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 3; ++ax0_ax1_fused) {
    for (int32_t ax2 = 0; ax2 < 32; ++ax2) {
      for (int32_t ax3 = 0; ax3 < 32; ++ax3) {
        T_add[((((ax0_ax1_fused * 32) + ax2) * 32) + ax3)] = ((placeholder[((((ax0_ax1_fused * 32) + ax2) * 32) + ax3)] * placeholder1[ax0_ax1_fused]) + placeholder2[ax0_ax1_fused]);
      }
    }
  }
  return 0;
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t fused_nn_conv2d_multiply_add_nn_relu_4( void* args,  void* arg_type_ids, int32_t num_args) {
  if (!((num_args == 5))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_4: num_args should be 5");
    return -1;
  }
  void* arg0 = (((TVMValue*)args)[0].v_handle);
  int32_t arg0_code = (( int32_t*)arg_type_ids)[0];
  void* arg1 = (((TVMValue*)args)[1].v_handle);
  int32_t arg1_code = (( int32_t*)arg_type_ids)[1];
  void* arg2 = (((TVMValue*)args)[2].v_handle);
  int32_t arg2_code = (( int32_t*)arg_type_ids)[2];
  void* arg3 = (((TVMValue*)args)[3].v_handle);
  int32_t arg3_code = (( int32_t*)arg_type_ids)[3];
  void* arg4 = (((TVMValue*)args)[4].v_handle);
  int32_t arg4_code = (( int32_t*)arg_type_ids)[4];
  float* placeholder = (float*)(((TVMArray*)arg0)[0].data);
  int64_t* arg0_shape = (int64_t*)(((TVMArray*)arg0)[0].shape);
  int64_t* arg0_strides = (int64_t*)(((TVMArray*)arg0)[0].strides);
  if (!(arg0_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg0_strides[3])) && (16 == ((int32_t)arg0_strides[2]))) && (256 == ((int32_t)arg0_strides[1]))) && (32768 == ((int32_t)arg0_strides[0]))))) {
      TVMAPISetLastError("arg0.strides: expected to be compact array");
      return -1;
    }
  }
  int32_t dev_type = (((TVMArray*)arg0)[0].ctx.device_type);
  int32_t dev_id = (((TVMArray*)arg0)[0].ctx.device_id);
  float* placeholder1 = (float*)(((TVMArray*)arg1)[0].data);
  int64_t* arg1_shape = (int64_t*)(((TVMArray*)arg1)[0].shape);
  int64_t* arg1_strides = (int64_t*)(((TVMArray*)arg1)[0].strides);
  if (!(arg1_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg1_strides[3])) && (3 == ((int32_t)arg1_strides[2]))) && (9 == ((int32_t)arg1_strides[1]))) && (1152 == ((int32_t)arg1_strides[0]))))) {
      TVMAPISetLastError("arg1.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder2 = (float*)(((TVMArray*)arg2)[0].data);
  int64_t* arg2_shape = (int64_t*)(((TVMArray*)arg2)[0].shape);
  int64_t* arg2_strides = (int64_t*)(((TVMArray*)arg2)[0].strides);
  if (!(arg2_strides == NULL)) {
    if (!((((1 == ((int32_t)arg2_strides[2])) && (1 == ((int32_t)arg2_strides[1]))) && (1 == ((int32_t)arg2_strides[0]))))) {
      TVMAPISetLastError("arg2.strides: expected to be compact array");
      return -1;
    }
  }
  float* placeholder3 = (float*)(((TVMArray*)arg3)[0].data);
  int64_t* arg3_shape = (int64_t*)(((TVMArray*)arg3)[0].shape);
  int64_t* arg3_strides = (int64_t*)(((TVMArray*)arg3)[0].strides);
  if (!(arg3_strides == NULL)) {
    if (!((((1 == ((int32_t)arg3_strides[2])) && (1 == ((int32_t)arg3_strides[1]))) && (1 == ((int32_t)arg3_strides[0]))))) {
      TVMAPISetLastError("arg3.strides: expected to be compact array");
      return -1;
    }
  }
  float* T_relu = (float*)(((TVMArray*)arg4)[0].data);
  int64_t* arg4_shape = (int64_t*)(((TVMArray*)arg4)[0].shape);
  int64_t* arg4_strides = (int64_t*)(((TVMArray*)arg4)[0].strides);
  if (!(arg4_strides == NULL)) {
    if (!(((((1 == ((int32_t)arg4_strides[3])) && (16 == ((int32_t)arg4_strides[2]))) && (256 == ((int32_t)arg4_strides[1]))) && (32768 == ((int32_t)arg4_strides[0]))))) {
      TVMAPISetLastError("arg4.strides: expected to be compact array");
      return -1;
    }
  }
  if (!(((((arg0_code == 3) || (arg0_code == 13)) || (arg0_code == 7)) || (arg0_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_4: Expect arg[0] to be pointer");
    return -1;
  }
  if (!(((((arg1_code == 3) || (arg1_code == 13)) || (arg1_code == 7)) || (arg1_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_4: Expect arg[1] to be pointer");
    return -1;
  }
  if (!(((((arg2_code == 3) || (arg2_code == 13)) || (arg2_code == 7)) || (arg2_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_4: Expect arg[2] to be pointer");
    return -1;
  }
  if (!(((((arg3_code == 3) || (arg3_code == 13)) || (arg3_code == 7)) || (arg3_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_4: Expect arg[3] to be pointer");
    return -1;
  }
  if (!(((((arg4_code == 3) || (arg4_code == 13)) || (arg4_code == 7)) || (arg4_code == 4)))) {
    TVMAPISetLastError("fused_nn_conv2d_multiply_add_nn_relu_4: Expect arg[4] to be pointer");
    return -1;
  }
  if (!((dev_type == 1))) {
    TVMAPISetLastError("device_type need to be 1");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg0)[0].ndim)))) {
    TVMAPISetLastError("arg0.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg0)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg0)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg0)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg0.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg0_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg0.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[1]) == 128))) {
    TVMAPISetLastError("Argument arg0.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[2]) == 16))) {
    TVMAPISetLastError("Argument arg0.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg0_shape[3]) == 16))) {
    TVMAPISetLastError("Argument arg0.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg0)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg0.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg1)[0].ndim)))) {
    TVMAPISetLastError("arg1.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg1)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg1)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg1)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg1.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg1_shape[0]) == 128))) {
    TVMAPISetLastError("Argument arg1.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[1]) == 128))) {
    TVMAPISetLastError("Argument arg1.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[2]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg1_shape[3]) == 3))) {
    TVMAPISetLastError("Argument arg1.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg1)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg1.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg1)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg1.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg1)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg1.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg2)[0].ndim)))) {
    TVMAPISetLastError("arg2.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg2)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg2)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg2)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg2.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg2_shape[0]) == 128))) {
    TVMAPISetLastError("Argument arg2.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg2_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg2.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg2)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg2.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg2)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg2.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg2)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg2.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((3 == (((TVMArray*)arg3)[0].ndim)))) {
    TVMAPISetLastError("arg3.ndim is expected to equal 3");
    return -1;
  }
  if (!(((((((TVMArray*)arg3)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg3)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg3)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg3.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg3_shape[0]) == 128))) {
    TVMAPISetLastError("Argument arg3.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[1]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg3_shape[2]) == 1))) {
    TVMAPISetLastError("Argument arg3.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg3)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg3.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg3)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg3.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg3)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg3.device_id has an unsatisfied constraint");
    return -1;
  }
  if (!((4 == (((TVMArray*)arg4)[0].ndim)))) {
    TVMAPISetLastError("arg4.ndim is expected to equal 4");
    return -1;
  }
  if (!(((((((TVMArray*)arg4)[0].dtype.code) == (uint8_t)2) && ((((TVMArray*)arg4)[0].dtype.bits) == (uint8_t)32)) && ((((TVMArray*)arg4)[0].dtype.lanes) == (uint16_t)1)))) {
    TVMAPISetLastError("arg4.dtype is expected to be float32");
    return -1;
  }
  if (!((((int32_t)arg4_shape[0]) == 1))) {
    TVMAPISetLastError("Argument arg4.shape[0] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[1]) == 128))) {
    TVMAPISetLastError("Argument arg4.shape[1] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[2]) == 16))) {
    TVMAPISetLastError("Argument arg4.shape[2] has an unsatisfied constraint");
    return -1;
  }
  if (!((((int32_t)arg4_shape[3]) == 16))) {
    TVMAPISetLastError("Argument arg4.shape[3] has an unsatisfied constraint");
    return -1;
  }
  if (!(((((TVMArray*)arg4)[0].byte_offset) == (uint64_t)0))) {
    TVMAPISetLastError("Argument arg4.byte_offset has an unsatisfied constraint");
    return -1;
  }
  if (!((1 == (((TVMArray*)arg4)[0].ctx.device_type)))) {
    TVMAPISetLastError("Argument arg4.device_type has an unsatisfied constraint");
    return -1;
  }
  if (!((dev_id == (((TVMArray*)arg4)[0].ctx.device_id)))) {
    TVMAPISetLastError("Argument arg4.device_id has an unsatisfied constraint");
    return -1;
  }
  void* data_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)165888, 2, 32);
  if (data_vec == NULL) {
    return -1;
  }
  void* kernel_vec = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)589824, 2, 32);
  if (kernel_vec == NULL) {
    return -1;
  }
  for (int32_t C_h_fused = 0; C_h_fused < 288; ++C_h_fused) {
    for (int32_t c = 0; c < 8; ++c) {
      for (int32_t w = 0; w < 18; ++w) {
        (( float*)data_vec)[((((C_h_fused * 8) + c) * 18) + w)] = (((((1 <= (C_h_fused % 18)) && ((C_h_fused % 18) < 17)) && (1 <= w)) && (w < 17)) ? placeholder[((((((((C_h_fused / 18) * 8) + c) * 16) + (C_h_fused % 18)) * 16) + w) + -17)] : 0.000000e+00f);
      }
    }
  }
  for (int32_t CO_h_fused = 0; CO_h_fused < 48; ++CO_h_fused) {
    for (int32_t CI = 0; CI < 16; ++CI) {
      for (int32_t w1 = 0; w1 < 3; ++w1) {
        for (int32_t ci = 0; ci < 8; ++ci) {
          for (int32_t co = 0; co < 8; ++co) {
            (( float*)kernel_vec)[(((((((((((CO_h_fused / 3) * 16) + CI) * 3) + (CO_h_fused % 3)) * 3) + w1) * 8) + ci) * 8) + co)] = placeholder1[(((((((((((CO_h_fused / 3) * 8) + co) * 16) + CI) * 8) + ci) * 3) + (CO_h_fused % 3)) * 3) + w1)];
          }
        }
      }
    }
  }
  for (int32_t ax1_outer_ax2_fused = 0; ax1_outer_ax2_fused < 256; ++ax1_outer_ax2_fused) {
     float conv_global[128];
    for (int32_t oc_block_c_init = 0; oc_block_c_init < 8; ++oc_block_c_init) {
      conv_global[oc_block_c_init] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init1 = 0; oc_block_c_init1 < 8; ++oc_block_c_init1) {
      conv_global[(oc_block_c_init1 + 8)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init2 = 0; oc_block_c_init2 < 8; ++oc_block_c_init2) {
      conv_global[(oc_block_c_init2 + 16)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init3 = 0; oc_block_c_init3 < 8; ++oc_block_c_init3) {
      conv_global[(oc_block_c_init3 + 24)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init4 = 0; oc_block_c_init4 < 8; ++oc_block_c_init4) {
      conv_global[(oc_block_c_init4 + 32)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init5 = 0; oc_block_c_init5 < 8; ++oc_block_c_init5) {
      conv_global[(oc_block_c_init5 + 40)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init6 = 0; oc_block_c_init6 < 8; ++oc_block_c_init6) {
      conv_global[(oc_block_c_init6 + 48)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init7 = 0; oc_block_c_init7 < 8; ++oc_block_c_init7) {
      conv_global[(oc_block_c_init7 + 56)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init8 = 0; oc_block_c_init8 < 8; ++oc_block_c_init8) {
      conv_global[(oc_block_c_init8 + 64)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init9 = 0; oc_block_c_init9 < 8; ++oc_block_c_init9) {
      conv_global[(oc_block_c_init9 + 72)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init10 = 0; oc_block_c_init10 < 8; ++oc_block_c_init10) {
      conv_global[(oc_block_c_init10 + 80)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init11 = 0; oc_block_c_init11 < 8; ++oc_block_c_init11) {
      conv_global[(oc_block_c_init11 + 88)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init12 = 0; oc_block_c_init12 < 8; ++oc_block_c_init12) {
      conv_global[(oc_block_c_init12 + 96)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init13 = 0; oc_block_c_init13 < 8; ++oc_block_c_init13) {
      conv_global[(oc_block_c_init13 + 104)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init14 = 0; oc_block_c_init14 < 8; ++oc_block_c_init14) {
      conv_global[(oc_block_c_init14 + 112)] = 0.000000e+00f;
    }
    for (int32_t oc_block_c_init15 = 0; oc_block_c_init15 < 8; ++oc_block_c_init15) {
      conv_global[(oc_block_c_init15 + 120)] = 0.000000e+00f;
    }
    for (int32_t ic_outer = 0; ic_outer < 16; ++ic_outer) {
      for (int32_t kh = 0; kh < 3; ++kh) {
        for (int32_t kw = 0; kw < 3; ++kw) {
          for (int32_t ic_inner = 0; ic_inner < 8; ++ic_inner) {
            for (int32_t oc_block_c = 0; oc_block_c < 8; ++oc_block_c) {
              conv_global[oc_block_c] = (conv_global[oc_block_c] + ((( float*)data_vec)[(((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c)]));
            }
            for (int32_t oc_block_c1 = 0; oc_block_c1 < 8; ++oc_block_c1) {
              conv_global[(oc_block_c1 + 8)] = (conv_global[(oc_block_c1 + 8)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 1)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c1)]));
            }
            for (int32_t oc_block_c2 = 0; oc_block_c2 < 8; ++oc_block_c2) {
              conv_global[(oc_block_c2 + 16)] = (conv_global[(oc_block_c2 + 16)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 2)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c2)]));
            }
            for (int32_t oc_block_c3 = 0; oc_block_c3 < 8; ++oc_block_c3) {
              conv_global[(oc_block_c3 + 24)] = (conv_global[(oc_block_c3 + 24)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 3)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c3)]));
            }
            for (int32_t oc_block_c4 = 0; oc_block_c4 < 8; ++oc_block_c4) {
              conv_global[(oc_block_c4 + 32)] = (conv_global[(oc_block_c4 + 32)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 4)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c4)]));
            }
            for (int32_t oc_block_c5 = 0; oc_block_c5 < 8; ++oc_block_c5) {
              conv_global[(oc_block_c5 + 40)] = (conv_global[(oc_block_c5 + 40)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 5)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c5)]));
            }
            for (int32_t oc_block_c6 = 0; oc_block_c6 < 8; ++oc_block_c6) {
              conv_global[(oc_block_c6 + 48)] = (conv_global[(oc_block_c6 + 48)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 6)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c6)]));
            }
            for (int32_t oc_block_c7 = 0; oc_block_c7 < 8; ++oc_block_c7) {
              conv_global[(oc_block_c7 + 56)] = (conv_global[(oc_block_c7 + 56)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 7)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c7)]));
            }
            for (int32_t oc_block_c8 = 0; oc_block_c8 < 8; ++oc_block_c8) {
              conv_global[(oc_block_c8 + 64)] = (conv_global[(oc_block_c8 + 64)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 8)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c8)]));
            }
            for (int32_t oc_block_c9 = 0; oc_block_c9 < 8; ++oc_block_c9) {
              conv_global[(oc_block_c9 + 72)] = (conv_global[(oc_block_c9 + 72)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 9)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c9)]));
            }
            for (int32_t oc_block_c10 = 0; oc_block_c10 < 8; ++oc_block_c10) {
              conv_global[(oc_block_c10 + 80)] = (conv_global[(oc_block_c10 + 80)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 10)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c10)]));
            }
            for (int32_t oc_block_c11 = 0; oc_block_c11 < 8; ++oc_block_c11) {
              conv_global[(oc_block_c11 + 88)] = (conv_global[(oc_block_c11 + 88)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 11)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c11)]));
            }
            for (int32_t oc_block_c12 = 0; oc_block_c12 < 8; ++oc_block_c12) {
              conv_global[(oc_block_c12 + 96)] = (conv_global[(oc_block_c12 + 96)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 12)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c12)]));
            }
            for (int32_t oc_block_c13 = 0; oc_block_c13 < 8; ++oc_block_c13) {
              conv_global[(oc_block_c13 + 104)] = (conv_global[(oc_block_c13 + 104)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 13)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c13)]));
            }
            for (int32_t oc_block_c14 = 0; oc_block_c14 < 8; ++oc_block_c14) {
              conv_global[(oc_block_c14 + 112)] = (conv_global[(oc_block_c14 + 112)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 14)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c14)]));
            }
            for (int32_t oc_block_c15 = 0; oc_block_c15 < 8; ++oc_block_c15) {
              conv_global[(oc_block_c15 + 120)] = (conv_global[(oc_block_c15 + 120)] + ((( float*)data_vec)[((((((((ic_outer * 18) + kh) + (ax1_outer_ax2_fused % 16)) * 8) + ic_inner) * 18) + kw) + 15)] * (( float*)kernel_vec)[(((((((((((ax1_outer_ax2_fused / 16) * 16) + ic_outer) * 3) + kh) * 3) + kw) * 8) + ic_inner) * 8) + oc_block_c15)]));
            }
          }
        }
      }
    }
    for (int32_t ax3_inner = 0; ax3_inner < 16; ++ax3_inner) {
      for (int32_t ax1_inner = 0; ax1_inner < 8; ++ax1_inner) {
        T_relu[(((((((ax1_outer_ax2_fused / 16) * 8) + ax1_inner) * 16) + (ax1_outer_ax2_fused % 16)) * 16) + ax3_inner)] = (((conv_global[((ax3_inner * 8) + ax1_inner)] * placeholder2[(((ax1_outer_ax2_fused / 16) * 8) + ax1_inner)]) + placeholder3[(((ax1_outer_ax2_fused / 16) * 8) + ax1_inner)])) > (0.000000e+00f) ? (((conv_global[((ax3_inner * 8) + ax1_inner)] * placeholder2[(((ax1_outer_ax2_fused / 16) * 8) + ax1_inner)]) + placeholder3[(((ax1_outer_ax2_fused / 16) * 8) + ax1_inner)])) : (0.000000e+00f);
      }
    }
  }
  if (TVMBackendFreeWorkspace(1, dev_id, kernel_vec) != 0) {
    return -1;
  }
  if (TVMBackendFreeWorkspace(1, dev_id, data_vec) != 0) {
    return -1;
  }
  return 0;
}

